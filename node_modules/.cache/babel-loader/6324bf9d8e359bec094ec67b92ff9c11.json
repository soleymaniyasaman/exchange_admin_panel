{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module heading/headingcommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { first } from 'ckeditor5/src/utils';\n/**\n * The heading command. It is used by the {@link module:heading/heading~Heading heading feature} to apply headings.\n *\n * @extends module:core/command~Command\n */\n\nexport default class HeadingCommand extends Command {\n  /**\n   * Creates an instance of the command.\n   *\n   * @param {module:core/editor/editor~Editor} editor Editor instance.\n   * @param {Array.<String>} modelElements Names of the element which this command can apply in the model.\n   */\n  constructor(editor, modelElements) {\n    super(editor);\n    /**\n     * If the selection starts in a heading (which {@link #modelElements is supported by this command})\n     * the value is set to the name of that heading model element.\n     * It is  set to `false` otherwise.\n     *\n     * @observable\n     * @readonly\n     * @member {Boolean|String} #value\n     */\n\n    /**\n     * Set of defined model's elements names that this command support.\n     * See {@link module:heading/heading~HeadingOption}.\n     *\n     * @readonly\n     * @member {Array.<String>}\n     */\n\n    this.modelElements = modelElements;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    const block = first(this.editor.model.document.selection.getSelectedBlocks());\n    this.value = !!block && this.modelElements.includes(block.name) && block.name;\n    this.isEnabled = !!block && this.modelElements.some(heading => checkCanBecomeHeading(block, heading, this.editor.model.schema));\n  }\n  /**\n   * Executes the command. Applies the heading to the selected blocks or, if the first selected\n   * block is a heading already, turns selected headings (of this level only) to paragraphs.\n   *\n   * @param {Object} options\n   * @param {String} options.value Name of the element which this command will apply in the model.\n   * @fires execute\n   */\n\n\n  execute(options) {\n    const model = this.editor.model;\n    const document = model.document;\n    const modelElement = options.value;\n    model.change(writer => {\n      const blocks = Array.from(document.selection.getSelectedBlocks()).filter(block => {\n        return checkCanBecomeHeading(block, modelElement, model.schema);\n      });\n\n      for (const block of blocks) {\n        if (!block.is('element', modelElement)) {\n          writer.rename(block, modelElement);\n        }\n      }\n    });\n  }\n\n} // Checks whether the given block can be replaced by a specific heading.\n//\n// @private\n// @param {module:engine/model/element~Element} block A block to be tested.\n// @param {module:heading/headingcommand~HeadingCommand#modelElement} heading Command element name in the model.\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\n// @returns {Boolean}\n\nfunction checkCanBecomeHeading(block, heading, schema) {\n  return schema.checkChild(block.parent, heading) && !schema.isObject(block);\n}","map":{"version":3,"sources":["/Users/yasaman/Documents/moj_adminpanel/adminpanel/node_modules/@ckeditor/ckeditor5-heading/src/headingcommand.js"],"names":["Command","first","HeadingCommand","constructor","editor","modelElements","refresh","block","model","document","selection","getSelectedBlocks","value","includes","name","isEnabled","some","heading","checkCanBecomeHeading","schema","execute","options","modelElement","change","writer","blocks","Array","from","filter","is","rename","checkChild","parent","isObject"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,KAAT,QAAsB,qBAAtB;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,cAAN,SAA6BF,OAA7B,CAAqC;AACnD;AACD;AACA;AACA;AACA;AACA;AACCG,EAAAA,WAAW,CAAEC,MAAF,EAAUC,aAAV,EAA0B;AACpC,UAAOD,MAAP;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKC,aAAL,GAAqBA,aAArB;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,OAAO,GAAG;AACT,UAAMC,KAAK,GAAGN,KAAK,CAAE,KAAKG,MAAL,CAAYI,KAAZ,CAAkBC,QAAlB,CAA2BC,SAA3B,CAAqCC,iBAArC,EAAF,CAAnB;AAEA,SAAKC,KAAL,GAAa,CAAC,CAACL,KAAF,IAAW,KAAKF,aAAL,CAAmBQ,QAAnB,CAA6BN,KAAK,CAACO,IAAnC,CAAX,IAAwDP,KAAK,CAACO,IAA3E;AACA,SAAKC,SAAL,GAAiB,CAAC,CAACR,KAAF,IAAW,KAAKF,aAAL,CAAmBW,IAAnB,CAAyBC,OAAO,IAAIC,qBAAqB,CAAEX,KAAF,EAASU,OAAT,EAAkB,KAAKb,MAAL,CAAYI,KAAZ,CAAkBW,MAApC,CAAzD,CAA5B;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,OAAO,CAAEC,OAAF,EAAY;AAClB,UAAMb,KAAK,GAAG,KAAKJ,MAAL,CAAYI,KAA1B;AACA,UAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAvB;AAEA,UAAMa,YAAY,GAAGD,OAAO,CAACT,KAA7B;AAEAJ,IAAAA,KAAK,CAACe,MAAN,CAAcC,MAAM,IAAI;AACvB,YAAMC,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAYlB,QAAQ,CAACC,SAAT,CAAmBC,iBAAnB,EAAZ,EACbiB,MADa,CACLrB,KAAK,IAAI;AACjB,eAAOW,qBAAqB,CAAEX,KAAF,EAASe,YAAT,EAAuBd,KAAK,CAACW,MAA7B,CAA5B;AACA,OAHa,CAAf;;AAKA,WAAM,MAAMZ,KAAZ,IAAqBkB,MAArB,EAA8B;AAC7B,YAAK,CAAClB,KAAK,CAACsB,EAAN,CAAU,SAAV,EAAqBP,YAArB,CAAN,EAA4C;AAC3CE,UAAAA,MAAM,CAACM,MAAP,CAAevB,KAAf,EAAsBe,YAAtB;AACA;AACD;AACD,KAXD;AAYA;;AAlEkD,C,CAqEpD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASJ,qBAAT,CAAgCX,KAAhC,EAAuCU,OAAvC,EAAgDE,MAAhD,EAAyD;AACxD,SAAOA,MAAM,CAACY,UAAP,CAAmBxB,KAAK,CAACyB,MAAzB,EAAiCf,OAAjC,KAA8C,CAACE,MAAM,CAACc,QAAP,CAAiB1B,KAAjB,CAAtD;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module heading/headingcommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\nimport { first } from 'ckeditor5/src/utils';\n\n/**\n * The heading command. It is used by the {@link module:heading/heading~Heading heading feature} to apply headings.\n *\n * @extends module:core/command~Command\n */\nexport default class HeadingCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor Editor instance.\n\t * @param {Array.<String>} modelElements Names of the element which this command can apply in the model.\n\t */\n\tconstructor( editor, modelElements ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * If the selection starts in a heading (which {@link #modelElements is supported by this command})\n\t\t * the value is set to the name of that heading model element.\n\t\t * It is  set to `false` otherwise.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean|String} #value\n\t\t */\n\n\t\t/**\n\t\t * Set of defined model's elements names that this command support.\n\t\t * See {@link module:heading/heading~HeadingOption}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<String>}\n\t\t */\n\t\tthis.modelElements = modelElements;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst block = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\tthis.value = !!block && this.modelElements.includes( block.name ) && block.name;\n\t\tthis.isEnabled = !!block && this.modelElements.some( heading => checkCanBecomeHeading( block, heading, this.editor.model.schema ) );\n\t}\n\n\t/**\n\t * Executes the command. Applies the heading to the selected blocks or, if the first selected\n\t * block is a heading already, turns selected headings (of this level only) to paragraphs.\n\t *\n\t * @param {Object} options\n\t * @param {String} options.value Name of the element which this command will apply in the model.\n\t * @fires execute\n\t */\n\texecute( options ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\tconst modelElement = options.value;\n\n\t\tmodel.change( writer => {\n\t\t\tconst blocks = Array.from( document.selection.getSelectedBlocks() )\n\t\t\t\t.filter( block => {\n\t\t\t\t\treturn checkCanBecomeHeading( block, modelElement, model.schema );\n\t\t\t\t} );\n\n\t\t\tfor ( const block of blocks ) {\n\t\t\t\tif ( !block.is( 'element', modelElement ) ) {\n\t\t\t\t\twriter.rename( block, modelElement );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n\n// Checks whether the given block can be replaced by a specific heading.\n//\n// @private\n// @param {module:engine/model/element~Element} block A block to be tested.\n// @param {module:heading/headingcommand~HeadingCommand#modelElement} heading Command element name in the model.\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\n// @returns {Boolean}\nfunction checkCanBecomeHeading( block, heading, schema ) {\n\treturn schema.checkChild( block.parent, heading ) && !schema.isObject( block );\n}\n"]},"metadata":{},"sourceType":"module"}