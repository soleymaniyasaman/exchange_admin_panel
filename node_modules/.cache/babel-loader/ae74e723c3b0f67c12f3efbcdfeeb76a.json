{"ast":null,"code":"import { Observer } from '@syncfusion/ej2-base';\nimport * as CONSTANT from './constant';\nimport { Lists } from './../plugin/lists';\nimport { NodeSelection } from './../../selection/index';\nimport { DOMNode } from './../plugin/dom-node';\nimport { Formats } from './../plugin/formats';\nimport { LinkCommand } from './../plugin/link';\nimport { Alignments } from './../plugin/alignments';\nimport { Indents } from './../plugin/indents';\nimport { ImageCommand } from './../plugin/image';\nimport { TableCommand } from './../plugin/table';\nimport { SelectionBasedExec } from './../plugin/selection-exec';\nimport { InsertHtmlExec } from './../plugin/inserthtml-exec';\nimport { ClearFormatExec } from './../plugin/clearformat-exec';\nimport { UndoRedoManager } from './../plugin/undo';\nimport { MsWordPaste } from '../plugin/ms-word-clean-up';\nimport * as EVENTS from './../../common/constant';\nimport { InsertTextExec } from '../plugin/insert-text';\nimport { NodeCutter } from '../plugin/nodecutter';\n/**\n * EditorManager internal component\n *\n * @hidden\n\n */\n\nvar EditorManager =\n/** @class */\nfunction () {\n  /**\n   * Constructor for creating the component\n   *\n   * @hidden\n    * @param {ICommandModel} options - specifies the command Model\n   */\n  function EditorManager(options) {\n    this.currentDocument = options.document;\n    this.editableElement = options.editableElement;\n    this.nodeSelection = new NodeSelection();\n    this.nodeCutter = new NodeCutter();\n    this.domNode = new DOMNode(this.editableElement, this.currentDocument);\n    this.observer = new Observer(this);\n    this.listObj = new Lists(this);\n    this.formatObj = new Formats(this);\n    this.alignmentObj = new Alignments(this);\n    this.indentsObj = new Indents(this);\n    this.linkObj = new LinkCommand(this);\n    this.imgObj = new ImageCommand(this);\n    this.selectionObj = new SelectionBasedExec(this);\n    this.inserthtmlObj = new InsertHtmlExec(this);\n    this.insertTextObj = new InsertTextExec(this);\n    this.clearObj = new ClearFormatExec(this);\n    this.tableObj = new TableCommand(this);\n    this.undoRedoManager = new UndoRedoManager(this, options.options);\n    this.msWordPaste = new MsWordPaste(this);\n    this.wireEvents();\n  }\n\n  EditorManager.prototype.wireEvents = function () {\n    this.observer.on(EVENTS.KEY_DOWN, this.editorKeyDown, this);\n    this.observer.on(EVENTS.KEY_UP, this.editorKeyUp, this);\n    this.observer.on(EVENTS.KEY_UP, this.editorKeyUp, this);\n    this.observer.on(EVENTS.MODEL_CHANGED, this.onPropertyChanged, this);\n    this.observer.on(EVENTS.MS_WORD_CLEANUP, this.onWordPaste, this);\n    this.observer.on(EVENTS.ON_BEGIN, this.onBegin, this);\n  };\n\n  EditorManager.prototype.onWordPaste = function (e) {\n    this.observer.notify(EVENTS.MS_WORD_CLEANUP_PLUGIN, e);\n  };\n\n  EditorManager.prototype.onPropertyChanged = function (props) {\n    this.observer.notify(EVENTS.MODEL_CHANGED_PLUGIN, props);\n  };\n\n  EditorManager.prototype.editorKeyDown = function (e) {\n    this.observer.notify(EVENTS.KEY_DOWN_HANDLER, e);\n  };\n\n  EditorManager.prototype.editorKeyUp = function (e) {\n    this.observer.notify(EVENTS.KEY_UP_HANDLER, e);\n  };\n\n  EditorManager.prototype.onBegin = function (e) {\n    this.observer.notify(EVENTS.SPACE_ACTION, e);\n  };\n  /* eslint-disable */\n\n  /**\n   * execCommand\n   *\n   * @param {ExecCommand} command - specifies the execution command\n   * @param {T} value - specifes the value.\n   * @param {Event} event - specifies the call back event\n   * @param {Function} callBack - specifies the function\n   * @param {string} text - specifies the string value\n   * @param {T} exeValue - specifies the values to be executed\n   * @param {string} selector - specifies the selector values\n   * @returns {void}\n   * @hidden\n    */\n\n  /* eslint-enable */\n\n\n  EditorManager.prototype.execCommand = function (command, value, event, callBack, text, exeValue, selector, enterAction) {\n    switch (command.toLowerCase()) {\n      case 'lists':\n        this.observer.notify(EVENTS.LIST_TYPE, {\n          subCommand: value,\n          event: event,\n          callBack: callBack,\n          selector: selector,\n          item: exeValue,\n          enterAction: enterAction\n        });\n        break;\n\n      case 'formats':\n        this.observer.notify(EVENTS.FORMAT_TYPE, {\n          subCommand: value,\n          event: event,\n          callBack: callBack,\n          selector: selector,\n          exeValue: exeValue,\n          enterAction: enterAction\n        });\n        break;\n\n      case 'alignments':\n        this.observer.notify(CONSTANT.ALIGNMENT_TYPE, {\n          subCommand: value,\n          event: event,\n          callBack: callBack,\n          selector: selector,\n          value: exeValue\n        });\n        break;\n\n      case 'indents':\n        this.observer.notify(CONSTANT.INDENT_TYPE, {\n          subCommand: value,\n          event: event,\n          callBack: callBack,\n          selector: selector\n        });\n        break;\n\n      case 'links':\n        this.observer.notify(CONSTANT.LINK, {\n          command: command,\n          value: value,\n          item: exeValue,\n          event: event,\n          callBack: callBack\n        });\n        break;\n\n      case 'files':\n        this.observer.notify(CONSTANT.IMAGE, {\n          command: command,\n          value: 'Image',\n          item: exeValue,\n          event: event,\n          callBack: callBack,\n          selector: selector\n        });\n        break;\n\n      case 'images':\n        this.observer.notify(CONSTANT.IMAGE, {\n          command: command,\n          value: value,\n          item: exeValue,\n          event: event,\n          callBack: callBack,\n          selector: selector\n        });\n        break;\n\n      case 'table':\n        switch (value.toString().toLocaleLowerCase()) {\n          case 'createtable':\n            this.observer.notify(CONSTANT.TABLE, {\n              item: exeValue,\n              event: event,\n              callBack: callBack,\n              enterAction: enterAction\n            });\n            break;\n\n          case 'insertrowbefore':\n          case 'insertrowafter':\n            this.observer.notify(CONSTANT.INSERT_ROW, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n\n          case 'insertcolumnleft':\n          case 'insertcolumnright':\n            this.observer.notify(CONSTANT.INSERT_COLUMN, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n\n          case 'deleterow':\n            this.observer.notify(CONSTANT.DELETEROW, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n\n          case 'deletecolumn':\n            this.observer.notify(CONSTANT.DELETECOLUMN, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n\n          case 'tableremove':\n            this.observer.notify(CONSTANT.REMOVETABLE, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n\n          case 'tableheader':\n            this.observer.notify(CONSTANT.TABLEHEADER, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n\n          case 'aligntop':\n          case 'alignmiddle':\n          case 'alignbottom':\n            this.observer.notify(CONSTANT.TABLE_VERTICAL_ALIGN, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n\n          case 'merge':\n            this.observer.notify(CONSTANT.TABLE_MERGE, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n\n          case 'horizontalsplit':\n            this.observer.notify(CONSTANT.TABLE_HORIZONTAL_SPLIT, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n\n          case 'verticalsplit':\n            this.observer.notify(CONSTANT.TABLE_VERTICAL_SPLIT, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n        }\n\n        break;\n\n      case 'font':\n      case 'style':\n      case 'effects':\n      case 'casing':\n        this.observer.notify(CONSTANT.SELECTION_TYPE, {\n          subCommand: value,\n          event: event,\n          callBack: callBack,\n          value: text,\n          selector: selector,\n          enterAction: enterAction\n        });\n        break;\n\n      case 'inserthtml':\n        this.observer.notify(CONSTANT.INSERTHTML_TYPE, {\n          subCommand: value,\n          callBack: callBack,\n          value: text\n        });\n        break;\n\n      case 'inserttext':\n        this.observer.notify(CONSTANT.INSERT_TEXT_TYPE, {\n          subCommand: value,\n          callBack: callBack,\n          value: text\n        });\n        break;\n\n      case 'clear':\n        this.observer.notify(CONSTANT.CLEAR_TYPE, {\n          subCommand: value,\n          event: event,\n          callBack: callBack,\n          selector: selector,\n          enterAction: enterAction\n        });\n        break;\n\n      case 'actions':\n        this.observer.notify(EVENTS.ACTION, {\n          subCommand: value,\n          event: event,\n          callBack: callBack,\n          selector: selector\n        });\n        break;\n    }\n  };\n\n  return EditorManager;\n}();\n\nexport { EditorManager };","map":{"version":3,"sources":["/Users/yasaman/Documents/moj_adminpanel/adminpanel/node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/base/editor-manager.js"],"names":["Observer","CONSTANT","Lists","NodeSelection","DOMNode","Formats","LinkCommand","Alignments","Indents","ImageCommand","TableCommand","SelectionBasedExec","InsertHtmlExec","ClearFormatExec","UndoRedoManager","MsWordPaste","EVENTS","InsertTextExec","NodeCutter","EditorManager","options","currentDocument","document","editableElement","nodeSelection","nodeCutter","domNode","observer","listObj","formatObj","alignmentObj","indentsObj","linkObj","imgObj","selectionObj","inserthtmlObj","insertTextObj","clearObj","tableObj","undoRedoManager","msWordPaste","wireEvents","prototype","on","KEY_DOWN","editorKeyDown","KEY_UP","editorKeyUp","MODEL_CHANGED","onPropertyChanged","MS_WORD_CLEANUP","onWordPaste","ON_BEGIN","onBegin","e","notify","MS_WORD_CLEANUP_PLUGIN","props","MODEL_CHANGED_PLUGIN","KEY_DOWN_HANDLER","KEY_UP_HANDLER","SPACE_ACTION","execCommand","command","value","event","callBack","text","exeValue","selector","enterAction","toLowerCase","LIST_TYPE","subCommand","item","FORMAT_TYPE","ALIGNMENT_TYPE","INDENT_TYPE","LINK","IMAGE","toString","toLocaleLowerCase","TABLE","INSERT_ROW","INSERT_COLUMN","DELETEROW","DELETECOLUMN","REMOVETABLE","TABLEHEADER","TABLE_VERTICAL_ALIGN","TABLE_MERGE","TABLE_HORIZONTAL_SPLIT","TABLE_VERTICAL_SPLIT","SELECTION_TYPE","INSERTHTML_TYPE","INSERT_TEXT_TYPE","CLEAR_TYPE","ACTION"],"mappings":"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","sourcesContent":["import { Observer } from '@syncfusion/ej2-base';\nimport * as CONSTANT from './constant';\nimport { Lists } from './../plugin/lists';\nimport { NodeSelection } from './../../selection/index';\nimport { DOMNode } from './../plugin/dom-node';\nimport { Formats } from './../plugin/formats';\nimport { LinkCommand } from './../plugin/link';\nimport { Alignments } from './../plugin/alignments';\nimport { Indents } from './../plugin/indents';\nimport { ImageCommand } from './../plugin/image';\nimport { TableCommand } from './../plugin/table';\nimport { SelectionBasedExec } from './../plugin/selection-exec';\nimport { InsertHtmlExec } from './../plugin/inserthtml-exec';\nimport { ClearFormatExec } from './../plugin/clearformat-exec';\nimport { UndoRedoManager } from './../plugin/undo';\nimport { MsWordPaste } from '../plugin/ms-word-clean-up';\nimport * as EVENTS from './../../common/constant';\nimport { InsertTextExec } from '../plugin/insert-text';\nimport { NodeCutter } from '../plugin/nodecutter';\n/**\n * EditorManager internal component\n *\n * @hidden\n\n */\nvar EditorManager = /** @class */ (function () {\n    /**\n     * Constructor for creating the component\n     *\n     * @hidden\n\n     * @param {ICommandModel} options - specifies the command Model\n     */\n    function EditorManager(options) {\n        this.currentDocument = options.document;\n        this.editableElement = options.editableElement;\n        this.nodeSelection = new NodeSelection();\n        this.nodeCutter = new NodeCutter();\n        this.domNode = new DOMNode(this.editableElement, this.currentDocument);\n        this.observer = new Observer(this);\n        this.listObj = new Lists(this);\n        this.formatObj = new Formats(this);\n        this.alignmentObj = new Alignments(this);\n        this.indentsObj = new Indents(this);\n        this.linkObj = new LinkCommand(this);\n        this.imgObj = new ImageCommand(this);\n        this.selectionObj = new SelectionBasedExec(this);\n        this.inserthtmlObj = new InsertHtmlExec(this);\n        this.insertTextObj = new InsertTextExec(this);\n        this.clearObj = new ClearFormatExec(this);\n        this.tableObj = new TableCommand(this);\n        this.undoRedoManager = new UndoRedoManager(this, options.options);\n        this.msWordPaste = new MsWordPaste(this);\n        this.wireEvents();\n    }\n    EditorManager.prototype.wireEvents = function () {\n        this.observer.on(EVENTS.KEY_DOWN, this.editorKeyDown, this);\n        this.observer.on(EVENTS.KEY_UP, this.editorKeyUp, this);\n        this.observer.on(EVENTS.KEY_UP, this.editorKeyUp, this);\n        this.observer.on(EVENTS.MODEL_CHANGED, this.onPropertyChanged, this);\n        this.observer.on(EVENTS.MS_WORD_CLEANUP, this.onWordPaste, this);\n        this.observer.on(EVENTS.ON_BEGIN, this.onBegin, this);\n    };\n    EditorManager.prototype.onWordPaste = function (e) {\n        this.observer.notify(EVENTS.MS_WORD_CLEANUP_PLUGIN, e);\n    };\n    EditorManager.prototype.onPropertyChanged = function (props) {\n        this.observer.notify(EVENTS.MODEL_CHANGED_PLUGIN, props);\n    };\n    EditorManager.prototype.editorKeyDown = function (e) {\n        this.observer.notify(EVENTS.KEY_DOWN_HANDLER, e);\n    };\n    EditorManager.prototype.editorKeyUp = function (e) {\n        this.observer.notify(EVENTS.KEY_UP_HANDLER, e);\n    };\n    EditorManager.prototype.onBegin = function (e) {\n        this.observer.notify(EVENTS.SPACE_ACTION, e);\n    };\n    /* eslint-disable */\n    /**\n     * execCommand\n     *\n     * @param {ExecCommand} command - specifies the execution command\n     * @param {T} value - specifes the value.\n     * @param {Event} event - specifies the call back event\n     * @param {Function} callBack - specifies the function\n     * @param {string} text - specifies the string value\n     * @param {T} exeValue - specifies the values to be executed\n     * @param {string} selector - specifies the selector values\n     * @returns {void}\n     * @hidden\n\n     */\n    /* eslint-enable */\n    EditorManager.prototype.execCommand = function (command, value, event, callBack, text, exeValue, selector, enterAction) {\n        switch (command.toLowerCase()) {\n            case 'lists':\n                this.observer.notify(EVENTS.LIST_TYPE, { subCommand: value, event: event, callBack: callBack,\n                    selector: selector, item: exeValue, enterAction: enterAction });\n                break;\n            case 'formats':\n                this.observer.notify(EVENTS.FORMAT_TYPE, { subCommand: value, event: event, callBack: callBack,\n                    selector: selector, exeValue: exeValue, enterAction: enterAction\n                });\n                break;\n            case 'alignments':\n                this.observer.notify(CONSTANT.ALIGNMENT_TYPE, {\n                    subCommand: value, event: event, callBack: callBack,\n                    selector: selector,\n                    value: exeValue\n                });\n                break;\n            case 'indents':\n                this.observer.notify(CONSTANT.INDENT_TYPE, { subCommand: value, event: event, callBack: callBack, selector: selector });\n                break;\n            case 'links':\n                this.observer.notify(CONSTANT.LINK, { command: command, value: value, item: exeValue, event: event, callBack: callBack });\n                break;\n            case 'files':\n                this.observer.notify(CONSTANT.IMAGE, {\n                    command: command, value: 'Image', item: exeValue, event: event, callBack: callBack, selector: selector\n                });\n                break;\n            case 'images':\n                this.observer.notify(CONSTANT.IMAGE, {\n                    command: command, value: value, item: exeValue, event: event, callBack: callBack, selector: selector\n                });\n                break;\n            case 'table':\n                switch (value.toString().toLocaleLowerCase()) {\n                    case 'createtable':\n                        this.observer.notify(CONSTANT.TABLE, { item: exeValue, event: event, callBack: callBack, enterAction: enterAction });\n                        break;\n                    case 'insertrowbefore':\n                    case 'insertrowafter':\n                        this.observer.notify(CONSTANT.INSERT_ROW, { item: exeValue, event: event, callBack: callBack });\n                        break;\n                    case 'insertcolumnleft':\n                    case 'insertcolumnright':\n                        this.observer.notify(CONSTANT.INSERT_COLUMN, { item: exeValue, event: event, callBack: callBack });\n                        break;\n                    case 'deleterow':\n                        this.observer.notify(CONSTANT.DELETEROW, { item: exeValue, event: event, callBack: callBack });\n                        break;\n                    case 'deletecolumn':\n                        this.observer.notify(CONSTANT.DELETECOLUMN, { item: exeValue, event: event, callBack: callBack });\n                        break;\n                    case 'tableremove':\n                        this.observer.notify(CONSTANT.REMOVETABLE, { item: exeValue, event: event, callBack: callBack });\n                        break;\n                    case 'tableheader':\n                        this.observer.notify(CONSTANT.TABLEHEADER, { item: exeValue, event: event, callBack: callBack });\n                        break;\n                    case 'aligntop':\n                    case 'alignmiddle':\n                    case 'alignbottom':\n                        this.observer.notify(CONSTANT.TABLE_VERTICAL_ALIGN, { item: exeValue, event: event, callBack: callBack });\n                        break;\n                    case 'merge':\n                        this.observer.notify(CONSTANT.TABLE_MERGE, { item: exeValue, event: event, callBack: callBack });\n                        break;\n                    case 'horizontalsplit':\n                        this.observer.notify(CONSTANT.TABLE_HORIZONTAL_SPLIT, { item: exeValue, event: event, callBack: callBack });\n                        break;\n                    case 'verticalsplit':\n                        this.observer.notify(CONSTANT.TABLE_VERTICAL_SPLIT, { item: exeValue, event: event, callBack: callBack });\n                        break;\n                }\n                break;\n            case 'font':\n            case 'style':\n            case 'effects':\n            case 'casing':\n                this.observer.notify(CONSTANT.SELECTION_TYPE, { subCommand: value, event: event, callBack: callBack, value: text, selector: selector, enterAction: enterAction });\n                break;\n            case 'inserthtml':\n                this.observer.notify(CONSTANT.INSERTHTML_TYPE, { subCommand: value, callBack: callBack, value: text });\n                break;\n            case 'inserttext':\n                this.observer.notify(CONSTANT.INSERT_TEXT_TYPE, { subCommand: value, callBack: callBack, value: text });\n                break;\n            case 'clear':\n                this.observer.notify(CONSTANT.CLEAR_TYPE, { subCommand: value, event: event, callBack: callBack, selector: selector, enterAction: enterAction });\n                break;\n            case 'actions':\n                this.observer.notify(EVENTS.ACTION, { subCommand: value, event: event, callBack: callBack, selector: selector });\n                break;\n        }\n    };\n    return EditorManager;\n}());\nexport { EditorManager };\n"]},"metadata":{},"sourceType":"module"}