{"ast":null,"code":"import { IsFormatted } from './isformatted';\nimport * as CONSTANT from './../base/constant';\nimport { NodeSelection } from './../../selection/index';\nimport { getDefaultHtmlTbStatus } from './../../common/util';\n/**\n * Update Toolbar Status\n *\n * @hidden\n\n */\n\nexport var statusCollection = getDefaultHtmlTbStatus();\n\nvar ToolbarStatus =\n/** @class */\nfunction () {\n  function ToolbarStatus() {}\n  /**\n   * get method\n   *\n   * @param {Document} docElement - specifies the document element\n   * @param {Node} targetNode - specifies the target node\n   * @param {string[]} formatNode - specifies the format node\n   * @param {string[]} fontSize - specifies the font size\n   * @param {string[]} fontName - specifies the font name.\n   * @param {Node} documentNode - specifies the document node.\n   * @returns {IToolbarStatus} - returns the toolbar status\n   * @hidden\n    */\n\n\n  ToolbarStatus.get = function (docElement, targetNode, formatNode, fontSize, fontName, documentNode) {\n    var formatCollection = JSON.parse(JSON.stringify(statusCollection));\n    var nodeCollection = JSON.parse(JSON.stringify(statusCollection));\n    var nodeSelection = new NodeSelection();\n    var nodes = documentNode ? [documentNode] : nodeSelection.getNodeCollection(nodeSelection.getRange(docElement));\n    var nodesLength = nodes.length;\n    var isNodeChanged = false;\n    var range = nodeSelection.getRange(docElement);\n\n    for (var index = 0; index < nodes.length; index++) {\n      while (nodes[index].nodeType === 3 && range.startContainer.nodeType === 3 && nodes[index].parentNode && nodes[index].parentNode.lastElementChild && nodes[index].parentNode.lastElementChild.nodeName !== 'BR' && this.getImmediateBlockNode(nodes[index].parentNode).textContent.replace(/\\u200B/g, '').length === 0 && range.startContainer.textContent.replace(/\\u200B/g, '').length === 0 && nodeSelection.get(docElement).toString().replace(/\\u200B/g, '').length === 0) {\n        nodes[index] = nodes[index].parentNode.lastElementChild.firstChild;\n        isNodeChanged = true;\n      }\n\n      if (isNodeChanged && nodes[index]) {\n        nodeSelection.setCursorPoint(docElement, nodes[index], nodes[index].textContent.length);\n        isNodeChanged = false;\n      }\n\n      if (nodes[index].nodeName !== 'BR' && nodes[index].nodeType !== 3 || nodesLength > 1 && nodes[index].nodeType === 3 && nodes[index].textContent.trim() === '') {\n        nodes.splice(index, 1);\n        index--;\n      }\n    }\n\n    for (var index = 0; index < nodes.length; index++) {\n      formatCollection = this.getFormatParent(docElement, formatCollection, nodes[index], targetNode, formatNode, fontSize, fontName);\n\n      if (index === 0 && formatCollection.bold || !formatCollection.bold) {\n        nodeCollection.bold = formatCollection.bold;\n      }\n\n      if (index === 0 && formatCollection.insertcode || !formatCollection.insertcode) {\n        nodeCollection.insertcode = formatCollection.insertcode;\n      }\n\n      if (index === 0 && formatCollection.italic || !formatCollection.italic) {\n        nodeCollection.italic = formatCollection.italic;\n      }\n\n      if (index === 0 && formatCollection.underline || !formatCollection.underline) {\n        nodeCollection.underline = formatCollection.underline;\n      }\n\n      if (index === 0 && formatCollection.strikethrough || !formatCollection.strikethrough) {\n        nodeCollection.strikethrough = formatCollection.strikethrough;\n      }\n\n      if (index === 0 && formatCollection.superscript || !formatCollection.superscript) {\n        nodeCollection.superscript = formatCollection.superscript;\n      }\n\n      if (index === 0 && formatCollection.subscript || !formatCollection.subscript) {\n        nodeCollection.subscript = formatCollection.subscript;\n      }\n\n      if (index === 0 && formatCollection.fontcolor || !formatCollection.fontcolor) {\n        nodeCollection.fontcolor = formatCollection.fontcolor;\n      }\n\n      if (index === 0 && formatCollection.fontname || !formatCollection.fontname) {\n        nodeCollection.fontname = formatCollection.fontname;\n      }\n\n      if (index === 0 && formatCollection.fontsize || !formatCollection.fontsize) {\n        nodeCollection.fontsize = formatCollection.fontsize;\n      }\n\n      if (index === 0 && formatCollection.backgroundcolor || !formatCollection.backgroundcolor) {\n        nodeCollection.backgroundcolor = formatCollection.backgroundcolor;\n      }\n\n      if (index === 0 && formatCollection.orderedlist || !formatCollection.orderedlist) {\n        nodeCollection.orderedlist = formatCollection.orderedlist;\n      }\n\n      if (index === 0 && formatCollection.unorderedlist || !formatCollection.unorderedlist) {\n        nodeCollection.unorderedlist = formatCollection.unorderedlist;\n      }\n\n      if (index === 0 && formatCollection.alignments || !formatCollection.alignments) {\n        nodeCollection.alignments = formatCollection.alignments;\n      }\n\n      if (index === 0 && formatCollection.formats || !formatCollection.formats) {\n        nodeCollection.formats = formatCollection.formats;\n      }\n\n      if (index === 0 && formatCollection.createlink || !formatCollection.createlink) {\n        nodeCollection.createlink = formatCollection.createlink;\n      }\n\n      if (index === 0 && formatCollection.numberFormatList || !formatCollection.numberFormatList) {\n        nodeCollection.numberFormatList = formatCollection.numberFormatList;\n      }\n\n      if (index === 0 && formatCollection.bulletFormatList || !formatCollection.bulletFormatList) {\n        nodeCollection.bulletFormatList = formatCollection.bulletFormatList;\n      }\n\n      formatCollection = JSON.parse(JSON.stringify(statusCollection));\n    }\n\n    return nodeCollection;\n  };\n\n  ToolbarStatus.getImmediateBlockNode = function (node) {\n    do {\n      node = node.parentNode;\n    } while (node && CONSTANT.BLOCK_TAGS.indexOf(node.nodeName.toLocaleLowerCase()) < 0);\n\n    return node;\n  };\n\n  ToolbarStatus.getFormatParent = function (docElement, formatCollection, node, targetNode, formatNode, fontSize, fontName) {\n    if (targetNode.contains(node) || node.nodeType === 3 && targetNode.nodeType !== 3 && targetNode.contains(node.parentNode)) {\n      do {\n        formatCollection = this.isFormattedNode(docElement, formatCollection, node, formatNode, fontSize, fontName);\n        node = node.parentNode;\n      } while (node && node !== targetNode);\n    }\n\n    return formatCollection;\n  };\n\n  ToolbarStatus.isFormattedNode = function (docElement, formatCollection, node, formatNode, fontSize, fontName) {\n    if (!formatCollection.bold) {\n      formatCollection.bold = IsFormatted.isBold(node);\n    }\n\n    if (!formatCollection.italic) {\n      formatCollection.italic = IsFormatted.isItalic(node);\n    }\n\n    if (!formatCollection.underline) {\n      formatCollection.underline = IsFormatted.isUnderline(node);\n    }\n\n    if (!formatCollection.strikethrough) {\n      formatCollection.strikethrough = IsFormatted.isStrikethrough(node);\n    }\n\n    if (!formatCollection.superscript) {\n      formatCollection.superscript = IsFormatted.isSuperscript(node);\n    }\n\n    if (!formatCollection.subscript) {\n      formatCollection.subscript = IsFormatted.isSubscript(node);\n    }\n\n    if (!formatCollection.fontcolor) {\n      formatCollection.fontcolor = this.isFontColor(docElement, node);\n    }\n\n    if (!formatCollection.fontname) {\n      formatCollection.fontname = this.isFontName(docElement, node, fontName);\n    }\n\n    if (!formatCollection.fontsize) {\n      formatCollection.fontsize = this.isFontSize(node, fontSize);\n    }\n\n    if (!formatCollection.backgroundcolor) {\n      formatCollection.backgroundcolor = this.isBackgroundColor(node);\n    }\n\n    if (!formatCollection.orderedlist) {\n      formatCollection.orderedlist = this.isOrderedList(node);\n    }\n\n    if (!formatCollection.unorderedlist) {\n      formatCollection.unorderedlist = this.isUnorderedList(node);\n    }\n\n    if (!formatCollection.alignments) {\n      formatCollection.alignments = this.isAlignment(node);\n    }\n\n    if (!formatCollection.formats) {\n      formatCollection.formats = this.isFormats(node, formatNode);\n\n      if (formatCollection.formats === 'pre') {\n        formatCollection.insertcode = true;\n      }\n    }\n\n    if (!formatCollection.createlink) {\n      formatCollection.createlink = this.isLink(node);\n    }\n\n    if (!formatCollection.numberFormatList) {\n      formatCollection.numberFormatList = this.isNumberFormatList(node);\n    }\n\n    if (!formatCollection.bulletFormatList) {\n      formatCollection.bulletFormatList = this.isBulletFormatList(node);\n    }\n\n    return formatCollection;\n  };\n\n  ToolbarStatus.isFontColor = function (docElement, node) {\n    var color = node.style && node.style.color;\n\n    if ((color === null || color === undefined || color === '') && node.nodeType !== 3) {\n      color = this.getComputedStyle(docElement, node, 'color');\n    }\n\n    if (color !== null && color !== '' && color !== undefined) {\n      return color;\n    } else {\n      return null;\n    }\n  };\n\n  ToolbarStatus.isLink = function (node) {\n    if (node.nodeName.toLocaleLowerCase() === 'a') {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  ToolbarStatus.isBackgroundColor = function (node) {\n    var backColor = node.style && node.style.backgroundColor;\n\n    if (backColor !== null && backColor !== '' && backColor !== undefined) {\n      return backColor;\n    } else {\n      return null;\n    }\n  };\n\n  ToolbarStatus.isFontSize = function (node, fontSize) {\n    var size = node.style && node.style.fontSize;\n\n    if (size !== null && size !== '' && size !== undefined && (fontSize === null || fontSize === undefined || fontSize.indexOf(size) > -1)) {\n      return size;\n    } else {\n      return null;\n    }\n  };\n\n  ToolbarStatus.isFontName = function (docElement, node, fontName) {\n    var name = node.style && node.style.fontFamily;\n\n    if ((name === null || name === undefined || name === '') && node.nodeType !== 3) {\n      name = this.getComputedStyle(docElement, node, 'font-family');\n    }\n\n    var index = null;\n\n    if (name !== null && name !== '' && name !== undefined && (fontName === null || fontName === undefined || fontName.filter(function (value, pos) {\n      var pattern = new RegExp(name, 'i');\n\n      if (value.replace(/\"/g, '').replace(/ /g, '') === name.replace(/\"/g, '').replace(/ /g, '') || value.search(pattern) > -1) {\n        index = pos;\n      }\n    }) && index !== null)) {\n      return index !== null ? fontName[index] : name.replace(/\"/g, '');\n    } else {\n      return null;\n    }\n  };\n\n  ToolbarStatus.isOrderedList = function (node) {\n    if (node.nodeName.toLocaleLowerCase() === 'ol') {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  ToolbarStatus.isUnorderedList = function (node) {\n    if (node.nodeName.toLocaleLowerCase() === 'ul') {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  ToolbarStatus.isAlignment = function (node) {\n    var align = node.style && node.style.textAlign;\n\n    if (align === 'left') {\n      return 'justifyleft';\n    } else if (align === 'center') {\n      return 'justifycenter';\n    } else if (align === 'right') {\n      return 'justifyright';\n    } else if (align === 'justify') {\n      return 'justifyfull';\n    } else {\n      return null;\n    }\n  };\n\n  ToolbarStatus.isFormats = function (node, formatNode) {\n    if ((formatNode === undefined || formatNode === null) && CONSTANT.BLOCK_TAGS.indexOf(node.nodeName.toLocaleLowerCase()) > -1 || formatNode !== null && formatNode !== undefined && formatNode.indexOf(node.nodeName.toLocaleLowerCase()) > -1) {\n      return node.nodeName.toLocaleLowerCase();\n    } else {\n      return null;\n    }\n  };\n\n  ToolbarStatus.getComputedStyle = function (docElement, node, prop) {\n    return docElement.defaultView.getComputedStyle(node, null).getPropertyValue(prop);\n  };\n\n  ToolbarStatus.isNumberFormatList = function (node) {\n    var list = node.style && node.style.listStyleType;\n\n    if (list === 'lower-alpha') {\n      return 'Lower Alpha';\n    } else if (list === 'number') {\n      return 'Number';\n    } else if (list === 'upper-alpha') {\n      return 'Upper Alpha';\n    } else if (list === 'lower-roman') {\n      return 'Lower Roman';\n    } else if (list === 'upper-roman') {\n      return 'Upper Roman';\n    } else if (list === 'lower-greek') {\n      return 'Lower Greek';\n    } else if (list === 'none') {\n      return 'None';\n    } else {\n      return null;\n    }\n  };\n\n  ToolbarStatus.isBulletFormatList = function (node) {\n    var list = node.style && node.style.listStyleType;\n\n    if (list === 'circle') {\n      return 'Circle';\n    } else if (list === 'square') {\n      return 'Square';\n    } else if (list === 'none') {\n      return 'None';\n    } else if (list === 'disc') {\n      return 'Disc';\n    } else {\n      return null;\n    }\n  };\n\n  return ToolbarStatus;\n}();\n\nexport { ToolbarStatus };","map":{"version":3,"sources":["/Users/yasaman/Documents/moj_adminpanel/adminpanel/node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/toolbar-status.js"],"names":["IsFormatted","CONSTANT","NodeSelection","getDefaultHtmlTbStatus","statusCollection","ToolbarStatus","get","docElement","targetNode","formatNode","fontSize","fontName","documentNode","formatCollection","JSON","parse","stringify","nodeCollection","nodeSelection","nodes","getNodeCollection","getRange","nodesLength","length","isNodeChanged","range","index","nodeType","startContainer","parentNode","lastElementChild","nodeName","getImmediateBlockNode","textContent","replace","toString","firstChild","setCursorPoint","trim","splice","getFormatParent","bold","insertcode","italic","underline","strikethrough","superscript","subscript","fontcolor","fontname","fontsize","backgroundcolor","orderedlist","unorderedlist","alignments","formats","createlink","numberFormatList","bulletFormatList","node","BLOCK_TAGS","indexOf","toLocaleLowerCase","contains","isFormattedNode","isBold","isItalic","isUnderline","isStrikethrough","isSuperscript","isSubscript","isFontColor","isFontName","isFontSize","isBackgroundColor","isOrderedList","isUnorderedList","isAlignment","isFormats","isLink","isNumberFormatList","isBulletFormatList","color","style","undefined","getComputedStyle","backColor","backgroundColor","size","name","fontFamily","filter","value","pos","pattern","RegExp","search","align","textAlign","prop","defaultView","getPropertyValue","list","listStyleType"],"mappings":"AAAA,SAASA,WAAT,QAA4B,eAA5B;AACA,OAAO,KAAKC,QAAZ,MAA0B,oBAA1B;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,sBAAT,QAAuC,qBAAvC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,gBAAgB,GAAGD,sBAAsB,EAA7C;;AACP,IAAIE,aAAa;AAAG;AAAe,YAAY;AAC3C,WAASA,aAAT,GAAyB,CACxB;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEIA,EAAAA,aAAa,CAACC,GAAd,GAAoB,UAAUC,UAAV,EAAsBC,UAAtB,EAAkCC,UAAlC,EAA8CC,QAA9C,EAAwDC,QAAxD,EAAkEC,YAAlE,EAAgF;AAChG,QAAIC,gBAAgB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeZ,gBAAf,CAAX,CAAvB;AACA,QAAIa,cAAc,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeZ,gBAAf,CAAX,CAArB;AACA,QAAIc,aAAa,GAAG,IAAIhB,aAAJ,EAApB;AACA,QAAIiB,KAAK,GAAGP,YAAY,GAAG,CAACA,YAAD,CAAH,GAAoBM,aAAa,CAACE,iBAAd,CAAgCF,aAAa,CAACG,QAAd,CAAuBd,UAAvB,CAAhC,CAA5C;AACA,QAAIe,WAAW,GAAGH,KAAK,CAACI,MAAxB;AACA,QAAIC,aAAa,GAAG,KAApB;AACA,QAAIC,KAAK,GAAGP,aAAa,CAACG,QAAd,CAAuBd,UAAvB,CAAZ;;AACA,SAAK,IAAImB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGP,KAAK,CAACI,MAAlC,EAA0CG,KAAK,EAA/C,EAAmD;AAC/C,aAAOP,KAAK,CAACO,KAAD,CAAL,CAAaC,QAAb,KAA0B,CAA1B,IAA+BF,KAAK,CAACG,cAAN,CAAqBD,QAArB,KAAkC,CAAjE,IAAsER,KAAK,CAACO,KAAD,CAAL,CAAaG,UAAnF,IACHV,KAAK,CAACO,KAAD,CAAL,CAAaG,UAAb,CAAwBC,gBADrB,IACyCX,KAAK,CAACO,KAAD,CAAL,CAAaG,UAAb,CAAwBC,gBAAxB,CAAyCC,QAAzC,KAAsD,IAD/F,IAEF,KAAKC,qBAAL,CAA2Bb,KAAK,CAACO,KAAD,CAAL,CAAaG,UAAxC,CAAD,CAAsDI,WAAtD,CAAkEC,OAAlE,CAA0E,SAA1E,EAAqF,EAArF,EAAyFX,MAAzF,KAAoG,CAFjG,IAGHE,KAAK,CAACG,cAAN,CAAqBK,WAArB,CAAiCC,OAAjC,CAAyC,SAAzC,EAAoD,EAApD,EAAwDX,MAAxD,KAAmE,CAHhE,IAIHL,aAAa,CAACZ,GAAd,CAAkBC,UAAlB,EAA8B4B,QAA9B,GAAyCD,OAAzC,CAAiD,SAAjD,EAA4D,EAA5D,EAAgEX,MAAhE,KAA2E,CAJ/E,EAIkF;AAC9EJ,QAAAA,KAAK,CAACO,KAAD,CAAL,GAAeP,KAAK,CAACO,KAAD,CAAL,CAAaG,UAAb,CAAwBC,gBAAxB,CAAyCM,UAAxD;AACAZ,QAAAA,aAAa,GAAG,IAAhB;AACH;;AACD,UAAIA,aAAa,IAAIL,KAAK,CAACO,KAAD,CAA1B,EAAmC;AAC/BR,QAAAA,aAAa,CAACmB,cAAd,CAA6B9B,UAA7B,EAAyCY,KAAK,CAACO,KAAD,CAA9C,EAAuDP,KAAK,CAACO,KAAD,CAAL,CAAaO,WAAb,CAAyBV,MAAhF;AACAC,QAAAA,aAAa,GAAG,KAAhB;AACH;;AACD,UAAKL,KAAK,CAACO,KAAD,CAAL,CAAaK,QAAb,KAA0B,IAA1B,IAAkCZ,KAAK,CAACO,KAAD,CAAL,CAAaC,QAAb,KAA0B,CAA7D,IACCL,WAAW,GAAG,CAAd,IAAmBH,KAAK,CAACO,KAAD,CAAL,CAAaC,QAAb,KAA0B,CAA7C,IAAkDR,KAAK,CAACO,KAAD,CAAL,CAAaO,WAAb,CAAyBK,IAAzB,OAAoC,EAD3F,EACgG;AAC5FnB,QAAAA,KAAK,CAACoB,MAAN,CAAab,KAAb,EAAoB,CAApB;AACAA,QAAAA,KAAK;AACR;AACJ;;AACD,SAAK,IAAIA,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGP,KAAK,CAACI,MAAlC,EAA0CG,KAAK,EAA/C,EAAmD;AAC/Cb,MAAAA,gBAAgB,GAAG,KAAK2B,eAAL,CAAqBjC,UAArB,EAAiCM,gBAAjC,EAAmDM,KAAK,CAACO,KAAD,CAAxD,EAAiElB,UAAjE,EAA6EC,UAA7E,EAAyFC,QAAzF,EAAmGC,QAAnG,CAAnB;;AACA,UAAKe,KAAK,KAAK,CAAV,IAAeb,gBAAgB,CAAC4B,IAAjC,IAA0C,CAAC5B,gBAAgB,CAAC4B,IAAhE,EAAsE;AAClExB,QAAAA,cAAc,CAACwB,IAAf,GAAsB5B,gBAAgB,CAAC4B,IAAvC;AACH;;AACD,UAAKf,KAAK,KAAK,CAAV,IAAeb,gBAAgB,CAAC6B,UAAjC,IAAgD,CAAC7B,gBAAgB,CAAC6B,UAAtE,EAAkF;AAC9EzB,QAAAA,cAAc,CAACyB,UAAf,GAA4B7B,gBAAgB,CAAC6B,UAA7C;AACH;;AACD,UAAKhB,KAAK,KAAK,CAAV,IAAeb,gBAAgB,CAAC8B,MAAjC,IAA4C,CAAC9B,gBAAgB,CAAC8B,MAAlE,EAA0E;AACtE1B,QAAAA,cAAc,CAAC0B,MAAf,GAAwB9B,gBAAgB,CAAC8B,MAAzC;AACH;;AACD,UAAKjB,KAAK,KAAK,CAAV,IAAeb,gBAAgB,CAAC+B,SAAjC,IAA+C,CAAC/B,gBAAgB,CAAC+B,SAArE,EAAgF;AAC5E3B,QAAAA,cAAc,CAAC2B,SAAf,GAA2B/B,gBAAgB,CAAC+B,SAA5C;AACH;;AACD,UAAKlB,KAAK,KAAK,CAAV,IAAeb,gBAAgB,CAACgC,aAAjC,IAAmD,CAAChC,gBAAgB,CAACgC,aAAzE,EAAwF;AACpF5B,QAAAA,cAAc,CAAC4B,aAAf,GAA+BhC,gBAAgB,CAACgC,aAAhD;AACH;;AACD,UAAKnB,KAAK,KAAK,CAAV,IAAeb,gBAAgB,CAACiC,WAAjC,IAAiD,CAACjC,gBAAgB,CAACiC,WAAvE,EAAoF;AAChF7B,QAAAA,cAAc,CAAC6B,WAAf,GAA6BjC,gBAAgB,CAACiC,WAA9C;AACH;;AACD,UAAKpB,KAAK,KAAK,CAAV,IAAeb,gBAAgB,CAACkC,SAAjC,IAA+C,CAAClC,gBAAgB,CAACkC,SAArE,EAAgF;AAC5E9B,QAAAA,cAAc,CAAC8B,SAAf,GAA2BlC,gBAAgB,CAACkC,SAA5C;AACH;;AACD,UAAKrB,KAAK,KAAK,CAAV,IAAeb,gBAAgB,CAACmC,SAAjC,IAA+C,CAACnC,gBAAgB,CAACmC,SAArE,EAAgF;AAC5E/B,QAAAA,cAAc,CAAC+B,SAAf,GAA2BnC,gBAAgB,CAACmC,SAA5C;AACH;;AACD,UAAKtB,KAAK,KAAK,CAAV,IAAeb,gBAAgB,CAACoC,QAAjC,IAA8C,CAACpC,gBAAgB,CAACoC,QAApE,EAA8E;AAC1EhC,QAAAA,cAAc,CAACgC,QAAf,GAA0BpC,gBAAgB,CAACoC,QAA3C;AACH;;AACD,UAAKvB,KAAK,KAAK,CAAV,IAAeb,gBAAgB,CAACqC,QAAjC,IAA8C,CAACrC,gBAAgB,CAACqC,QAApE,EAA8E;AAC1EjC,QAAAA,cAAc,CAACiC,QAAf,GAA0BrC,gBAAgB,CAACqC,QAA3C;AACH;;AACD,UAAKxB,KAAK,KAAK,CAAV,IAAeb,gBAAgB,CAACsC,eAAjC,IAAqD,CAACtC,gBAAgB,CAACsC,eAA3E,EAA4F;AACxFlC,QAAAA,cAAc,CAACkC,eAAf,GAAiCtC,gBAAgB,CAACsC,eAAlD;AACH;;AACD,UAAKzB,KAAK,KAAK,CAAV,IAAeb,gBAAgB,CAACuC,WAAjC,IAAiD,CAACvC,gBAAgB,CAACuC,WAAvE,EAAoF;AAChFnC,QAAAA,cAAc,CAACmC,WAAf,GAA6BvC,gBAAgB,CAACuC,WAA9C;AACH;;AACD,UAAK1B,KAAK,KAAK,CAAV,IAAeb,gBAAgB,CAACwC,aAAjC,IAAmD,CAACxC,gBAAgB,CAACwC,aAAzE,EAAwF;AACpFpC,QAAAA,cAAc,CAACoC,aAAf,GAA+BxC,gBAAgB,CAACwC,aAAhD;AACH;;AACD,UAAK3B,KAAK,KAAK,CAAV,IAAeb,gBAAgB,CAACyC,UAAjC,IAAgD,CAACzC,gBAAgB,CAACyC,UAAtE,EAAkF;AAC9ErC,QAAAA,cAAc,CAACqC,UAAf,GAA4BzC,gBAAgB,CAACyC,UAA7C;AACH;;AACD,UAAK5B,KAAK,KAAK,CAAV,IAAeb,gBAAgB,CAAC0C,OAAjC,IAA6C,CAAC1C,gBAAgB,CAAC0C,OAAnE,EAA4E;AACxEtC,QAAAA,cAAc,CAACsC,OAAf,GAAyB1C,gBAAgB,CAAC0C,OAA1C;AACH;;AACD,UAAK7B,KAAK,KAAK,CAAV,IAAeb,gBAAgB,CAAC2C,UAAjC,IAAgD,CAAC3C,gBAAgB,CAAC2C,UAAtE,EAAkF;AAC9EvC,QAAAA,cAAc,CAACuC,UAAf,GAA4B3C,gBAAgB,CAAC2C,UAA7C;AACH;;AACD,UAAK9B,KAAK,KAAK,CAAV,IAAeb,gBAAgB,CAAC4C,gBAAjC,IAAsD,CAAC5C,gBAAgB,CAAC4C,gBAA5E,EAA8F;AAC1FxC,QAAAA,cAAc,CAACwC,gBAAf,GAAkC5C,gBAAgB,CAAC4C,gBAAnD;AACH;;AACD,UAAK/B,KAAK,KAAK,CAAV,IAAeb,gBAAgB,CAAC6C,gBAAjC,IAAsD,CAAC7C,gBAAgB,CAAC6C,gBAA5E,EAA8F;AAC1FzC,QAAAA,cAAc,CAACyC,gBAAf,GAAkC7C,gBAAgB,CAAC6C,gBAAnD;AACH;;AACD7C,MAAAA,gBAAgB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeZ,gBAAf,CAAX,CAAnB;AACH;;AACD,WAAOa,cAAP;AACH,GAtFD;;AAuFAZ,EAAAA,aAAa,CAAC2B,qBAAd,GAAsC,UAAU2B,IAAV,EAAgB;AAClD,OAAG;AACCA,MAAAA,IAAI,GAAGA,IAAI,CAAC9B,UAAZ;AACH,KAFD,QAES8B,IAAI,IAAI1D,QAAQ,CAAC2D,UAAT,CAAoBC,OAApB,CAA4BF,IAAI,CAAC5B,QAAL,CAAc+B,iBAAd,EAA5B,IAAiE,CAFlF;;AAGA,WAAOH,IAAP;AACH,GALD;;AAMAtD,EAAAA,aAAa,CAACmC,eAAd,GAAgC,UAAUjC,UAAV,EAAsBM,gBAAtB,EAAwC8C,IAAxC,EAA8CnD,UAA9C,EAA0DC,UAA1D,EAAsEC,QAAtE,EAAgFC,QAAhF,EAA0F;AACtH,QAAIH,UAAU,CAACuD,QAAX,CAAoBJ,IAApB,KACCA,IAAI,CAAChC,QAAL,KAAkB,CAAlB,IAAuBnB,UAAU,CAACmB,QAAX,KAAwB,CAA/C,IAAoDnB,UAAU,CAACuD,QAAX,CAAoBJ,IAAI,CAAC9B,UAAzB,CADzD,EACgG;AAC5F,SAAG;AACChB,QAAAA,gBAAgB,GAAG,KAAKmD,eAAL,CAAqBzD,UAArB,EAAiCM,gBAAjC,EAAmD8C,IAAnD,EAAyDlD,UAAzD,EAAqEC,QAArE,EAA+EC,QAA/E,CAAnB;AACAgD,QAAAA,IAAI,GAAGA,IAAI,CAAC9B,UAAZ;AACH,OAHD,QAGS8B,IAAI,IAAKA,IAAI,KAAKnD,UAH3B;AAIH;;AACD,WAAOK,gBAAP;AACH,GATD;;AAUAR,EAAAA,aAAa,CAAC2D,eAAd,GAAgC,UAAUzD,UAAV,EAAsBM,gBAAtB,EAAwC8C,IAAxC,EAA8ClD,UAA9C,EAA0DC,QAA1D,EAAoEC,QAApE,EAA8E;AAC1G,QAAI,CAACE,gBAAgB,CAAC4B,IAAtB,EAA4B;AACxB5B,MAAAA,gBAAgB,CAAC4B,IAAjB,GAAwBzC,WAAW,CAACiE,MAAZ,CAAmBN,IAAnB,CAAxB;AACH;;AACD,QAAI,CAAC9C,gBAAgB,CAAC8B,MAAtB,EAA8B;AAC1B9B,MAAAA,gBAAgB,CAAC8B,MAAjB,GAA0B3C,WAAW,CAACkE,QAAZ,CAAqBP,IAArB,CAA1B;AACH;;AACD,QAAI,CAAC9C,gBAAgB,CAAC+B,SAAtB,EAAiC;AAC7B/B,MAAAA,gBAAgB,CAAC+B,SAAjB,GAA6B5C,WAAW,CAACmE,WAAZ,CAAwBR,IAAxB,CAA7B;AACH;;AACD,QAAI,CAAC9C,gBAAgB,CAACgC,aAAtB,EAAqC;AACjChC,MAAAA,gBAAgB,CAACgC,aAAjB,GAAiC7C,WAAW,CAACoE,eAAZ,CAA4BT,IAA5B,CAAjC;AACH;;AACD,QAAI,CAAC9C,gBAAgB,CAACiC,WAAtB,EAAmC;AAC/BjC,MAAAA,gBAAgB,CAACiC,WAAjB,GAA+B9C,WAAW,CAACqE,aAAZ,CAA0BV,IAA1B,CAA/B;AACH;;AACD,QAAI,CAAC9C,gBAAgB,CAACkC,SAAtB,EAAiC;AAC7BlC,MAAAA,gBAAgB,CAACkC,SAAjB,GAA6B/C,WAAW,CAACsE,WAAZ,CAAwBX,IAAxB,CAA7B;AACH;;AACD,QAAI,CAAC9C,gBAAgB,CAACmC,SAAtB,EAAiC;AAC7BnC,MAAAA,gBAAgB,CAACmC,SAAjB,GAA6B,KAAKuB,WAAL,CAAiBhE,UAAjB,EAA6BoD,IAA7B,CAA7B;AACH;;AACD,QAAI,CAAC9C,gBAAgB,CAACoC,QAAtB,EAAgC;AAC5BpC,MAAAA,gBAAgB,CAACoC,QAAjB,GAA4B,KAAKuB,UAAL,CAAgBjE,UAAhB,EAA4BoD,IAA5B,EAAkChD,QAAlC,CAA5B;AACH;;AACD,QAAI,CAACE,gBAAgB,CAACqC,QAAtB,EAAgC;AAC5BrC,MAAAA,gBAAgB,CAACqC,QAAjB,GAA4B,KAAKuB,UAAL,CAAgBd,IAAhB,EAAsBjD,QAAtB,CAA5B;AACH;;AACD,QAAI,CAACG,gBAAgB,CAACsC,eAAtB,EAAuC;AACnCtC,MAAAA,gBAAgB,CAACsC,eAAjB,GAAmC,KAAKuB,iBAAL,CAAuBf,IAAvB,CAAnC;AACH;;AACD,QAAI,CAAC9C,gBAAgB,CAACuC,WAAtB,EAAmC;AAC/BvC,MAAAA,gBAAgB,CAACuC,WAAjB,GAA+B,KAAKuB,aAAL,CAAmBhB,IAAnB,CAA/B;AACH;;AACD,QAAI,CAAC9C,gBAAgB,CAACwC,aAAtB,EAAqC;AACjCxC,MAAAA,gBAAgB,CAACwC,aAAjB,GAAiC,KAAKuB,eAAL,CAAqBjB,IAArB,CAAjC;AACH;;AACD,QAAI,CAAC9C,gBAAgB,CAACyC,UAAtB,EAAkC;AAC9BzC,MAAAA,gBAAgB,CAACyC,UAAjB,GAA8B,KAAKuB,WAAL,CAAiBlB,IAAjB,CAA9B;AACH;;AACD,QAAI,CAAC9C,gBAAgB,CAAC0C,OAAtB,EAA+B;AAC3B1C,MAAAA,gBAAgB,CAAC0C,OAAjB,GAA2B,KAAKuB,SAAL,CAAenB,IAAf,EAAqBlD,UAArB,CAA3B;;AACA,UAAII,gBAAgB,CAAC0C,OAAjB,KAA6B,KAAjC,EAAwC;AACpC1C,QAAAA,gBAAgB,CAAC6B,UAAjB,GAA8B,IAA9B;AACH;AACJ;;AACD,QAAI,CAAC7B,gBAAgB,CAAC2C,UAAtB,EAAkC;AAC9B3C,MAAAA,gBAAgB,CAAC2C,UAAjB,GAA8B,KAAKuB,MAAL,CAAYpB,IAAZ,CAA9B;AACH;;AACD,QAAI,CAAC9C,gBAAgB,CAAC4C,gBAAtB,EAAwC;AACpC5C,MAAAA,gBAAgB,CAAC4C,gBAAjB,GAAoC,KAAKuB,kBAAL,CAAwBrB,IAAxB,CAApC;AACH;;AACD,QAAI,CAAC9C,gBAAgB,CAAC6C,gBAAtB,EAAwC;AACpC7C,MAAAA,gBAAgB,CAAC6C,gBAAjB,GAAoC,KAAKuB,kBAAL,CAAwBtB,IAAxB,CAApC;AACH;;AACD,WAAO9C,gBAAP;AACH,GAxDD;;AAyDAR,EAAAA,aAAa,CAACkE,WAAd,GAA4B,UAAUhE,UAAV,EAAsBoD,IAAtB,EAA4B;AACpD,QAAIuB,KAAK,GAAGvB,IAAI,CAACwB,KAAL,IAAcxB,IAAI,CAACwB,KAAL,CAAWD,KAArC;;AACA,QAAI,CAACA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKE,SAA5B,IAAyCF,KAAK,KAAK,EAApD,KAA2DvB,IAAI,CAAChC,QAAL,KAAkB,CAAjF,EAAoF;AAChFuD,MAAAA,KAAK,GAAG,KAAKG,gBAAL,CAAsB9E,UAAtB,EAAkCoD,IAAlC,EAAwC,OAAxC,CAAR;AACH;;AACD,QAAIuB,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,EAA5B,IAAkCA,KAAK,KAAKE,SAAhD,EAA2D;AACvD,aAAOF,KAAP;AACH,KAFD,MAGK;AACD,aAAO,IAAP;AACH;AACJ,GAXD;;AAYA7E,EAAAA,aAAa,CAAC0E,MAAd,GAAuB,UAAUpB,IAAV,EAAgB;AACnC,QAAIA,IAAI,CAAC5B,QAAL,CAAc+B,iBAAd,OAAsC,GAA1C,EAA+C;AAC3C,aAAO,IAAP;AACH,KAFD,MAGK;AACD,aAAO,KAAP;AACH;AACJ,GAPD;;AAQAzD,EAAAA,aAAa,CAACqE,iBAAd,GAAkC,UAAUf,IAAV,EAAgB;AAC9C,QAAI2B,SAAS,GAAG3B,IAAI,CAACwB,KAAL,IAAcxB,IAAI,CAACwB,KAAL,CAAWI,eAAzC;;AACA,QAAID,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,EAApC,IAA0CA,SAAS,KAAKF,SAA5D,EAAuE;AACnE,aAAOE,SAAP;AACH,KAFD,MAGK;AACD,aAAO,IAAP;AACH;AACJ,GARD;;AASAjF,EAAAA,aAAa,CAACoE,UAAd,GAA2B,UAAUd,IAAV,EAAgBjD,QAAhB,EAA0B;AACjD,QAAI8E,IAAI,GAAG7B,IAAI,CAACwB,KAAL,IAAcxB,IAAI,CAACwB,KAAL,CAAWzE,QAApC;;AACA,QAAK8E,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,EAA1B,IAAgCA,IAAI,KAAKJ,SAA1C,KACI1E,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK0E,SAAlC,IAAgD1E,QAAQ,CAACmD,OAAT,CAAiB2B,IAAjB,IAAyB,CAAC,CAD9E,CAAJ,EACuF;AACnF,aAAOA,IAAP;AACH,KAHD,MAIK;AACD,aAAO,IAAP;AACH;AACJ,GATD;;AAUAnF,EAAAA,aAAa,CAACmE,UAAd,GAA2B,UAAUjE,UAAV,EAAsBoD,IAAtB,EAA4BhD,QAA5B,EAAsC;AAC7D,QAAI8E,IAAI,GAAG9B,IAAI,CAACwB,KAAL,IAAcxB,IAAI,CAACwB,KAAL,CAAWO,UAApC;;AACA,QAAI,CAACD,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAKL,SAA1B,IAAuCK,IAAI,KAAK,EAAjD,KAAwD9B,IAAI,CAAChC,QAAL,KAAkB,CAA9E,EAAiF;AAC7E8D,MAAAA,IAAI,GAAG,KAAKJ,gBAAL,CAAsB9E,UAAtB,EAAkCoD,IAAlC,EAAwC,aAAxC,CAAP;AACH;;AACD,QAAIjC,KAAK,GAAG,IAAZ;;AACA,QAAK+D,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,EAA1B,IAAgCA,IAAI,KAAKL,SAA1C,KACIzE,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAKyE,SAAlC,IAAgDzE,QAAQ,CAACgF,MAAT,CAAgB,UAAUC,KAAV,EAAiBC,GAAjB,EAAsB;AACtF,UAAIC,OAAO,GAAG,IAAIC,MAAJ,CAAWN,IAAX,EAAiB,GAAjB,CAAd;;AACA,UAAKG,KAAK,CAAC1D,OAAN,CAAc,IAAd,EAAoB,EAApB,EAAwBA,OAAxB,CAAgC,IAAhC,EAAsC,EAAtC,MAA8CuD,IAAI,CAACvD,OAAL,CAAa,IAAb,EAAmB,EAAnB,EAAuBA,OAAvB,CAA+B,IAA/B,EAAqC,EAArC,CAA/C,IACC0D,KAAK,CAACI,MAAN,CAAaF,OAAb,IAAwB,CAAC,CAD9B,EACkC;AAC9BpE,QAAAA,KAAK,GAAGmE,GAAR;AACH;AACJ,KANmD,KAM7CnE,KAAK,KAAK,IAPjB,CAAJ,EAO8B;AAC1B,aAAQA,KAAK,KAAK,IAAX,GAAmBf,QAAQ,CAACe,KAAD,CAA3B,GAAqC+D,IAAI,CAACvD,OAAL,CAAa,IAAb,EAAmB,EAAnB,CAA5C;AACH,KATD,MAUK;AACD,aAAO,IAAP;AACH;AACJ,GAnBD;;AAoBA7B,EAAAA,aAAa,CAACsE,aAAd,GAA8B,UAAUhB,IAAV,EAAgB;AAC1C,QAAIA,IAAI,CAAC5B,QAAL,CAAc+B,iBAAd,OAAsC,IAA1C,EAAgD;AAC5C,aAAO,IAAP;AACH,KAFD,MAGK;AACD,aAAO,KAAP;AACH;AACJ,GAPD;;AAQAzD,EAAAA,aAAa,CAACuE,eAAd,GAAgC,UAAUjB,IAAV,EAAgB;AAC5C,QAAIA,IAAI,CAAC5B,QAAL,CAAc+B,iBAAd,OAAsC,IAA1C,EAAgD;AAC5C,aAAO,IAAP;AACH,KAFD,MAGK;AACD,aAAO,KAAP;AACH;AACJ,GAPD;;AAQAzD,EAAAA,aAAa,CAACwE,WAAd,GAA4B,UAAUlB,IAAV,EAAgB;AACxC,QAAIsC,KAAK,GAAGtC,IAAI,CAACwB,KAAL,IAAcxB,IAAI,CAACwB,KAAL,CAAWe,SAArC;;AACA,QAAID,KAAK,KAAK,MAAd,EAAsB;AAClB,aAAO,aAAP;AACH,KAFD,MAGK,IAAIA,KAAK,KAAK,QAAd,EAAwB;AACzB,aAAO,eAAP;AACH,KAFI,MAGA,IAAIA,KAAK,KAAK,OAAd,EAAuB;AACxB,aAAO,cAAP;AACH,KAFI,MAGA,IAAIA,KAAK,KAAK,SAAd,EAAyB;AAC1B,aAAO,aAAP;AACH,KAFI,MAGA;AACD,aAAO,IAAP;AACH;AACJ,GAjBD;;AAkBA5F,EAAAA,aAAa,CAACyE,SAAd,GAA0B,UAAUnB,IAAV,EAAgBlD,UAAhB,EAA4B;AAClD,QAAK,CAACA,UAAU,KAAK2E,SAAf,IAA4B3E,UAAU,KAAK,IAA5C,KACER,QAAQ,CAAC2D,UAAT,CAAoBC,OAApB,CAA4BF,IAAI,CAAC5B,QAAL,CAAc+B,iBAAd,EAA5B,IAAiE,CAAC,CADrE,IAEIrD,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK2E,SAAtC,IACG3E,UAAU,CAACoD,OAAX,CAAmBF,IAAI,CAAC5B,QAAL,CAAc+B,iBAAd,EAAnB,IAAwD,CAAC,CAHpE,EAGwE;AACpE,aAAOH,IAAI,CAAC5B,QAAL,CAAc+B,iBAAd,EAAP;AACH,KALD,MAMK;AACD,aAAO,IAAP;AACH;AACJ,GAVD;;AAWAzD,EAAAA,aAAa,CAACgF,gBAAd,GAAiC,UAAU9E,UAAV,EAAsBoD,IAAtB,EAA4BwC,IAA5B,EAAkC;AAC/D,WAAO5F,UAAU,CAAC6F,WAAX,CAAuBf,gBAAvB,CAAwC1B,IAAxC,EAA8C,IAA9C,EAAoD0C,gBAApD,CAAqEF,IAArE,CAAP;AACH,GAFD;;AAGA9F,EAAAA,aAAa,CAAC2E,kBAAd,GAAmC,UAAUrB,IAAV,EAAgB;AAC/C,QAAI2C,IAAI,GAAG3C,IAAI,CAACwB,KAAL,IAAcxB,IAAI,CAACwB,KAAL,CAAWoB,aAApC;;AACA,QAAID,IAAI,KAAK,aAAb,EAA4B;AACxB,aAAO,aAAP;AACH,KAFD,MAGK,IAAIA,IAAI,KAAK,QAAb,EAAuB;AACxB,aAAO,QAAP;AACH,KAFI,MAGA,IAAIA,IAAI,KAAK,aAAb,EAA4B;AAC7B,aAAO,aAAP;AACH,KAFI,MAGA,IAAIA,IAAI,KAAK,aAAb,EAA4B;AAC7B,aAAO,aAAP;AACH,KAFI,MAGA,IAAIA,IAAI,KAAK,aAAb,EAA4B;AAC7B,aAAO,aAAP;AACH,KAFI,MAGA,IAAIA,IAAI,KAAK,aAAb,EAA4B;AAC7B,aAAO,aAAP;AACH,KAFI,MAGA,IAAIA,IAAI,KAAK,MAAb,EAAqB;AACtB,aAAO,MAAP;AACH,KAFI,MAGA;AACD,aAAO,IAAP;AACH;AACJ,GA1BD;;AA2BAjG,EAAAA,aAAa,CAAC4E,kBAAd,GAAmC,UAAUtB,IAAV,EAAgB;AAC/C,QAAI2C,IAAI,GAAG3C,IAAI,CAACwB,KAAL,IAAcxB,IAAI,CAACwB,KAAL,CAAWoB,aAApC;;AACA,QAAID,IAAI,KAAK,QAAb,EAAuB;AACnB,aAAO,QAAP;AACH,KAFD,MAGK,IAAIA,IAAI,KAAK,QAAb,EAAuB;AACxB,aAAO,QAAP;AACH,KAFI,MAGA,IAAIA,IAAI,KAAK,MAAb,EAAqB;AACtB,aAAO,MAAP;AACH,KAFI,MAGA,IAAIA,IAAI,KAAK,MAAb,EAAqB;AACtB,aAAO,MAAP;AACH,KAFI,MAGA;AACD,aAAO,IAAP;AACH;AACJ,GAjBD;;AAkBA,SAAOjG,aAAP;AACH,CAzUkC,EAAnC;;AA0UA,SAASA,aAAT","sourcesContent":["import { IsFormatted } from './isformatted';\nimport * as CONSTANT from './../base/constant';\nimport { NodeSelection } from './../../selection/index';\nimport { getDefaultHtmlTbStatus } from './../../common/util';\n/**\n * Update Toolbar Status\n *\n * @hidden\n\n */\nexport var statusCollection = getDefaultHtmlTbStatus();\nvar ToolbarStatus = /** @class */ (function () {\n    function ToolbarStatus() {\n    }\n    /**\n     * get method\n     *\n     * @param {Document} docElement - specifies the document element\n     * @param {Node} targetNode - specifies the target node\n     * @param {string[]} formatNode - specifies the format node\n     * @param {string[]} fontSize - specifies the font size\n     * @param {string[]} fontName - specifies the font name.\n     * @param {Node} documentNode - specifies the document node.\n     * @returns {IToolbarStatus} - returns the toolbar status\n     * @hidden\n\n     */\n    ToolbarStatus.get = function (docElement, targetNode, formatNode, fontSize, fontName, documentNode) {\n        var formatCollection = JSON.parse(JSON.stringify(statusCollection));\n        var nodeCollection = JSON.parse(JSON.stringify(statusCollection));\n        var nodeSelection = new NodeSelection();\n        var nodes = documentNode ? [documentNode] : nodeSelection.getNodeCollection(nodeSelection.getRange(docElement));\n        var nodesLength = nodes.length;\n        var isNodeChanged = false;\n        var range = nodeSelection.getRange(docElement);\n        for (var index = 0; index < nodes.length; index++) {\n            while (nodes[index].nodeType === 3 && range.startContainer.nodeType === 3 && nodes[index].parentNode &&\n                nodes[index].parentNode.lastElementChild && nodes[index].parentNode.lastElementChild.nodeName !== 'BR' &&\n                (this.getImmediateBlockNode(nodes[index].parentNode)).textContent.replace(/\\u200B/g, '').length === 0 &&\n                range.startContainer.textContent.replace(/\\u200B/g, '').length === 0 &&\n                nodeSelection.get(docElement).toString().replace(/\\u200B/g, '').length === 0) {\n                nodes[index] = nodes[index].parentNode.lastElementChild.firstChild;\n                isNodeChanged = true;\n            }\n            if (isNodeChanged && nodes[index]) {\n                nodeSelection.setCursorPoint(docElement, nodes[index], nodes[index].textContent.length);\n                isNodeChanged = false;\n            }\n            if ((nodes[index].nodeName !== 'BR' && nodes[index].nodeType !== 3) ||\n                (nodesLength > 1 && nodes[index].nodeType === 3 && nodes[index].textContent.trim() === '')) {\n                nodes.splice(index, 1);\n                index--;\n            }\n        }\n        for (var index = 0; index < nodes.length; index++) {\n            formatCollection = this.getFormatParent(docElement, formatCollection, nodes[index], targetNode, formatNode, fontSize, fontName);\n            if ((index === 0 && formatCollection.bold) || !formatCollection.bold) {\n                nodeCollection.bold = formatCollection.bold;\n            }\n            if ((index === 0 && formatCollection.insertcode) || !formatCollection.insertcode) {\n                nodeCollection.insertcode = formatCollection.insertcode;\n            }\n            if ((index === 0 && formatCollection.italic) || !formatCollection.italic) {\n                nodeCollection.italic = formatCollection.italic;\n            }\n            if ((index === 0 && formatCollection.underline) || !formatCollection.underline) {\n                nodeCollection.underline = formatCollection.underline;\n            }\n            if ((index === 0 && formatCollection.strikethrough) || !formatCollection.strikethrough) {\n                nodeCollection.strikethrough = formatCollection.strikethrough;\n            }\n            if ((index === 0 && formatCollection.superscript) || !formatCollection.superscript) {\n                nodeCollection.superscript = formatCollection.superscript;\n            }\n            if ((index === 0 && formatCollection.subscript) || !formatCollection.subscript) {\n                nodeCollection.subscript = formatCollection.subscript;\n            }\n            if ((index === 0 && formatCollection.fontcolor) || !formatCollection.fontcolor) {\n                nodeCollection.fontcolor = formatCollection.fontcolor;\n            }\n            if ((index === 0 && formatCollection.fontname) || !formatCollection.fontname) {\n                nodeCollection.fontname = formatCollection.fontname;\n            }\n            if ((index === 0 && formatCollection.fontsize) || !formatCollection.fontsize) {\n                nodeCollection.fontsize = formatCollection.fontsize;\n            }\n            if ((index === 0 && formatCollection.backgroundcolor) || !formatCollection.backgroundcolor) {\n                nodeCollection.backgroundcolor = formatCollection.backgroundcolor;\n            }\n            if ((index === 0 && formatCollection.orderedlist) || !formatCollection.orderedlist) {\n                nodeCollection.orderedlist = formatCollection.orderedlist;\n            }\n            if ((index === 0 && formatCollection.unorderedlist) || !formatCollection.unorderedlist) {\n                nodeCollection.unorderedlist = formatCollection.unorderedlist;\n            }\n            if ((index === 0 && formatCollection.alignments) || !formatCollection.alignments) {\n                nodeCollection.alignments = formatCollection.alignments;\n            }\n            if ((index === 0 && formatCollection.formats) || !formatCollection.formats) {\n                nodeCollection.formats = formatCollection.formats;\n            }\n            if ((index === 0 && formatCollection.createlink) || !formatCollection.createlink) {\n                nodeCollection.createlink = formatCollection.createlink;\n            }\n            if ((index === 0 && formatCollection.numberFormatList) || !formatCollection.numberFormatList) {\n                nodeCollection.numberFormatList = formatCollection.numberFormatList;\n            }\n            if ((index === 0 && formatCollection.bulletFormatList) || !formatCollection.bulletFormatList) {\n                nodeCollection.bulletFormatList = formatCollection.bulletFormatList;\n            }\n            formatCollection = JSON.parse(JSON.stringify(statusCollection));\n        }\n        return nodeCollection;\n    };\n    ToolbarStatus.getImmediateBlockNode = function (node) {\n        do {\n            node = node.parentNode;\n        } while (node && CONSTANT.BLOCK_TAGS.indexOf(node.nodeName.toLocaleLowerCase()) < 0);\n        return node;\n    };\n    ToolbarStatus.getFormatParent = function (docElement, formatCollection, node, targetNode, formatNode, fontSize, fontName) {\n        if (targetNode.contains(node) ||\n            (node.nodeType === 3 && targetNode.nodeType !== 3 && targetNode.contains(node.parentNode))) {\n            do {\n                formatCollection = this.isFormattedNode(docElement, formatCollection, node, formatNode, fontSize, fontName);\n                node = node.parentNode;\n            } while (node && (node !== targetNode));\n        }\n        return formatCollection;\n    };\n    ToolbarStatus.isFormattedNode = function (docElement, formatCollection, node, formatNode, fontSize, fontName) {\n        if (!formatCollection.bold) {\n            formatCollection.bold = IsFormatted.isBold(node);\n        }\n        if (!formatCollection.italic) {\n            formatCollection.italic = IsFormatted.isItalic(node);\n        }\n        if (!formatCollection.underline) {\n            formatCollection.underline = IsFormatted.isUnderline(node);\n        }\n        if (!formatCollection.strikethrough) {\n            formatCollection.strikethrough = IsFormatted.isStrikethrough(node);\n        }\n        if (!formatCollection.superscript) {\n            formatCollection.superscript = IsFormatted.isSuperscript(node);\n        }\n        if (!formatCollection.subscript) {\n            formatCollection.subscript = IsFormatted.isSubscript(node);\n        }\n        if (!formatCollection.fontcolor) {\n            formatCollection.fontcolor = this.isFontColor(docElement, node);\n        }\n        if (!formatCollection.fontname) {\n            formatCollection.fontname = this.isFontName(docElement, node, fontName);\n        }\n        if (!formatCollection.fontsize) {\n            formatCollection.fontsize = this.isFontSize(node, fontSize);\n        }\n        if (!formatCollection.backgroundcolor) {\n            formatCollection.backgroundcolor = this.isBackgroundColor(node);\n        }\n        if (!formatCollection.orderedlist) {\n            formatCollection.orderedlist = this.isOrderedList(node);\n        }\n        if (!formatCollection.unorderedlist) {\n            formatCollection.unorderedlist = this.isUnorderedList(node);\n        }\n        if (!formatCollection.alignments) {\n            formatCollection.alignments = this.isAlignment(node);\n        }\n        if (!formatCollection.formats) {\n            formatCollection.formats = this.isFormats(node, formatNode);\n            if (formatCollection.formats === 'pre') {\n                formatCollection.insertcode = true;\n            }\n        }\n        if (!formatCollection.createlink) {\n            formatCollection.createlink = this.isLink(node);\n        }\n        if (!formatCollection.numberFormatList) {\n            formatCollection.numberFormatList = this.isNumberFormatList(node);\n        }\n        if (!formatCollection.bulletFormatList) {\n            formatCollection.bulletFormatList = this.isBulletFormatList(node);\n        }\n        return formatCollection;\n    };\n    ToolbarStatus.isFontColor = function (docElement, node) {\n        var color = node.style && node.style.color;\n        if ((color === null || color === undefined || color === '') && node.nodeType !== 3) {\n            color = this.getComputedStyle(docElement, node, 'color');\n        }\n        if (color !== null && color !== '' && color !== undefined) {\n            return color;\n        }\n        else {\n            return null;\n        }\n    };\n    ToolbarStatus.isLink = function (node) {\n        if (node.nodeName.toLocaleLowerCase() === 'a') {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    ToolbarStatus.isBackgroundColor = function (node) {\n        var backColor = node.style && node.style.backgroundColor;\n        if (backColor !== null && backColor !== '' && backColor !== undefined) {\n            return backColor;\n        }\n        else {\n            return null;\n        }\n    };\n    ToolbarStatus.isFontSize = function (node, fontSize) {\n        var size = node.style && node.style.fontSize;\n        if ((size !== null && size !== '' && size !== undefined)\n            && (fontSize === null || fontSize === undefined || (fontSize.indexOf(size) > -1))) {\n            return size;\n        }\n        else {\n            return null;\n        }\n    };\n    ToolbarStatus.isFontName = function (docElement, node, fontName) {\n        var name = node.style && node.style.fontFamily;\n        if ((name === null || name === undefined || name === '') && node.nodeType !== 3) {\n            name = this.getComputedStyle(docElement, node, 'font-family');\n        }\n        var index = null;\n        if ((name !== null && name !== '' && name !== undefined)\n            && (fontName === null || fontName === undefined || (fontName.filter(function (value, pos) {\n                var pattern = new RegExp(name, 'i');\n                if ((value.replace(/\"/g, '').replace(/ /g, '') === name.replace(/\"/g, '').replace(/ /g, '')) ||\n                    (value.search(pattern) > -1)) {\n                    index = pos;\n                }\n            }) && (index !== null)))) {\n            return (index !== null) ? fontName[index] : name.replace(/\"/g, '');\n        }\n        else {\n            return null;\n        }\n    };\n    ToolbarStatus.isOrderedList = function (node) {\n        if (node.nodeName.toLocaleLowerCase() === 'ol') {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    ToolbarStatus.isUnorderedList = function (node) {\n        if (node.nodeName.toLocaleLowerCase() === 'ul') {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    ToolbarStatus.isAlignment = function (node) {\n        var align = node.style && node.style.textAlign;\n        if (align === 'left') {\n            return 'justifyleft';\n        }\n        else if (align === 'center') {\n            return 'justifycenter';\n        }\n        else if (align === 'right') {\n            return 'justifyright';\n        }\n        else if (align === 'justify') {\n            return 'justifyfull';\n        }\n        else {\n            return null;\n        }\n    };\n    ToolbarStatus.isFormats = function (node, formatNode) {\n        if (((formatNode === undefined || formatNode === null)\n            && CONSTANT.BLOCK_TAGS.indexOf(node.nodeName.toLocaleLowerCase()) > -1)\n            || (formatNode !== null && formatNode !== undefined\n                && formatNode.indexOf(node.nodeName.toLocaleLowerCase()) > -1)) {\n            return node.nodeName.toLocaleLowerCase();\n        }\n        else {\n            return null;\n        }\n    };\n    ToolbarStatus.getComputedStyle = function (docElement, node, prop) {\n        return docElement.defaultView.getComputedStyle(node, null).getPropertyValue(prop);\n    };\n    ToolbarStatus.isNumberFormatList = function (node) {\n        var list = node.style && node.style.listStyleType;\n        if (list === 'lower-alpha') {\n            return 'Lower Alpha';\n        }\n        else if (list === 'number') {\n            return 'Number';\n        }\n        else if (list === 'upper-alpha') {\n            return 'Upper Alpha';\n        }\n        else if (list === 'lower-roman') {\n            return 'Lower Roman';\n        }\n        else if (list === 'upper-roman') {\n            return 'Upper Roman';\n        }\n        else if (list === 'lower-greek') {\n            return 'Lower Greek';\n        }\n        else if (list === 'none') {\n            return 'None';\n        }\n        else {\n            return null;\n        }\n    };\n    ToolbarStatus.isBulletFormatList = function (node) {\n        var list = node.style && node.style.listStyleType;\n        if (list === 'circle') {\n            return 'Circle';\n        }\n        else if (list === 'square') {\n            return 'Square';\n        }\n        else if (list === 'none') {\n            return 'None';\n        }\n        else if (list === 'disc') {\n            return 'Disc';\n        }\n        else {\n            return null;\n        }\n    };\n    return ToolbarStatus;\n}());\nexport { ToolbarStatus };\n"]},"metadata":{},"sourceType":"module"}