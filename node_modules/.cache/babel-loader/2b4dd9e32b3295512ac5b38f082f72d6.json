{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module autoformat/autoformat\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Delete } from 'ckeditor5/src/typing';\nimport blockAutoformatEditing from './blockautoformatediting';\nimport inlineAutoformatEditing from './inlineautoformatediting';\n/**\n * Enables a set of predefined autoformatting actions.\n *\n * For a detailed overview, check the {@glink features/autoformat Autoformatting feature documentation}\n * and the {@glink api/autoformat package page}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Autoformat extends Plugin {\n  /**\n   * @inheritdoc\n   */\n  static get requires() {\n    return [Delete];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'Autoformat';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  afterInit() {\n    this._addListAutoformats();\n\n    this._addBasicStylesAutoformats();\n\n    this._addHeadingAutoformats();\n\n    this._addBlockQuoteAutoformats();\n\n    this._addCodeBlockAutoformats();\n\n    this._addHorizontalLineAutoformats();\n  }\n  /**\n   * Adds autoformatting related to the {@link module:list/list~List}.\n   *\n   * When typed:\n   * - `* ` or `- ` &ndash; A paragraph will be changed to a bulleted list.\n   * - `1. ` or `1) ` &ndash; A paragraph will be changed to a numbered list (\"1\" can be any digit or a list of digits).\n   * - `[] ` or `[ ] ` &ndash; A paragraph will be changed to a to-do list.\n   * - `[x] ` or `[ x ] ` &ndash; A paragraph will be changed to a checked to-do list.\n   *\n   * @private\n   */\n\n\n  _addListAutoformats() {\n    const commands = this.editor.commands;\n\n    if (commands.get('bulletedList')) {\n      blockAutoformatEditing(this.editor, this, /^[*-]\\s$/, 'bulletedList');\n    }\n\n    if (commands.get('numberedList')) {\n      blockAutoformatEditing(this.editor, this, /^1[.|)]\\s$/, 'numberedList');\n    }\n\n    if (commands.get('todoList')) {\n      blockAutoformatEditing(this.editor, this, /^\\[\\s?\\]\\s$/, 'todoList');\n    }\n\n    if (commands.get('checkTodoList')) {\n      blockAutoformatEditing(this.editor, this, /^\\[\\s?x\\s?\\]\\s$/, () => {\n        this.editor.execute('todoList');\n        this.editor.execute('checkTodoList');\n      });\n    }\n  }\n  /**\n   * Adds autoformatting related to the {@link module:basic-styles/bold~Bold},\n   * {@link module:basic-styles/italic~Italic}, {@link module:basic-styles/code~Code}\n   * and {@link module:basic-styles/strikethrough~Strikethrough}\n   *\n   * When typed:\n   * - `**foobar**` &ndash; `**` characters are removed and `foobar` is set to bold,\n   * - `__foobar__` &ndash; `__` characters are removed and `foobar` is set to bold,\n   * - `*foobar*` &ndash; `*` characters are removed and `foobar` is set to italic,\n   * - `_foobar_` &ndash; `_` characters are removed and `foobar` is set to italic,\n   * - ``` `foobar` &ndash; ``` ` ``` characters are removed and `foobar` is set to code,\n   * - `~~foobar~~` &ndash; `~~` characters are removed and `foobar` is set to strikethrough.\n   *\n   * @private\n   */\n\n\n  _addBasicStylesAutoformats() {\n    const commands = this.editor.commands;\n\n    if (commands.get('bold')) {\n      const boldCallback = getCallbackFunctionForInlineAutoformat(this.editor, 'bold');\n      inlineAutoformatEditing(this.editor, this, /(?:^|\\s)(\\*\\*)([^*]+)(\\*\\*)$/g, boldCallback);\n      inlineAutoformatEditing(this.editor, this, /(?:^|\\s)(__)([^_]+)(__)$/g, boldCallback);\n    }\n\n    if (commands.get('italic')) {\n      const italicCallback = getCallbackFunctionForInlineAutoformat(this.editor, 'italic'); // The italic autoformatter cannot be triggered by the bold markers, so we need to check the\n      // text before the pattern (e.g. `(?:^|[^\\*])`).\n\n      inlineAutoformatEditing(this.editor, this, /(?:^|\\s)(\\*)([^*_]+)(\\*)$/g, italicCallback);\n      inlineAutoformatEditing(this.editor, this, /(?:^|\\s)(_)([^_]+)(_)$/g, italicCallback);\n    }\n\n    if (commands.get('code')) {\n      const codeCallback = getCallbackFunctionForInlineAutoformat(this.editor, 'code');\n      inlineAutoformatEditing(this.editor, this, /(`)([^`]+)(`)$/g, codeCallback);\n    }\n\n    if (commands.get('strikethrough')) {\n      const strikethroughCallback = getCallbackFunctionForInlineAutoformat(this.editor, 'strikethrough');\n      inlineAutoformatEditing(this.editor, this, /(~~)([^~]+)(~~)$/g, strikethroughCallback);\n    }\n  }\n  /**\n   * Adds autoformatting related to {@link module:heading/heading~Heading}.\n   *\n   * It is using a number at the end of the command name to associate it with the proper trigger:\n   *\n   * * `heading` with value `heading1` will be executed when typing `#`,\n   * * `heading` with value `heading2` will be executed when typing `##`,\n   * * ... up to `heading6` and `######`.\n   *\n   * @private\n   */\n\n\n  _addHeadingAutoformats() {\n    const command = this.editor.commands.get('heading');\n\n    if (command) {\n      command.modelElements.filter(name => name.match(/^heading[1-6]$/)).forEach(modelName => {\n        const level = modelName[7];\n        const pattern = new RegExp(`^(#{${level}})\\\\s$`);\n        blockAutoformatEditing(this.editor, this, pattern, () => {\n          // Should only be active if command is enabled and heading style associated with pattern is inactive.\n          if (!command.isEnabled || command.value === modelName) {\n            return false;\n          }\n\n          this.editor.execute('heading', {\n            value: modelName\n          });\n        });\n      });\n    }\n  }\n  /**\n   * Adds autoformatting related to {@link module:block-quote/blockquote~BlockQuote}.\n   *\n   * When typed:\n   * * `> ` &ndash; A paragraph will be changed to a block quote.\n   *\n   * @private\n   */\n\n\n  _addBlockQuoteAutoformats() {\n    if (this.editor.commands.get('blockQuote')) {\n      blockAutoformatEditing(this.editor, this, /^>\\s$/, 'blockQuote');\n    }\n  }\n  /**\n   * Adds autoformatting related to {@link module:code-block/codeblock~CodeBlock}.\n   *\n   * When typed:\n   * - `` ``` `` &ndash; A paragraph will be changed to a code block.\n   *\n   * @private\n   */\n\n\n  _addCodeBlockAutoformats() {\n    const editor = this.editor;\n    const selection = editor.model.document.selection;\n\n    if (editor.commands.get('codeBlock')) {\n      blockAutoformatEditing(editor, this, /^```$/, () => {\n        if (selection.getFirstPosition().parent.is('element', 'listItem')) {\n          return false;\n        }\n\n        this.editor.execute('codeBlock', {\n          usePreviousLanguageChoice: true\n        });\n      });\n    }\n  }\n  /**\n   * Adds autoformatting related to {@link module:horizontal-line/horizontalline~HorizontalLine}.\n   *\n   * When typed:\n   * - `` --- `` &ndash; Will be replaced with a horizontal line.\n   *\n   * @private\n   */\n\n\n  _addHorizontalLineAutoformats() {\n    if (this.editor.commands.get('horizontalLine')) {\n      blockAutoformatEditing(this.editor, this, /^---$/, 'horizontalLine');\n    }\n  }\n\n} // Helper function for getting `inlineAutoformatEditing` callbacks that checks if command is enabled.\n//\n// @param {module:core/editor/editor~Editor} editor\n// @param {String} attributeKey\n// @returns {Function}\n\nfunction getCallbackFunctionForInlineAutoformat(editor, attributeKey) {\n  return (writer, rangesToFormat) => {\n    const command = editor.commands.get(attributeKey);\n\n    if (!command.isEnabled) {\n      return false;\n    }\n\n    const validRanges = editor.model.schema.getValidRanges(rangesToFormat, attributeKey);\n\n    for (const range of validRanges) {\n      writer.setAttribute(attributeKey, true, range);\n    } // After applying attribute to the text, remove given attribute from the selection.\n    // This way user is able to type a text without attribute used by auto formatter.\n\n\n    writer.removeSelectionAttribute(attributeKey);\n  };\n}","map":{"version":3,"sources":["/Users/yasaman/Documents/moj_adminpanel/adminpanel/node_modules/@ckeditor/ckeditor5-autoformat/src/autoformat.js"],"names":["Plugin","Delete","blockAutoformatEditing","inlineAutoformatEditing","Autoformat","requires","pluginName","afterInit","_addListAutoformats","_addBasicStylesAutoformats","_addHeadingAutoformats","_addBlockQuoteAutoformats","_addCodeBlockAutoformats","_addHorizontalLineAutoformats","commands","editor","get","execute","boldCallback","getCallbackFunctionForInlineAutoformat","italicCallback","codeCallback","strikethroughCallback","command","modelElements","filter","name","match","forEach","modelName","level","pattern","RegExp","isEnabled","value","selection","model","document","getFirstPosition","parent","is","usePreviousLanguageChoice","attributeKey","writer","rangesToFormat","validRanges","schema","getValidRanges","range","setAttribute","removeSelectionAttribute"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module autoformat/autoformat\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Delete } from 'ckeditor5/src/typing';\n\nimport blockAutoformatEditing from './blockautoformatediting';\nimport inlineAutoformatEditing from './inlineautoformatediting';\n\n/**\n * Enables a set of predefined autoformatting actions.\n *\n * For a detailed overview, check the {@glink features/autoformat Autoformatting feature documentation}\n * and the {@glink api/autoformat package page}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Autoformat extends Plugin {\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Delete ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Autoformat';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\tthis._addListAutoformats();\n\t\tthis._addBasicStylesAutoformats();\n\t\tthis._addHeadingAutoformats();\n\t\tthis._addBlockQuoteAutoformats();\n\t\tthis._addCodeBlockAutoformats();\n\t\tthis._addHorizontalLineAutoformats();\n\t}\n\n\t/**\n\t * Adds autoformatting related to the {@link module:list/list~List}.\n\t *\n\t * When typed:\n\t * - `* ` or `- ` &ndash; A paragraph will be changed to a bulleted list.\n\t * - `1. ` or `1) ` &ndash; A paragraph will be changed to a numbered list (\"1\" can be any digit or a list of digits).\n\t * - `[] ` or `[ ] ` &ndash; A paragraph will be changed to a to-do list.\n\t * - `[x] ` or `[ x ] ` &ndash; A paragraph will be changed to a checked to-do list.\n\t *\n\t * @private\n\t */\n\t_addListAutoformats() {\n\t\tconst commands = this.editor.commands;\n\n\t\tif ( commands.get( 'bulletedList' ) ) {\n\t\t\tblockAutoformatEditing( this.editor, this, /^[*-]\\s$/, 'bulletedList' );\n\t\t}\n\n\t\tif ( commands.get( 'numberedList' ) ) {\n\t\t\tblockAutoformatEditing( this.editor, this, /^1[.|)]\\s$/, 'numberedList' );\n\t\t}\n\n\t\tif ( commands.get( 'todoList' ) ) {\n\t\t\tblockAutoformatEditing( this.editor, this, /^\\[\\s?\\]\\s$/, 'todoList' );\n\t\t}\n\n\t\tif ( commands.get( 'checkTodoList' ) ) {\n\t\t\tblockAutoformatEditing( this.editor, this, /^\\[\\s?x\\s?\\]\\s$/, () => {\n\t\t\t\tthis.editor.execute( 'todoList' );\n\t\t\t\tthis.editor.execute( 'checkTodoList' );\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to the {@link module:basic-styles/bold~Bold},\n\t * {@link module:basic-styles/italic~Italic}, {@link module:basic-styles/code~Code}\n\t * and {@link module:basic-styles/strikethrough~Strikethrough}\n\t *\n\t * When typed:\n\t * - `**foobar**` &ndash; `**` characters are removed and `foobar` is set to bold,\n\t * - `__foobar__` &ndash; `__` characters are removed and `foobar` is set to bold,\n\t * - `*foobar*` &ndash; `*` characters are removed and `foobar` is set to italic,\n\t * - `_foobar_` &ndash; `_` characters are removed and `foobar` is set to italic,\n\t * - ``` `foobar` &ndash; ``` ` ``` characters are removed and `foobar` is set to code,\n\t * - `~~foobar~~` &ndash; `~~` characters are removed and `foobar` is set to strikethrough.\n\t *\n\t * @private\n\t */\n\t_addBasicStylesAutoformats() {\n\t\tconst commands = this.editor.commands;\n\n\t\tif ( commands.get( 'bold' ) ) {\n\t\t\tconst boldCallback = getCallbackFunctionForInlineAutoformat( this.editor, 'bold' );\n\n\t\t\tinlineAutoformatEditing( this.editor, this, /(?:^|\\s)(\\*\\*)([^*]+)(\\*\\*)$/g, boldCallback );\n\t\t\tinlineAutoformatEditing( this.editor, this, /(?:^|\\s)(__)([^_]+)(__)$/g, boldCallback );\n\t\t}\n\n\t\tif ( commands.get( 'italic' ) ) {\n\t\t\tconst italicCallback = getCallbackFunctionForInlineAutoformat( this.editor, 'italic' );\n\n\t\t\t// The italic autoformatter cannot be triggered by the bold markers, so we need to check the\n\t\t\t// text before the pattern (e.g. `(?:^|[^\\*])`).\n\t\t\tinlineAutoformatEditing( this.editor, this, /(?:^|\\s)(\\*)([^*_]+)(\\*)$/g, italicCallback );\n\t\t\tinlineAutoformatEditing( this.editor, this, /(?:^|\\s)(_)([^_]+)(_)$/g, italicCallback );\n\t\t}\n\n\t\tif ( commands.get( 'code' ) ) {\n\t\t\tconst codeCallback = getCallbackFunctionForInlineAutoformat( this.editor, 'code' );\n\n\t\t\tinlineAutoformatEditing( this.editor, this, /(`)([^`]+)(`)$/g, codeCallback );\n\t\t}\n\n\t\tif ( commands.get( 'strikethrough' ) ) {\n\t\t\tconst strikethroughCallback = getCallbackFunctionForInlineAutoformat( this.editor, 'strikethrough' );\n\n\t\t\tinlineAutoformatEditing( this.editor, this, /(~~)([^~]+)(~~)$/g, strikethroughCallback );\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to {@link module:heading/heading~Heading}.\n\t *\n\t * It is using a number at the end of the command name to associate it with the proper trigger:\n\t *\n\t * * `heading` with value `heading1` will be executed when typing `#`,\n\t * * `heading` with value `heading2` will be executed when typing `##`,\n\t * * ... up to `heading6` and `######`.\n\t *\n\t * @private\n\t */\n\t_addHeadingAutoformats() {\n\t\tconst command = this.editor.commands.get( 'heading' );\n\n\t\tif ( command ) {\n\t\t\tcommand.modelElements\n\t\t\t\t.filter( name => name.match( /^heading[1-6]$/ ) )\n\t\t\t\t.forEach( modelName => {\n\t\t\t\t\tconst level = modelName[ 7 ];\n\t\t\t\t\tconst pattern = new RegExp( `^(#{${ level }})\\\\s$` );\n\n\t\t\t\t\tblockAutoformatEditing( this.editor, this, pattern, () => {\n\t\t\t\t\t\t// Should only be active if command is enabled and heading style associated with pattern is inactive.\n\t\t\t\t\t\tif ( !command.isEnabled || command.value === modelName ) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.editor.execute( 'heading', { value: modelName } );\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to {@link module:block-quote/blockquote~BlockQuote}.\n\t *\n\t * When typed:\n\t * * `> ` &ndash; A paragraph will be changed to a block quote.\n\t *\n\t * @private\n\t */\n\t_addBlockQuoteAutoformats() {\n\t\tif ( this.editor.commands.get( 'blockQuote' ) ) {\n\t\t\tblockAutoformatEditing( this.editor, this, /^>\\s$/, 'blockQuote' );\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to {@link module:code-block/codeblock~CodeBlock}.\n\t *\n\t * When typed:\n\t * - `` ``` `` &ndash; A paragraph will be changed to a code block.\n\t *\n\t * @private\n\t */\n\t_addCodeBlockAutoformats() {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\n\t\tif ( editor.commands.get( 'codeBlock' ) ) {\n\t\t\tblockAutoformatEditing( editor, this, /^```$/, () => {\n\t\t\t\tif ( selection.getFirstPosition().parent.is( 'element', 'listItem' ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.editor.execute( 'codeBlock', {\n\t\t\t\t\tusePreviousLanguageChoice: true\n\t\t\t\t} );\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to {@link module:horizontal-line/horizontalline~HorizontalLine}.\n\t *\n\t * When typed:\n\t * - `` --- `` &ndash; Will be replaced with a horizontal line.\n\t *\n\t * @private\n\t */\n\t_addHorizontalLineAutoformats() {\n\t\tif ( this.editor.commands.get( 'horizontalLine' ) ) {\n\t\t\tblockAutoformatEditing( this.editor, this, /^---$/, 'horizontalLine' );\n\t\t}\n\t}\n}\n\n// Helper function for getting `inlineAutoformatEditing` callbacks that checks if command is enabled.\n//\n// @param {module:core/editor/editor~Editor} editor\n// @param {String} attributeKey\n// @returns {Function}\nfunction getCallbackFunctionForInlineAutoformat( editor, attributeKey ) {\n\treturn ( writer, rangesToFormat ) => {\n\t\tconst command = editor.commands.get( attributeKey );\n\n\t\tif ( !command.isEnabled ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst validRanges = editor.model.schema.getValidRanges( rangesToFormat, attributeKey );\n\n\t\tfor ( const range of validRanges ) {\n\t\t\twriter.setAttribute( attributeKey, true, range );\n\t\t}\n\n\t\t// After applying attribute to the text, remove given attribute from the selection.\n\t\t// This way user is able to type a text without attribute used by auto formatter.\n\t\twriter.removeSelectionAttribute( attributeKey );\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}