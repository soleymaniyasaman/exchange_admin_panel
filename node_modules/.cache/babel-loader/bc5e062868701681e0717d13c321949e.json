{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Switch } from '@syncfusion/ej2-buttons';\nimport { extend } from '@syncfusion/ej2-base';\nimport { isEditable, addRemoveActiveClasses, createEditElement, getObject } from '../base/util';\nimport * as literals from '../base/string-literals';\nimport { EditCellBase } from './edit-cell-base';\n/**\n * `ToggleEditCell` is used to handle boolean cell type editing.\n *\n * @hidden\n */\n\nvar ToggleEditCell =\n/** @class */\nfunction (_super) {\n  __extends(ToggleEditCell, _super);\n\n  function ToggleEditCell() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.activeClasses = ['e-selectionbackground', 'e-active'];\n    return _this;\n  }\n\n  ToggleEditCell.prototype.create = function (args) {\n    var clsNames = 'e-field e-boolcell';\n\n    if (args.column.type === 'checkbox') {\n      clsNames = 'e-field e-boolcell e-edit-checkselect';\n    }\n\n    return createEditElement(this.parent, args.column, clsNames, {\n      type: 'checkbox',\n      value: args.value\n    });\n  };\n\n  ToggleEditCell.prototype.read = function (element) {\n    return element.checked;\n  };\n\n  ToggleEditCell.prototype.write = function (args) {\n    var chkBoxElement = !isNullOrUndefined(args.row) && args.row.querySelector('.e-edit-checkselect');\n    var data = getObject(args.column.field, args.rowData);\n    var checkState = data && JSON.parse(data.toString().toLowerCase());\n\n    if (!isNullOrUndefined(chkBoxElement)) {\n      this.editType = this.parent.editSettings.mode;\n      this.editRow = args.row;\n\n      if (args.requestType !== 'add') {\n        var row = this.parent.getRowObjectFromUID(args.row.getAttribute('data-uid'));\n        checkState = row ? row.isSelected : false;\n      }\n\n      addRemoveActiveClasses.apply(void 0, [[].slice.call(args.row.getElementsByClassName(literals.rowCell)), checkState].concat(this.activeClasses));\n    }\n\n    this.obj = new Switch(extend({\n      label: this.parent.editSettings.mode !== 'Dialog' ? ' ' : args.column.headerText,\n      checked: checkState,\n      disabled: !isEditable(args.column, args.requestType, args.element),\n      enableRtl: this.parent.enableRtl,\n      change: this.switchModeChange.bind(this)\n    }, args.column.edit.params));\n    this.obj.appendTo(args.element);\n  };\n\n  ToggleEditCell.prototype.switchModeChange = function (args) {\n    if (this.editRow && this.editType !== 'Dialog') {\n      var addClass = false;\n\n      if (!args.checked) {\n        this.editRow.removeAttribute('aria-selected');\n      } else {\n        addClass = true;\n        this.editRow.setAttribute('aria-selected', addClass.toString());\n      }\n\n      addRemoveActiveClasses.apply(void 0, [[].slice.call(this.editRow.getElementsByClassName(literals.rowCell)), addClass].concat(this.activeClasses));\n    }\n  };\n\n  return ToggleEditCell;\n}(EditCellBase);\n\nexport { ToggleEditCell };","map":{"version":3,"sources":["/Users/yasaman/Documents/moj_adminpanel/adminpanel/node_modules/@syncfusion/ej2-grids/src/grid/renderer/toggleswitch-edit-cell.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","isNullOrUndefined","Switch","extend","isEditable","addRemoveActiveClasses","createEditElement","getObject","literals","EditCellBase","ToggleEditCell","_super","_this","apply","arguments","activeClasses","args","clsNames","column","type","parent","value","read","element","checked","write","chkBoxElement","row","querySelector","data","field","rowData","checkState","JSON","parse","toString","toLowerCase","editType","editSettings","mode","editRow","requestType","getRowObjectFromUID","getAttribute","isSelected","slice","call","getElementsByClassName","rowCell","concat","obj","label","headerText","disabled","enableRtl","change","switchModeChange","bind","edit","params","appendTo","addClass","removeAttribute","setAttribute"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,KAF9E;;AAGA,WAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnBF,IAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASO,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBT,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,GAJD;AAKH,CAZ2C,EAA5C;;AAaA,SAASI,iBAAT,QAAkC,sBAAlC;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,UAAT,EAAqBC,sBAArB,EAA6CC,iBAA7C,EAAgEC,SAAhE,QAAiF,cAAjF;AACA,OAAO,KAAKC,QAAZ,MAA0B,yBAA1B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,cAAc;AAAG;AAAe,UAAUC,MAAV,EAAkB;AAClDxB,EAAAA,SAAS,CAACuB,cAAD,EAAiBC,MAAjB,CAAT;;AACA,WAASD,cAAT,GAA0B;AACtB,QAAIE,KAAK,GAAGD,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACE,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAAhE;;AACAF,IAAAA,KAAK,CAACG,aAAN,GAAsB,CAAC,uBAAD,EAA0B,UAA1B,CAAtB;AACA,WAAOH,KAAP;AACH;;AACDF,EAAAA,cAAc,CAACX,SAAf,CAAyBC,MAAzB,GAAkC,UAAUgB,IAAV,EAAgB;AAC9C,QAAIC,QAAQ,GAAG,oBAAf;;AACA,QAAID,IAAI,CAACE,MAAL,CAAYC,IAAZ,KAAqB,UAAzB,EAAqC;AACjCF,MAAAA,QAAQ,GAAG,uCAAX;AACH;;AACD,WAAOX,iBAAiB,CAAC,KAAKc,MAAN,EAAcJ,IAAI,CAACE,MAAnB,EAA2BD,QAA3B,EAAqC;AAAEE,MAAAA,IAAI,EAAE,UAAR;AAAoBE,MAAAA,KAAK,EAAEL,IAAI,CAACK;AAAhC,KAArC,CAAxB;AACH,GAND;;AAOAX,EAAAA,cAAc,CAACX,SAAf,CAAyBuB,IAAzB,GAAgC,UAAUC,OAAV,EAAmB;AAC/C,WAAOA,OAAO,CAACC,OAAf;AACH,GAFD;;AAGAd,EAAAA,cAAc,CAACX,SAAf,CAAyB0B,KAAzB,GAAiC,UAAUT,IAAV,EAAgB;AAC7C,QAAIU,aAAa,GAAG,CAACzB,iBAAiB,CAACe,IAAI,CAACW,GAAN,CAAlB,IAAgCX,IAAI,CAACW,GAAL,CAASC,aAAT,CAAuB,qBAAvB,CAApD;AACA,QAAIC,IAAI,GAAGtB,SAAS,CAACS,IAAI,CAACE,MAAL,CAAYY,KAAb,EAAoBd,IAAI,CAACe,OAAzB,CAApB;AACA,QAAIC,UAAU,GAAGH,IAAI,IAAII,IAAI,CAACC,KAAL,CAAWL,IAAI,CAACM,QAAL,GAAgBC,WAAhB,EAAX,CAAzB;;AACA,QAAI,CAACnC,iBAAiB,CAACyB,aAAD,CAAtB,EAAuC;AACnC,WAAKW,QAAL,GAAgB,KAAKjB,MAAL,CAAYkB,YAAZ,CAAyBC,IAAzC;AACA,WAAKC,OAAL,GAAexB,IAAI,CAACW,GAApB;;AACA,UAAIX,IAAI,CAACyB,WAAL,KAAqB,KAAzB,EAAgC;AAC5B,YAAId,GAAG,GAAG,KAAKP,MAAL,CAAYsB,mBAAZ,CAAgC1B,IAAI,CAACW,GAAL,CAASgB,YAAT,CAAsB,UAAtB,CAAhC,CAAV;AACAX,QAAAA,UAAU,GAAGL,GAAG,GAAGA,GAAG,CAACiB,UAAP,GAAoB,KAApC;AACH;;AACDvC,MAAAA,sBAAsB,CAACQ,KAAvB,CAA6B,KAAK,CAAlC,EAAqC,CAAC,GAAGgC,KAAH,CAASC,IAAT,CAAc9B,IAAI,CAACW,GAAL,CAASoB,sBAAT,CAAgCvC,QAAQ,CAACwC,OAAzC,CAAd,CAAD,EAAmEhB,UAAnE,EAA+EiB,MAA/E,CAAsF,KAAKlC,aAA3F,CAArC;AACH;;AACD,SAAKmC,GAAL,GAAW,IAAIhD,MAAJ,CAAWC,MAAM,CAAC;AACzBgD,MAAAA,KAAK,EAAE,KAAK/B,MAAL,CAAYkB,YAAZ,CAAyBC,IAAzB,KAAkC,QAAlC,GAA6C,GAA7C,GAAmDvB,IAAI,CAACE,MAAL,CAAYkC,UAD7C;AAEzB5B,MAAAA,OAAO,EAAEQ,UAFgB;AAGzBqB,MAAAA,QAAQ,EAAE,CAACjD,UAAU,CAACY,IAAI,CAACE,MAAN,EAAcF,IAAI,CAACyB,WAAnB,EAAgCzB,IAAI,CAACO,OAArC,CAHI;AAG2C+B,MAAAA,SAAS,EAAE,KAAKlC,MAAL,CAAYkC,SAHlE;AAIzBC,MAAAA,MAAM,EAAE,KAAKC,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B;AAJiB,KAAD,EAKzBzC,IAAI,CAACE,MAAL,CAAYwC,IAAZ,CAAiBC,MALQ,CAAjB,CAAX;AAMA,SAAKT,GAAL,CAASU,QAAT,CAAkB5C,IAAI,CAACO,OAAvB;AACH,GApBD;;AAqBAb,EAAAA,cAAc,CAACX,SAAf,CAAyByD,gBAAzB,GAA4C,UAAUxC,IAAV,EAAgB;AACxD,QAAI,KAAKwB,OAAL,IAAgB,KAAKH,QAAL,KAAkB,QAAtC,EAAgD;AAC5C,UAAIwB,QAAQ,GAAG,KAAf;;AACA,UAAI,CAAC7C,IAAI,CAACQ,OAAV,EAAmB;AACf,aAAKgB,OAAL,CAAasB,eAAb,CAA6B,eAA7B;AACH,OAFD,MAGK;AACDD,QAAAA,QAAQ,GAAG,IAAX;AACA,aAAKrB,OAAL,CAAauB,YAAb,CAA0B,eAA1B,EAA2CF,QAAQ,CAAC1B,QAAT,EAA3C;AACH;;AACD9B,MAAAA,sBAAsB,CAACQ,KAAvB,CAA6B,KAAK,CAAlC,EAAqC,CAAC,GAAGgC,KAAH,CAASC,IAAT,CAAc,KAAKN,OAAL,CAAaO,sBAAb,CAAoCvC,QAAQ,CAACwC,OAA7C,CAAd,CAAD,EAAuEa,QAAvE,EAAiFZ,MAAjF,CAAwF,KAAKlC,aAA7F,CAArC;AACH;AACJ,GAZD;;AAaA,SAAOL,cAAP;AACH,CApDmC,CAoDlCD,YApDkC,CAApC;;AAqDA,SAASC,cAAT","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Switch } from '@syncfusion/ej2-buttons';\nimport { extend } from '@syncfusion/ej2-base';\nimport { isEditable, addRemoveActiveClasses, createEditElement, getObject } from '../base/util';\nimport * as literals from '../base/string-literals';\nimport { EditCellBase } from './edit-cell-base';\n/**\n * `ToggleEditCell` is used to handle boolean cell type editing.\n *\n * @hidden\n */\nvar ToggleEditCell = /** @class */ (function (_super) {\n    __extends(ToggleEditCell, _super);\n    function ToggleEditCell() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.activeClasses = ['e-selectionbackground', 'e-active'];\n        return _this;\n    }\n    ToggleEditCell.prototype.create = function (args) {\n        var clsNames = 'e-field e-boolcell';\n        if (args.column.type === 'checkbox') {\n            clsNames = 'e-field e-boolcell e-edit-checkselect';\n        }\n        return createEditElement(this.parent, args.column, clsNames, { type: 'checkbox', value: args.value });\n    };\n    ToggleEditCell.prototype.read = function (element) {\n        return element.checked;\n    };\n    ToggleEditCell.prototype.write = function (args) {\n        var chkBoxElement = !isNullOrUndefined(args.row) && args.row.querySelector('.e-edit-checkselect');\n        var data = getObject(args.column.field, args.rowData);\n        var checkState = data && JSON.parse(data.toString().toLowerCase());\n        if (!isNullOrUndefined(chkBoxElement)) {\n            this.editType = this.parent.editSettings.mode;\n            this.editRow = args.row;\n            if (args.requestType !== 'add') {\n                var row = this.parent.getRowObjectFromUID(args.row.getAttribute('data-uid'));\n                checkState = row ? row.isSelected : false;\n            }\n            addRemoveActiveClasses.apply(void 0, [[].slice.call(args.row.getElementsByClassName(literals.rowCell)), checkState].concat(this.activeClasses));\n        }\n        this.obj = new Switch(extend({\n            label: this.parent.editSettings.mode !== 'Dialog' ? ' ' : args.column.headerText,\n            checked: checkState,\n            disabled: !isEditable(args.column, args.requestType, args.element), enableRtl: this.parent.enableRtl,\n            change: this.switchModeChange.bind(this)\n        }, args.column.edit.params));\n        this.obj.appendTo(args.element);\n    };\n    ToggleEditCell.prototype.switchModeChange = function (args) {\n        if (this.editRow && this.editType !== 'Dialog') {\n            var addClass = false;\n            if (!args.checked) {\n                this.editRow.removeAttribute('aria-selected');\n            }\n            else {\n                addClass = true;\n                this.editRow.setAttribute('aria-selected', addClass.toString());\n            }\n            addRemoveActiveClasses.apply(void 0, [[].slice.call(this.editRow.getElementsByClassName(literals.rowCell)), addClass].concat(this.activeClasses));\n        }\n    };\n    return ToggleEditCell;\n}(EditCellBase));\nexport { ToggleEditCell };\n"]},"metadata":{},"sourceType":"module"}