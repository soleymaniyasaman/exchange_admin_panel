{"ast":null,"code":"/**\n * MarkdownSelection internal module\n *\n * @hidden\n\n */\nvar MarkdownSelection =\n/** @class */\nfunction () {\n  function MarkdownSelection() {}\n  /**\n   * markdown getLineNumber method\n   *\n   * @param {HTMLTextAreaElement} textarea - specifies the text area element\n   * @param {number} point - specifies the number value\n   * @returns {number} - returns the value\n   * @hidden\n    */\n\n\n  MarkdownSelection.prototype.getLineNumber = function (textarea, point) {\n    return textarea.value.substr(0, point).split('\\n').length;\n  };\n  /**\n   * markdown getSelectedText method\n   *\n   * @param {HTMLTextAreaElement} textarea - specifies the text area element\n   * @returns {string} - specifies the string value\n   * @hidden\n    */\n\n\n  MarkdownSelection.prototype.getSelectedText = function (textarea) {\n    var start = textarea.selectionStart;\n    var end = textarea.selectionEnd;\n    return textarea.value.substring(start, end);\n  };\n  /**\n   * markdown getAllParents method\n   *\n   * @param {string} value - specifies the string value\n   * @returns {string[]} - returns the string value\n   * @hidden\n    */\n\n\n  MarkdownSelection.prototype.getAllParents = function (value) {\n    return value.split('\\n');\n  };\n  /**\n   * markdown getSelectedLine method\n   *\n   * @param {HTMLTextAreaElement} textarea - specifies the text area element\n   * @returns {string} - returns the string value\n   * @hidden\n    */\n\n\n  MarkdownSelection.prototype.getSelectedLine = function (textarea) {\n    var lines = this.getAllParents(textarea.value);\n    var index = this.getLineNumber(textarea, textarea.selectionStart);\n    return lines[index - 1];\n  };\n  /**\n   * markdown getLine method\n   *\n   * @param {HTMLTextAreaElement} textarea - specifies the text area element\n   * @param {number} index - specifies the number value\n   * @returns {string} - returns the string value\n   * @hidden\n    */\n\n\n  MarkdownSelection.prototype.getLine = function (textarea, index) {\n    var lines = this.getAllParents(textarea.value);\n    return lines[index];\n  };\n  /**\n   * markdown getSelectedParentPoints method\n   *\n   * @param {HTMLTextAreaElement} textarea - specifies the text area element\n   * @returns {string} - returns the string value\n   * @hidden\n    */\n\n\n  MarkdownSelection.prototype.getSelectedParentPoints = function (textarea) {\n    var lines = this.getAllParents(textarea.value);\n    var start = this.getLineNumber(textarea, textarea.selectionStart);\n    var end = this.getLineNumber(textarea, textarea.selectionEnd);\n    var parents = this.getSelectedText(textarea).split('\\n');\n    var selectedPoints = [];\n    var selectedLine = lines[start - 1];\n    var startLength = lines.slice(0, start - 1).join('').length;\n    var firstPoint = {};\n    firstPoint.line = start - 1;\n    firstPoint.start = startLength + firstPoint.line;\n    firstPoint.end = selectedLine !== '' ? firstPoint.start + selectedLine.length + 1 : firstPoint.start + selectedLine.length;\n    firstPoint.text = selectedLine;\n    selectedPoints.push(firstPoint);\n\n    if (parents.length > 1) {\n      for (var i = 1; i < parents.length - 1; i++) {\n        var points = {};\n        points.line = selectedPoints[i - 1].line + 1;\n        points.start = parents[i] !== '' ? selectedPoints[i - 1].end : selectedPoints[i - 1].end;\n        points.end = points.start + parents[i].length + 1;\n        points.text = parents[i];\n        selectedPoints.push(points);\n      }\n\n      var lastPoint = {};\n      lastPoint.line = selectedPoints[selectedPoints.length - 1].line + 1;\n      lastPoint.start = selectedPoints[selectedPoints.length - 1].end;\n      lastPoint.end = lastPoint.start + lines[end - 1].length + 1;\n      lastPoint.text = lines[end - 1];\n      selectedPoints.push(lastPoint);\n    }\n\n    return selectedPoints;\n  };\n  /**\n   * markdown setSelection method\n   *\n   * @param {HTMLTextAreaElement} textarea - specifies the text area element\n   * @param {number} start - specifies the start vaulue\n   * @param {number} end - specifies the end value\n   * @returns {void}\n   * @hidden\n    */\n\n\n  MarkdownSelection.prototype.setSelection = function (textarea, start, end) {\n    textarea.setSelectionRange(start, end);\n    textarea.focus();\n  };\n  /**\n   * markdown save method\n   *\n   * @param {number} start - specifies the start vaulue\n   * @param {number} end - specifies the end value\n   * @returns {void}\n   * @hidden\n    */\n\n\n  MarkdownSelection.prototype.save = function (start, end) {\n    this.selectionStart = start;\n    this.selectionEnd = end;\n  };\n  /**\n   * markdown restore method\n   *\n   * @param {HTMLTextAreaElement} textArea - specifies the text area element\n   * @returns {void}\n   * @hidden\n    */\n\n\n  MarkdownSelection.prototype.restore = function (textArea) {\n    this.setSelection(textArea, this.selectionStart, this.selectionEnd);\n  };\n  /**\n   * markdown isStartWith method\n   *\n   * @param {string} line - specifies the string value\n   * @param {string} command - specifies the string value\n   * @returns {boolean} - returns the boolean value\n   * @hidden\n    */\n\n\n  MarkdownSelection.prototype.isStartWith = function (line, command) {\n    var isStart = false;\n\n    if (line) {\n      var reg = line.trim() === command.trim() ? new RegExp('^(' + this.replaceSpecialChar(command.trim()) + ')', 'gim') : new RegExp('^(' + this.replaceSpecialChar(command) + ')', 'gim');\n      isStart = reg.test(line.trim());\n    }\n\n    return isStart;\n  };\n  /**\n   * markdown replaceSpecialChar method\n   *\n   * @param {string} value - specifies the string value\n   * @returns {string} - returns the value\n   * @hidden\n    */\n\n\n  MarkdownSelection.prototype.replaceSpecialChar = function (value) {\n    // eslint-disable-next-line\n    return value.replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/g, '\\\\$&');\n  };\n  /**\n   * markdown isClear method\n   *\n   * @param {string} parents - specifies the parent element\n   * @param {string} regex - specifies the regex value\n   * @returns {boolean} - returns the boolean value\n   * @hidden\n    */\n\n\n  MarkdownSelection.prototype.isClear = function (parents, regex) {\n    var isClear = false;\n\n    for (var i = 0; i < parents.length; i++) {\n      if (new RegExp(regex, 'gim').test(parents[i].text)) {\n        return true;\n      }\n    }\n\n    return isClear;\n  };\n  /**\n   * markdown getSelectedInlinePoints method\n   *\n   * @param {HTMLTextAreaElement} textarea - specifies the text area\n   * @returns {void}\n   * @hidden\n    */\n\n\n  MarkdownSelection.prototype.getSelectedInlinePoints = function (textarea) {\n    var start = textarea.selectionStart;\n    var end = textarea.selectionEnd;\n    var selection = this.getSelectedText(textarea);\n    return {\n      start: start,\n      end: end,\n      text: selection\n    };\n  };\n\n  return MarkdownSelection;\n}();\n\nexport { MarkdownSelection };","map":{"version":3,"sources":["/Users/yasaman/Documents/moj_adminpanel/adminpanel/node_modules/@syncfusion/ej2-richtexteditor/src/markdown-parser/plugin/markdown-selection.js"],"names":["MarkdownSelection","prototype","getLineNumber","textarea","point","value","substr","split","length","getSelectedText","start","selectionStart","end","selectionEnd","substring","getAllParents","getSelectedLine","lines","index","getLine","getSelectedParentPoints","parents","selectedPoints","selectedLine","startLength","slice","join","firstPoint","line","text","push","i","points","lastPoint","setSelection","setSelectionRange","focus","save","restore","textArea","isStartWith","command","isStart","reg","trim","RegExp","replaceSpecialChar","test","replace","isClear","regex","getSelectedInlinePoints","selection"],"mappings":"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","sourcesContent":["/**\n * MarkdownSelection internal module\n *\n * @hidden\n\n */\nvar MarkdownSelection = /** @class */ (function () {\n    function MarkdownSelection() {\n    }\n    /**\n     * markdown getLineNumber method\n     *\n     * @param {HTMLTextAreaElement} textarea - specifies the text area element\n     * @param {number} point - specifies the number value\n     * @returns {number} - returns the value\n     * @hidden\n\n     */\n    MarkdownSelection.prototype.getLineNumber = function (textarea, point) {\n        return textarea.value.substr(0, point).split('\\n').length;\n    };\n    /**\n     * markdown getSelectedText method\n     *\n     * @param {HTMLTextAreaElement} textarea - specifies the text area element\n     * @returns {string} - specifies the string value\n     * @hidden\n\n     */\n    MarkdownSelection.prototype.getSelectedText = function (textarea) {\n        var start = textarea.selectionStart;\n        var end = textarea.selectionEnd;\n        return textarea.value.substring(start, end);\n    };\n    /**\n     * markdown getAllParents method\n     *\n     * @param {string} value - specifies the string value\n     * @returns {string[]} - returns the string value\n     * @hidden\n\n     */\n    MarkdownSelection.prototype.getAllParents = function (value) {\n        return value.split('\\n');\n    };\n    /**\n     * markdown getSelectedLine method\n     *\n     * @param {HTMLTextAreaElement} textarea - specifies the text area element\n     * @returns {string} - returns the string value\n     * @hidden\n\n     */\n    MarkdownSelection.prototype.getSelectedLine = function (textarea) {\n        var lines = this.getAllParents(textarea.value);\n        var index = this.getLineNumber(textarea, textarea.selectionStart);\n        return lines[index - 1];\n    };\n    /**\n     * markdown getLine method\n     *\n     * @param {HTMLTextAreaElement} textarea - specifies the text area element\n     * @param {number} index - specifies the number value\n     * @returns {string} - returns the string value\n     * @hidden\n\n     */\n    MarkdownSelection.prototype.getLine = function (textarea, index) {\n        var lines = this.getAllParents(textarea.value);\n        return lines[index];\n    };\n    /**\n     * markdown getSelectedParentPoints method\n     *\n     * @param {HTMLTextAreaElement} textarea - specifies the text area element\n     * @returns {string} - returns the string value\n     * @hidden\n\n     */\n    MarkdownSelection.prototype.getSelectedParentPoints = function (textarea) {\n        var lines = this.getAllParents(textarea.value);\n        var start = this.getLineNumber(textarea, textarea.selectionStart);\n        var end = this.getLineNumber(textarea, textarea.selectionEnd);\n        var parents = this.getSelectedText(textarea).split('\\n');\n        var selectedPoints = [];\n        var selectedLine = lines[start - 1];\n        var startLength = lines.slice(0, start - 1).join('').length;\n        var firstPoint = {};\n        firstPoint.line = start - 1;\n        firstPoint.start = startLength + firstPoint.line;\n        firstPoint.end = selectedLine !== '' ? firstPoint.start +\n            selectedLine.length + 1 : firstPoint.start + selectedLine.length;\n        firstPoint.text = selectedLine;\n        selectedPoints.push(firstPoint);\n        if (parents.length > 1) {\n            for (var i = 1; i < parents.length - 1; i++) {\n                var points = {};\n                points.line = selectedPoints[i - 1].line + 1;\n                points.start = parents[i] !== '' ? selectedPoints[i - 1].end : selectedPoints[i - 1].end;\n                points.end = points.start + parents[i].length + 1;\n                points.text = parents[i];\n                selectedPoints.push(points);\n            }\n            var lastPoint = {};\n            lastPoint.line = selectedPoints[selectedPoints.length - 1].line + 1;\n            lastPoint.start = selectedPoints[selectedPoints.length - 1].end;\n            lastPoint.end = lastPoint.start + lines[end - 1].length + 1;\n            lastPoint.text = lines[end - 1];\n            selectedPoints.push(lastPoint);\n        }\n        return selectedPoints;\n    };\n    /**\n     * markdown setSelection method\n     *\n     * @param {HTMLTextAreaElement} textarea - specifies the text area element\n     * @param {number} start - specifies the start vaulue\n     * @param {number} end - specifies the end value\n     * @returns {void}\n     * @hidden\n\n     */\n    MarkdownSelection.prototype.setSelection = function (textarea, start, end) {\n        textarea.setSelectionRange(start, end);\n        textarea.focus();\n    };\n    /**\n     * markdown save method\n     *\n     * @param {number} start - specifies the start vaulue\n     * @param {number} end - specifies the end value\n     * @returns {void}\n     * @hidden\n\n     */\n    MarkdownSelection.prototype.save = function (start, end) {\n        this.selectionStart = start;\n        this.selectionEnd = end;\n    };\n    /**\n     * markdown restore method\n     *\n     * @param {HTMLTextAreaElement} textArea - specifies the text area element\n     * @returns {void}\n     * @hidden\n\n     */\n    MarkdownSelection.prototype.restore = function (textArea) {\n        this.setSelection(textArea, this.selectionStart, this.selectionEnd);\n    };\n    /**\n     * markdown isStartWith method\n     *\n     * @param {string} line - specifies the string value\n     * @param {string} command - specifies the string value\n     * @returns {boolean} - returns the boolean value\n     * @hidden\n\n     */\n    MarkdownSelection.prototype.isStartWith = function (line, command) {\n        var isStart = false;\n        if (line) {\n            var reg = line.trim() === command.trim() ?\n                new RegExp('^(' + this.replaceSpecialChar(command.trim()) + ')', 'gim') :\n                new RegExp('^(' + this.replaceSpecialChar(command) + ')', 'gim');\n            isStart = reg.test(line.trim());\n        }\n        return isStart;\n    };\n    /**\n     * markdown replaceSpecialChar method\n     *\n     * @param {string} value - specifies the string value\n     * @returns {string} - returns the value\n     * @hidden\n\n     */\n    MarkdownSelection.prototype.replaceSpecialChar = function (value) {\n        // eslint-disable-next-line\n        return value.replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/g, '\\\\$&');\n    };\n    /**\n     * markdown isClear method\n     *\n     * @param {string} parents - specifies the parent element\n     * @param {string} regex - specifies the regex value\n     * @returns {boolean} - returns the boolean value\n     * @hidden\n\n     */\n    MarkdownSelection.prototype.isClear = function (parents, regex) {\n        var isClear = false;\n        for (var i = 0; i < parents.length; i++) {\n            if (new RegExp(regex, 'gim').test(parents[i].text)) {\n                return true;\n            }\n        }\n        return isClear;\n    };\n    /**\n     * markdown getSelectedInlinePoints method\n     *\n     * @param {HTMLTextAreaElement} textarea - specifies the text area\n     * @returns {void}\n     * @hidden\n\n     */\n    MarkdownSelection.prototype.getSelectedInlinePoints = function (textarea) {\n        var start = textarea.selectionStart;\n        var end = textarea.selectionEnd;\n        var selection = this.getSelectedText(textarea);\n        return { start: start, end: end, text: selection };\n    };\n    return MarkdownSelection;\n}());\nexport { MarkdownSelection };\n"]},"metadata":{},"sourceType":"module"}