{"ast":null,"code":"import { MarkdownSelection } from '../../markdown-parser/plugin/markdown-selection';\nimport * as events from '../base/constant';\nimport { getDefaultMDTbStatus } from '../../common/util';\n/**\n * MarkdownToolbarStatus module for refresh the toolbar status\n */\n\nvar MarkdownToolbarStatus =\n/** @class */\nfunction () {\n  function MarkdownToolbarStatus(parent) {\n    this.toolbarStatus = this.prevToolbarStatus = getDefaultMDTbStatus();\n    this.selection = new MarkdownSelection();\n    this.parent = parent;\n    this.element = this.parent.contentModule.getEditPanel();\n    this.addEventListener();\n  }\n\n  MarkdownToolbarStatus.prototype.addEventListener = function () {\n    this.parent.on(events.toolbarRefresh, this.onRefreshHandler, this);\n    this.parent.on(events.destroy, this.removeEventListener, this);\n  };\n\n  MarkdownToolbarStatus.prototype.removeEventListener = function () {\n    this.parent.off(events.toolbarRefresh, this.onRefreshHandler);\n    this.parent.off(events.destroy, this.removeEventListener);\n  };\n\n  MarkdownToolbarStatus.prototype.onRefreshHandler = function (args) {\n    var parentsLines = this.selection.getSelectedParentPoints(this.element);\n    this.toolbarStatus = {\n      orderedlist: args.documentNode ? false : this.isListsApplied(parentsLines, 'OL'),\n      unorderedlist: args.documentNode ? false : this.isListsApplied(parentsLines, 'UL'),\n      formats: this.currentFormat(parentsLines, args.documentNode),\n      bold: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('Bold'),\n      italic: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('Italic'),\n      inlinecode: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('InlineCode'),\n      strikethrough: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('StrikeThrough'),\n      subscript: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('SubScript'),\n      superscript: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('SuperScript'),\n      uppercase: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('UpperCase')\n    };\n\n    if (this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('InlineCode')) {\n      this.toolbarStatus.formats = 'pre';\n    }\n\n    var tbStatusString = JSON.stringify(this.toolbarStatus);\n    this.parent.notify(events.toolbarUpdated, this.toolbarStatus);\n\n    if (JSON.stringify(this.prevToolbarStatus) !== tbStatusString) {\n      this.parent.notify(events.updateTbItemsStatus, {\n        html: null,\n        markdown: JSON.parse(tbStatusString)\n      });\n      this.prevToolbarStatus = JSON.parse(tbStatusString);\n    }\n  };\n\n  MarkdownToolbarStatus.prototype.isListsApplied = function (lines, type) {\n    var isApply = true;\n\n    if (type === 'OL') {\n      for (var i = 0; i < lines.length; i++) {\n        var lineSplit = lines[i].text.trim().split(' ', 2)[0] + ' ';\n\n        if (!/^[\\d.]+[ ]+$/.test(lineSplit)) {\n          isApply = false;\n          break;\n        }\n      }\n    } else {\n      for (var i = 0; i < lines.length; i++) {\n        if (!this.selection.isStartWith(lines[i].text, this.parent.formatter.listTags[type])) {\n          isApply = false;\n          break;\n        }\n      }\n    }\n\n    return isApply;\n  };\n\n  MarkdownToolbarStatus.prototype.currentFormat = function (lines, documentNode) {\n    var format = 'p';\n    var keys = Object.keys(this.parent.formatter.formatTags);\n    var direction = this.element.selectionDirection;\n    var checkLine = direction === 'backward' ? lines[0].text : lines[lines.length - 1].text;\n\n    for (var i = 0; !documentNode && i < keys.length; i++) {\n      if (keys[i] !== 'pre' && this.selection.isStartWith(checkLine, this.parent.formatter.formatTags[keys[i]])) {\n        format = keys[i];\n        break;\n      } else if (keys[i] === 'pre') {\n        if (this.codeFormat()) {\n          format = keys[i];\n          break;\n        }\n      }\n    }\n\n    return format;\n  };\n\n  MarkdownToolbarStatus.prototype.codeFormat = function () {\n    var isFormat = false;\n    var textArea = this.parent.inputElement;\n    var start = textArea.selectionStart;\n\n    var splitAt = function (index) {\n      return function (x) {\n        return [x.slice(0, index), x.slice(index)];\n      };\n    };\n\n    var splitText = splitAt(start)(textArea.value);\n    var cmdPre = this.parent.formatter.formatTags.pre;\n    var selectedText = this.getSelectedText(textArea);\n\n    if (selectedText !== '' && selectedText === selectedText.toLocaleUpperCase()) {\n      return true;\n    } else if (selectedText === '') {\n      var beforeText = textArea.value.substr(splitText[0].length - 1, 1);\n      var afterText = splitText[1].substr(0, 1);\n\n      if (beforeText !== '' && afterText !== '' && beforeText.match(/[a-z]/i) && beforeText === beforeText.toLocaleUpperCase() && afterText === afterText.toLocaleUpperCase()) {\n        return true;\n      }\n    }\n\n    if (this.isCode(splitText[0], cmdPre) && this.isCode(splitText[1], cmdPre) && splitText[0].match(this.multiCharRegx(cmdPre)).length % 2 === 1 && splitText[1].match(this.multiCharRegx(cmdPre)).length % 2 === 1) {\n      isFormat = true;\n    }\n\n    return isFormat;\n  };\n\n  MarkdownToolbarStatus.prototype.getSelectedText = function (textarea) {\n    return textarea.value.substring(textarea.selectionStart, textarea.selectionEnd);\n  };\n\n  MarkdownToolbarStatus.prototype.isCode = function (text, cmd) {\n    return text.search('\\\\' + cmd + '') !== -1;\n  };\n\n  MarkdownToolbarStatus.prototype.multiCharRegx = function (cmd) {\n    return new RegExp('(\\\\' + cmd + ')', 'g');\n  };\n\n  return MarkdownToolbarStatus;\n}();\n\nexport { MarkdownToolbarStatus };","map":{"version":3,"sources":["/Users/yasaman/Documents/moj_adminpanel/adminpanel/node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/markdown-toolbar-status.js"],"names":["MarkdownSelection","events","getDefaultMDTbStatus","MarkdownToolbarStatus","parent","toolbarStatus","prevToolbarStatus","selection","element","contentModule","getEditPanel","addEventListener","prototype","on","toolbarRefresh","onRefreshHandler","destroy","removeEventListener","off","args","parentsLines","getSelectedParentPoints","orderedlist","documentNode","isListsApplied","unorderedlist","formats","currentFormat","bold","formatter","editorManager","mdSelectionFormats","isAppliedCommand","italic","inlinecode","strikethrough","subscript","superscript","uppercase","tbStatusString","JSON","stringify","notify","toolbarUpdated","updateTbItemsStatus","html","markdown","parse","lines","type","isApply","i","length","lineSplit","text","trim","split","test","isStartWith","listTags","format","keys","Object","formatTags","direction","selectionDirection","checkLine","codeFormat","isFormat","textArea","inputElement","start","selectionStart","splitAt","index","x","slice","splitText","value","cmdPre","pre","selectedText","getSelectedText","toLocaleUpperCase","beforeText","substr","afterText","match","isCode","multiCharRegx","textarea","substring","selectionEnd","cmd","search","RegExp"],"mappings":"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","sourcesContent":["import { MarkdownSelection } from '../../markdown-parser/plugin/markdown-selection';\nimport * as events from '../base/constant';\nimport { getDefaultMDTbStatus } from '../../common/util';\n/**\n * MarkdownToolbarStatus module for refresh the toolbar status\n */\nvar MarkdownToolbarStatus = /** @class */ (function () {\n    function MarkdownToolbarStatus(parent) {\n        this.toolbarStatus = this.prevToolbarStatus = getDefaultMDTbStatus();\n        this.selection = new MarkdownSelection();\n        this.parent = parent;\n        this.element = this.parent.contentModule.getEditPanel();\n        this.addEventListener();\n    }\n    MarkdownToolbarStatus.prototype.addEventListener = function () {\n        this.parent.on(events.toolbarRefresh, this.onRefreshHandler, this);\n        this.parent.on(events.destroy, this.removeEventListener, this);\n    };\n    MarkdownToolbarStatus.prototype.removeEventListener = function () {\n        this.parent.off(events.toolbarRefresh, this.onRefreshHandler);\n        this.parent.off(events.destroy, this.removeEventListener);\n    };\n    MarkdownToolbarStatus.prototype.onRefreshHandler = function (args) {\n        var parentsLines = this.selection.getSelectedParentPoints(this.element);\n        this.toolbarStatus = {\n            orderedlist: args.documentNode ? false : this.isListsApplied(parentsLines, 'OL'),\n            unorderedlist: args.documentNode ? false : this.isListsApplied(parentsLines, 'UL'),\n            formats: this.currentFormat(parentsLines, args.documentNode),\n            bold: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('Bold'),\n            italic: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('Italic'),\n            inlinecode: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('InlineCode'),\n            strikethrough: args.documentNode ? false :\n                this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('StrikeThrough'),\n            subscript: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('SubScript'),\n            superscript: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('SuperScript'),\n            uppercase: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('UpperCase')\n        };\n        if (this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('InlineCode')) {\n            this.toolbarStatus.formats = 'pre';\n        }\n        var tbStatusString = JSON.stringify(this.toolbarStatus);\n        this.parent.notify(events.toolbarUpdated, this.toolbarStatus);\n        if (JSON.stringify(this.prevToolbarStatus) !== tbStatusString) {\n            this.parent.notify(events.updateTbItemsStatus, { html: null, markdown: JSON.parse(tbStatusString) });\n            this.prevToolbarStatus = JSON.parse(tbStatusString);\n        }\n    };\n    MarkdownToolbarStatus.prototype.isListsApplied = function (lines, type) {\n        var isApply = true;\n        if (type === 'OL') {\n            for (var i = 0; i < lines.length; i++) {\n                var lineSplit = lines[i].text.trim().split(' ', 2)[0] + ' ';\n                if (!/^[\\d.]+[ ]+$/.test(lineSplit)) {\n                    isApply = false;\n                    break;\n                }\n            }\n        }\n        else {\n            for (var i = 0; i < lines.length; i++) {\n                if (!this.selection.isStartWith(lines[i].text, this.parent.formatter.listTags[type])) {\n                    isApply = false;\n                    break;\n                }\n            }\n        }\n        return isApply;\n    };\n    MarkdownToolbarStatus.prototype.currentFormat = function (lines, documentNode) {\n        var format = 'p';\n        var keys = Object.keys(this.parent.formatter.formatTags);\n        var direction = this.element.selectionDirection;\n        var checkLine = direction === 'backward' ? lines[0].text : lines[lines.length - 1].text;\n        for (var i = 0; !documentNode && i < keys.length; i++) {\n            if (keys[i] !== 'pre' && this.selection.isStartWith(checkLine, this.parent.formatter.formatTags[keys[i]])) {\n                format = keys[i];\n                break;\n            }\n            else if (keys[i] === 'pre') {\n                if (this.codeFormat()) {\n                    format = keys[i];\n                    break;\n                }\n            }\n        }\n        return format;\n    };\n    MarkdownToolbarStatus.prototype.codeFormat = function () {\n        var isFormat = false;\n        var textArea = this.parent.inputElement;\n        var start = textArea.selectionStart;\n        var splitAt = function (index) { return function (x) { return [x.slice(0, index), x.slice(index)]; }; };\n        var splitText = splitAt(start)(textArea.value);\n        var cmdPre = this.parent.formatter.formatTags.pre;\n        var selectedText = this.getSelectedText(textArea);\n        if (selectedText !== '' && selectedText === selectedText.toLocaleUpperCase()) {\n            return true;\n        }\n        else if (selectedText === '') {\n            var beforeText = textArea.value.substr(splitText[0].length - 1, 1);\n            var afterText = splitText[1].substr(0, 1);\n            if ((beforeText !== '' && afterText !== '' && beforeText.match(/[a-z]/i)) &&\n                beforeText === beforeText.toLocaleUpperCase() && afterText === afterText.toLocaleUpperCase()) {\n                return true;\n            }\n        }\n        if ((this.isCode(splitText[0], cmdPre) && this.isCode(splitText[1], cmdPre)) &&\n            (splitText[0].match(this.multiCharRegx(cmdPre)).length % 2 === 1 &&\n                splitText[1].match(this.multiCharRegx(cmdPre)).length % 2 === 1)) {\n            isFormat = true;\n        }\n        return isFormat;\n    };\n    MarkdownToolbarStatus.prototype.getSelectedText = function (textarea) {\n        return textarea.value.substring(textarea.selectionStart, textarea.selectionEnd);\n    };\n    MarkdownToolbarStatus.prototype.isCode = function (text, cmd) {\n        return text.search('\\\\' + cmd + '') !== -1;\n    };\n    MarkdownToolbarStatus.prototype.multiCharRegx = function (cmd) {\n        return new RegExp('(\\\\' + cmd + ')', 'g');\n    };\n    return MarkdownToolbarStatus;\n}());\nexport { MarkdownToolbarStatus };\n"]},"metadata":{},"sourceType":"module"}