{"ast":null,"code":"/**\n * Node appending methods.\n *\n * @hidden\n */\nvar InsertMethods =\n/** @class */\nfunction () {\n  function InsertMethods() {}\n  /**\n   * WrapBefore method\n   *\n   * @param {Text} textNode - specifies the text node\n   * @param {HTMLElement} parentNode - specifies the parent node\n   * @param {boolean} isAfter - specifies the boolean value\n   * @returns {Text} - returns the text value\n   * @hidden\n    */\n\n\n  InsertMethods.WrapBefore = function (textNode, parentNode, isAfter) {\n    parentNode.innerText = textNode.textContent; //eslint-disable-next-line\n\n    !isAfter ? this.AppendBefore(parentNode, textNode) : this.AppendBefore(parentNode, textNode, true);\n\n    if (textNode.parentNode) {\n      textNode.parentNode.removeChild(textNode);\n    }\n\n    return parentNode.childNodes[0];\n  };\n  /**\n   * Wrap method\n   *\n   * @param {HTMLElement} childNode - specifies the child node\n   * @param {HTMLElement} parentNode - specifies the parent node.\n   * @returns {HTMLElement} - returns the element\n   * @hidden\n    */\n\n\n  InsertMethods.Wrap = function (childNode, parentNode) {\n    this.AppendBefore(parentNode, childNode);\n    parentNode.appendChild(childNode);\n    return childNode;\n  };\n  /**\n   * unwrap method\n   *\n   * @param {Node} node - specifies the node element.\n   * @returns {Node[]} - returns the array of value\n   * @hidden\n    */\n\n\n  InsertMethods.unwrap = function (node) {\n    var parent = node.parentNode;\n    var child = [];\n\n    for (; node.firstChild; null) {\n      child.push(parent.insertBefore(node.firstChild, node));\n    }\n\n    parent.removeChild(node);\n    return child;\n  };\n  /**\n   * AppendBefore method\n   *\n   * @param {HTMLElement} textNode - specifies the element\n   * @param {HTMLElement} parentNode - specifies the parent node\n   * @param {boolean} isAfter - specifies the boolean value\n   * @returns {void}\n   * @hidden\n    */\n\n\n  InsertMethods.AppendBefore = function (textNode, parentNode, isAfter) {\n    return parentNode.parentNode ? !isAfter ? parentNode.parentNode.insertBefore(textNode, parentNode) : parentNode.parentNode.insertBefore(textNode, parentNode.nextSibling) : parentNode;\n  };\n\n  return InsertMethods;\n}();\n\nexport { InsertMethods };","map":{"version":3,"sources":["/Users/yasaman/Documents/moj_adminpanel/adminpanel/node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/insert-methods.js"],"names":["InsertMethods","WrapBefore","textNode","parentNode","isAfter","innerText","textContent","AppendBefore","removeChild","childNodes","Wrap","childNode","appendChild","unwrap","node","parent","child","firstChild","push","insertBefore","nextSibling"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,IAAIA,aAAa;AAAG;AAAe,YAAY;AAC3C,WAASA,aAAT,GAAyB,CACxB;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEIA,EAAAA,aAAa,CAACC,UAAd,GAA2B,UAAUC,QAAV,EAAoBC,UAApB,EAAgCC,OAAhC,EAAyC;AAChED,IAAAA,UAAU,CAACE,SAAX,GAAuBH,QAAQ,CAACI,WAAhC,CADgE,CAEhE;;AACC,KAACF,OAAF,GAAa,KAAKG,YAAL,CAAkBJ,UAAlB,EAA8BD,QAA9B,CAAb,GAAuD,KAAKK,YAAL,CAAkBJ,UAAlB,EAA8BD,QAA9B,EAAwC,IAAxC,CAAvD;;AACA,QAAIA,QAAQ,CAACC,UAAb,EAAyB;AACrBD,MAAAA,QAAQ,CAACC,UAAT,CAAoBK,WAApB,CAAgCN,QAAhC;AACH;;AACD,WAAOC,UAAU,CAACM,UAAX,CAAsB,CAAtB,CAAP;AACH,GARD;AASA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEIT,EAAAA,aAAa,CAACU,IAAd,GAAqB,UAAUC,SAAV,EAAqBR,UAArB,EAAiC;AAClD,SAAKI,YAAL,CAAkBJ,UAAlB,EAA8BQ,SAA9B;AACAR,IAAAA,UAAU,CAACS,WAAX,CAAuBD,SAAvB;AACA,WAAOA,SAAP;AACH,GAJD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AAEIX,EAAAA,aAAa,CAACa,MAAd,GAAuB,UAAUC,IAAV,EAAgB;AACnC,QAAIC,MAAM,GAAGD,IAAI,CAACX,UAAlB;AACA,QAAIa,KAAK,GAAG,EAAZ;;AACA,WAAOF,IAAI,CAACG,UAAZ,EAAwB,IAAxB,EAA8B;AAC1BD,MAAAA,KAAK,CAACE,IAAN,CAAWH,MAAM,CAACI,YAAP,CAAoBL,IAAI,CAACG,UAAzB,EAAqCH,IAArC,CAAX;AACH;;AACDC,IAAAA,MAAM,CAACP,WAAP,CAAmBM,IAAnB;AACA,WAAOE,KAAP;AACH,GARD;AASA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEIhB,EAAAA,aAAa,CAACO,YAAd,GAA6B,UAAUL,QAAV,EAAoBC,UAApB,EAAgCC,OAAhC,EAAyC;AAClE,WAAQD,UAAU,CAACA,UAAZ,GAA4B,CAACC,OAAF,GAAaD,UAAU,CAACA,UAAX,CAAsBgB,YAAtB,CAAmCjB,QAAnC,EAA6CC,UAA7C,CAAb,GAC5BA,UAAU,CAACA,UAAX,CAAsBgB,YAAtB,CAAmCjB,QAAnC,EAA6CC,UAAU,CAACiB,WAAxD,CADC,GAEHjB,UAFJ;AAGH,GAJD;;AAKA,SAAOH,aAAP;AACH,CArEkC,EAAnC;;AAsEA,SAASA,aAAT","sourcesContent":["/**\n * Node appending methods.\n *\n * @hidden\n */\nvar InsertMethods = /** @class */ (function () {\n    function InsertMethods() {\n    }\n    /**\n     * WrapBefore method\n     *\n     * @param {Text} textNode - specifies the text node\n     * @param {HTMLElement} parentNode - specifies the parent node\n     * @param {boolean} isAfter - specifies the boolean value\n     * @returns {Text} - returns the text value\n     * @hidden\n\n     */\n    InsertMethods.WrapBefore = function (textNode, parentNode, isAfter) {\n        parentNode.innerText = textNode.textContent;\n        //eslint-disable-next-line\n        (!isAfter) ? this.AppendBefore(parentNode, textNode) : this.AppendBefore(parentNode, textNode, true);\n        if (textNode.parentNode) {\n            textNode.parentNode.removeChild(textNode);\n        }\n        return parentNode.childNodes[0];\n    };\n    /**\n     * Wrap method\n     *\n     * @param {HTMLElement} childNode - specifies the child node\n     * @param {HTMLElement} parentNode - specifies the parent node.\n     * @returns {HTMLElement} - returns the element\n     * @hidden\n\n     */\n    InsertMethods.Wrap = function (childNode, parentNode) {\n        this.AppendBefore(parentNode, childNode);\n        parentNode.appendChild(childNode);\n        return childNode;\n    };\n    /**\n     * unwrap method\n     *\n     * @param {Node} node - specifies the node element.\n     * @returns {Node[]} - returns the array of value\n     * @hidden\n\n     */\n    InsertMethods.unwrap = function (node) {\n        var parent = node.parentNode;\n        var child = [];\n        for (; node.firstChild; null) {\n            child.push(parent.insertBefore(node.firstChild, node));\n        }\n        parent.removeChild(node);\n        return child;\n    };\n    /**\n     * AppendBefore method\n     *\n     * @param {HTMLElement} textNode - specifies the element\n     * @param {HTMLElement} parentNode - specifies the parent node\n     * @param {boolean} isAfter - specifies the boolean value\n     * @returns {void}\n     * @hidden\n\n     */\n    InsertMethods.AppendBefore = function (textNode, parentNode, isAfter) {\n        return (parentNode.parentNode) ? ((!isAfter) ? parentNode.parentNode.insertBefore(textNode, parentNode)\n            : parentNode.parentNode.insertBefore(textNode, parentNode.nextSibling)) :\n            parentNode;\n    };\n    return InsertMethods;\n}());\nexport { InsertMethods };\n"]},"metadata":{},"sourceType":"module"}