"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var dayjs_1 = __importDefault(require("dayjs"));
var jalaliday_1 = __importDefault(require("jalaliday"));
var warning_1 = require("rc-util/lib/warning");
var weekday_1 = __importDefault(require("dayjs/plugin/weekday"));
var localeData_1 = __importDefault(require("dayjs/plugin/localeData"));
var weekOfYear_1 = __importDefault(require("dayjs/plugin/weekOfYear"));
var weekYear_1 = __importDefault(require("dayjs/plugin/weekYear"));
var advancedFormat_1 = __importDefault(require("dayjs/plugin/advancedFormat"));
var customParseFormat_1 = __importDefault(require("dayjs/plugin/customParseFormat"));
var locale_1 = __importDefault(require("./locale"));
dayjs_1.default.extend(customParseFormat_1.default);
dayjs_1.default.extend(advancedFormat_1.default);
dayjs_1.default.extend(weekday_1.default);
dayjs_1.default.extend(localeData_1.default);
dayjs_1.default.extend(weekOfYear_1.default);
dayjs_1.default.extend(weekYear_1.default);
dayjs_1.default.extend(jalaliday_1.default);
dayjs_1.default.locale(locale_1.default, undefined, true);
dayjs_1.default.extend(function (o, c) {
    // todo support Wo (ISO week)
    var proto = c.prototype;
    var oldFormat = proto.format;
    proto.format = function f(formatStr) {
        var str = (formatStr || '').replace('Wo', 'wo');
        return oldFormat.bind(this)(str);
    };
});
var localeMap = {
    en_GB: "en-gb",
    en_US: "en",
    zh_CN: "zh-cn",
    zh_TW: "zh-tw",
    fa_IR: "fa"
};
var parseLocale = function (locale) {
    var mapLocale = localeMap[locale];
    return mapLocale || locale.split("_")[0];
};
var parseNoMatchNotice = function () {
    /* istanbul ignore next */
    warning_1.noteOnce(false, "Not match any format. Please help to fire a issue about this.");
};
var generateJalaliConfig = {
    // get
    getNow: function () { return dayjs_1.default().calendar("jalali"); },
    getFixedDate: function (string) { return dayjs_1.default(string, 'YYYY-MM-DD'); },
    getEndDate: function (date) { return date.endOf('month'); },
    getWeekDay: function (date) {
        var clone = date.locale('en');
        return clone.weekday() + clone.localeData().firstDayOfWeek();
    },
    getYear: function (date) { return date === null || date === void 0 ? void 0 : date.year(); },
    getMonth: function (date) { return date.month(); },
    getDate: function (date) { return date.date(); },
    getHour: function (date) { return date.hour(); },
    getMinute: function (date) { return date.minute(); },
    getSecond: function (date) { return date.second(); },
    // set
    addYear: function (date, diff) { return date.add(diff, 'year'); },
    addMonth: function (date, diff) { return date.add(diff, 'month'); },
    addDate: function (date, diff) { return date.add(diff, 'day'); },
    setYear: function (date, year) { return date.year(year); },
    setMonth: function (date, month) { return date.month(month); },
    setDate: function (date, num) { return date.date(num); },
    setHour: function (date, hour) { return date.hour(hour); },
    setMinute: function (date, minute) { return date.minute(minute); },
    setSecond: function (date, second) { return date.second(second); },
    // Compare
    isAfter: function (date1, date2) { return date1.isAfter(date2); },
    isValidate: function (date) { return date.isValid(); },
    locale: {
        getWeekFirstDay: function (locale) {
            return dayjs_1.default()
                .locale(parseLocale(locale))
                .localeData()
                .firstDayOfWeek();
        },
        getWeek: function (locale, date) { return date.locale(parseLocale(locale)).week(); },
        getShortWeekDays: function (locale) {
            return dayjs_1.default()
                .locale(parseLocale(locale))
                .localeData()
                .weekdaysMin();
        },
        getShortMonths: function (locale) {
            return dayjs_1.default()
                .locale(parseLocale(locale))
                .localeData()
                .monthsShort();
        },
        format: function (locale, date, format) {
            return date.locale(parseLocale(locale)).format(format);
        },
        parse: function (locale, text, formats) {
            var localeStr = parseLocale(locale);
            for (var i = 0; i < formats.length; i += 1) {
                var format = formats[i];
                var formatText = text;
                if (format.includes("wo") || format.includes("Wo")) {
                    // parse Wo
                    var year = formatText.split("-")[0];
                    var weekStr = formatText.split("-")[1];
                    var firstWeek = dayjs_1.default(year, "YYYY")
                        .startOf("year")
                        .locale(localeStr);
                    for (var j = 0; j <= 52; j += 1) {
                        var nextWeek = firstWeek.add(j, "week");
                        if (nextWeek.format("Wo") === weekStr) {
                            return nextWeek;
                        }
                    }
                    parseNoMatchNotice();
                    return null;
                }
                var date = dayjs_1.default(formatText, format).locale(localeStr);
                if (date.isValid()) {
                    return date;
                }
            }
            parseNoMatchNotice();
            return null;
        }
    }
};
exports.default = generateJalaliConfig;
