{"ast":null,"code":"/**\n * `Clear Format` module is used to handle Clear Format.\n */\nimport { closest } from '@syncfusion/ej2-base';\nimport { NodeSelection } from './../../selection/index';\nimport { NodeCutter } from './nodecutter';\nimport { DOMNode } from './dom-node';\nimport { InsertMethods } from './insert-methods';\nimport { IsFormatted } from './isformatted';\nimport { isIDevice, setEditFrameFocus } from '../../common/util';\n\nvar ClearFormat =\n/** @class */\nfunction () {\n  function ClearFormat() {}\n  /**\n   * clear method\n   *\n   * @param {Document} docElement - specifies the document element.\n   * @param {Node} endNode - specifies the end node\n   * @param {string} enterAction - specifies the enter key action\n   * @param {string} selector - specifies the string value\n   * @returns {void}\n   * @hidden\n    */\n\n\n  ClearFormat.clear = function (docElement, endNode, enterAction, selector) {\n    this.domNode = new DOMNode(endNode, docElement);\n    this.defaultTag = enterAction === 'P' ? this.defaultTag : 'div';\n    var nodeSelection = new NodeSelection();\n    var nodeCutter = new NodeCutter();\n    var range = nodeSelection.getRange(docElement);\n    var isCollapsed = range.collapsed;\n    var nodes = nodeSelection.getInsertNodeCollection(range);\n    var save = nodeSelection.save(range, docElement);\n\n    if (!isCollapsed) {\n      var preNode = void 0;\n\n      if (nodes[0].nodeName === 'BR' && closest(nodes[0], 'table')) {\n        preNode = nodeCutter.GetSpliceNode(range, closest(nodes[0], 'table'));\n      } else {\n        preNode = nodeCutter.GetSpliceNode(range, nodes[nodes.length > 1 && nodes[0].nodeName === 'IMG' ? 1 : 0]);\n      }\n\n      if (nodes.length === 1) {\n        nodeSelection.setSelectionContents(docElement, preNode);\n        range = nodeSelection.getRange(docElement);\n      } else {\n        var i = 1;\n        var lastText = nodes[nodes.length - i];\n\n        while (nodes.length <= i && nodes[nodes.length - i].nodeName === 'BR') {\n          i++;\n          lastText = nodes[nodes.length - i];\n        }\n\n        var lasNode = nodeCutter.GetSpliceNode(range, lastText);\n        nodeSelection.setSelectionText(docElement, preNode, lasNode, 0, lasNode.nodeType === 3 ? lasNode.textContent.length : lasNode.childNodes.length);\n        range = nodeSelection.getRange(docElement);\n      }\n\n      var exactNodes = nodeSelection.getNodeCollection(range);\n      var cloneSelectNodes = exactNodes.slice();\n      this.clearInlines(nodeSelection.getSelectionNodes(cloneSelectNodes), cloneSelectNodes, nodeSelection.getRange(docElement), nodeCutter, endNode);\n      this.reSelection(docElement, save, exactNodes);\n      range = nodeSelection.getRange(docElement);\n      exactNodes = nodeSelection.getNodeCollection(range);\n      var cloneParentNodes = exactNodes.slice();\n      this.clearBlocks(docElement, cloneParentNodes, endNode, nodeCutter, nodeSelection);\n\n      if (isIDevice()) {\n        setEditFrameFocus(endNode, selector);\n      }\n\n      this.reSelection(docElement, save, exactNodes);\n    }\n  };\n\n  ClearFormat.reSelection = function (docElement, save, exactNodes) {\n    var selectionNodes = save.getInsertNodes(exactNodes);\n    save.startContainer = save.getNodeArray(selectionNodes[0], true, docElement);\n    save.startOffset = 0;\n    save.endContainer = save.getNodeArray(selectionNodes[selectionNodes.length - 1], false, docElement);\n    var endIndexNode = selectionNodes[selectionNodes.length - 1];\n    save.endOffset = endIndexNode.nodeType === 3 ? endIndexNode.textContent.length : endIndexNode.childNodes.length;\n    save.restore();\n  };\n\n  ClearFormat.clearBlocks = function (docElement, nodes, endNode, nodeCutter, nodeSelection) {\n    var parentNodes = [];\n\n    for (var index = 0; index < nodes.length; index++) {\n      if (this.BLOCK_TAGS.indexOf(nodes[index].nodeName.toLocaleLowerCase()) > -1 && parentNodes.indexOf(nodes[index]) === -1) {\n        parentNodes.push(nodes[index]);\n      } else if (this.BLOCK_TAGS.indexOf(nodes[index].parentNode.nodeName.toLocaleLowerCase()) > -1 && parentNodes.indexOf(nodes[index].parentNode) === -1 && endNode !== nodes[index].parentNode) {\n        parentNodes.push(nodes[index].parentNode);\n      }\n    }\n\n    parentNodes = this.spliceParent(parentNodes, nodes)[0];\n    parentNodes = this.removeParent(parentNodes);\n    this.unWrap(docElement, parentNodes, nodeCutter, nodeSelection);\n  };\n\n  ClearFormat.spliceParent = function (parentNodes, nodes) {\n    for (var index1 = 0; index1 < parentNodes.length; index1++) {\n      var len = parentNodes[index1].childNodes.length;\n\n      for (var index2 = 0; index2 < len; index2++) {\n        if (nodes.indexOf(parentNodes[index1].childNodes[index2]) > 0 && parentNodes[index1].childNodes[index2].childNodes.length > 0) {\n          nodes = this.spliceParent([parentNodes[index1].childNodes[index2]], nodes)[1];\n        }\n\n        if (nodes.indexOf(parentNodes[index1].childNodes[index2]) <= -1 && parentNodes[index1].childNodes[index2].textContent.trim() !== '') {\n          for (var index3 = 0; index3 < len; index3++) {\n            if (nodes.indexOf(parentNodes[index1].childNodes[index3]) > -1) {\n              nodes.splice(nodes.indexOf(parentNodes[index1].childNodes[index3]), 1);\n            }\n          }\n\n          index2 = parentNodes[index1].childNodes.length;\n          var parentIndex = parentNodes.indexOf(parentNodes[index1].parentNode);\n          var nodeIndex = nodes.indexOf(parentNodes[index1].parentNode);\n\n          if (parentIndex > -1) {\n            parentNodes.splice(parentIndex, 1);\n          }\n\n          if (nodeIndex > -1) {\n            nodes.splice(nodeIndex, 1);\n          }\n\n          var elementIndex = nodes.indexOf(parentNodes[index1]);\n\n          if (elementIndex > -1) {\n            nodes.splice(elementIndex, 1);\n          }\n\n          parentNodes.splice(index1, 1);\n          index1--;\n        }\n      }\n    }\n\n    return [parentNodes, nodes];\n  };\n\n  ClearFormat.removeChild = function (parentNodes, parentNode) {\n    var count = parentNode.childNodes.length;\n\n    if (count > 0) {\n      for (var index = 0; index < count; index++) {\n        if (parentNodes.indexOf(parentNode.childNodes[index]) > -1) {\n          parentNodes = this.removeChild(parentNodes, parentNode.childNodes[index]);\n          parentNodes.splice(parentNodes.indexOf(parentNode.childNodes[index]), 1);\n        }\n      }\n    }\n\n    return parentNodes;\n  };\n\n  ClearFormat.removeParent = function (parentNodes) {\n    for (var index = 0; index < parentNodes.length; index++) {\n      if (parentNodes.indexOf(parentNodes[index].parentNode) > -1) {\n        parentNodes = this.removeChild(parentNodes, parentNodes[index]);\n        parentNodes.splice(index, 1);\n        index--;\n      }\n    }\n\n    return parentNodes;\n  };\n\n  ClearFormat.unWrap = function (docElement, parentNodes, nodeCutter, nodeSelection) {\n    for (var index1 = 0; index1 < parentNodes.length; index1++) {\n      if (this.NONVALID_TAGS.indexOf(parentNodes[index1].nodeName.toLowerCase()) > -1 && parentNodes[index1].parentNode && this.NONVALID_PARENT_TAGS.indexOf(parentNodes[index1].parentNode.nodeName.toLowerCase()) > -1) {\n        nodeSelection.setSelectionText(docElement, parentNodes[index1], parentNodes[index1], 0, parentNodes[index1].childNodes.length);\n        InsertMethods.unwrap(nodeCutter.GetSpliceNode(nodeSelection.getRange(docElement), parentNodes[index1].parentNode));\n      }\n\n      if (parentNodes[index1].nodeName.toLocaleLowerCase() !== 'p') {\n        if (this.NONVALID_PARENT_TAGS.indexOf(parentNodes[index1].nodeName.toLowerCase()) < 0 && parentNodes[index1].parentNode.nodeName.toLocaleLowerCase() !== 'p' && !((parentNodes[index1].nodeName.toLocaleLowerCase() === 'blockquote' || parentNodes[index1].nodeName.toLocaleLowerCase() === 'li') && this.IGNORE_PARENT_TAGS.indexOf(parentNodes[index1].childNodes[0].nodeName.toLocaleLowerCase()) > -1) && !(parentNodes[index1].childNodes.length === 1 && parentNodes[index1].childNodes[0].nodeName.toLocaleLowerCase() === 'p')) {\n          InsertMethods.Wrap(parentNodes[index1], docElement.createElement(this.defaultTag));\n        }\n\n        var childNodes = InsertMethods.unwrap(parentNodes[index1]);\n\n        if (childNodes.length === 1 && childNodes[0].parentNode.nodeName.toLocaleLowerCase() === 'p') {\n          InsertMethods.Wrap(parentNodes[index1], docElement.createElement(this.defaultTag));\n          InsertMethods.unwrap(parentNodes[index1]);\n        }\n\n        for (var index2 = 0; index2 < childNodes.length; index2++) {\n          if (this.NONVALID_TAGS.indexOf(childNodes[index2].nodeName.toLowerCase()) > -1) {\n            this.unWrap(docElement, [childNodes[index2]], nodeCutter, nodeSelection);\n          } else if (this.BLOCK_TAGS.indexOf(childNodes[index2].nodeName.toLocaleLowerCase()) > -1 && childNodes[index2].nodeName.toLocaleLowerCase() !== 'p') {\n            var blockNodes = this.removeParent([childNodes[index2]]);\n            this.unWrap(docElement, blockNodes, nodeCutter, nodeSelection);\n          } else if (this.BLOCK_TAGS.indexOf(childNodes[index2].nodeName.toLocaleLowerCase()) > -1 && childNodes[index2].parentNode.nodeName.toLocaleLowerCase() === childNodes[index2].nodeName.toLocaleLowerCase()) {\n            InsertMethods.unwrap(childNodes[index2]);\n          } else if (this.BLOCK_TAGS.indexOf(childNodes[index2].nodeName.toLocaleLowerCase()) > -1 && childNodes[index2].nodeName.toLocaleLowerCase() === 'p') {\n            InsertMethods.Wrap(childNodes[index2], docElement.createElement(this.defaultTag));\n            InsertMethods.unwrap(childNodes[index2]);\n          }\n        }\n      } else {\n        InsertMethods.Wrap(parentNodes[index1], docElement.createElement(this.defaultTag));\n        InsertMethods.unwrap(parentNodes[index1]);\n      }\n    }\n  };\n\n  ClearFormat.clearInlines = function (textNodes, nodes, range, nodeCutter, // eslint-disable-next-line\n  endNode) {\n    for (var index = 0; index < textNodes.length; index++) {\n      var currentInlineNode = textNodes[index];\n      var currentNode = void 0;\n\n      while (!this.domNode.isBlockNode(currentInlineNode)) {\n        currentNode = currentInlineNode;\n        currentInlineNode = currentInlineNode.parentElement;\n      }\n\n      if (currentNode && IsFormatted.inlineTags.indexOf(currentNode.nodeName.toLocaleLowerCase()) > -1) {\n        nodeCutter.GetSpliceNode(range, currentNode);\n        this.removeInlineParent(currentNode);\n      }\n    }\n  };\n\n  ClearFormat.removeInlineParent = function (textNodes) {\n    var nodes = InsertMethods.unwrap(textNodes);\n\n    for (var index = 0; index < nodes.length; index++) {\n      if (nodes[index].parentNode.childNodes.length === 1 && IsFormatted.inlineTags.indexOf(nodes[index].parentNode.nodeName.toLocaleLowerCase()) > -1) {\n        this.removeInlineParent(nodes[index].parentNode);\n      } else if (IsFormatted.inlineTags.indexOf(nodes[index].nodeName.toLocaleLowerCase()) > -1) {\n        this.removeInlineParent(nodes[index]);\n      }\n    }\n  };\n\n  ClearFormat.BLOCK_TAGS = ['address', 'article', 'aside', 'blockquote', 'details', 'dd', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'li', 'main', 'nav', 'noscript', 'ol', 'p', 'pre', 'section', 'ul'];\n  ClearFormat.NONVALID_PARENT_TAGS = ['thead', 'tbody', 'ul', 'ol', 'table', 'tfoot', 'tr'];\n  ClearFormat.IGNORE_PARENT_TAGS = ['ul', 'ol', 'table'];\n  ClearFormat.NONVALID_TAGS = ['thead', 'tbody', 'figcaption', 'td', 'tr', 'th', 'tfoot', 'figcaption', 'li'];\n  ClearFormat.defaultTag = 'p';\n  return ClearFormat;\n}();\n\nexport { ClearFormat };","map":{"version":3,"sources":["/Users/yasaman/Documents/moj_adminpanel/adminpanel/node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/clearformat.js"],"names":["closest","NodeSelection","NodeCutter","DOMNode","InsertMethods","IsFormatted","isIDevice","setEditFrameFocus","ClearFormat","clear","docElement","endNode","enterAction","selector","domNode","defaultTag","nodeSelection","nodeCutter","range","getRange","isCollapsed","collapsed","nodes","getInsertNodeCollection","save","preNode","nodeName","GetSpliceNode","length","setSelectionContents","i","lastText","lasNode","setSelectionText","nodeType","textContent","childNodes","exactNodes","getNodeCollection","cloneSelectNodes","slice","clearInlines","getSelectionNodes","reSelection","cloneParentNodes","clearBlocks","selectionNodes","getInsertNodes","startContainer","getNodeArray","startOffset","endContainer","endIndexNode","endOffset","restore","parentNodes","index","BLOCK_TAGS","indexOf","toLocaleLowerCase","push","parentNode","spliceParent","removeParent","unWrap","index1","len","index2","trim","index3","splice","parentIndex","nodeIndex","elementIndex","removeChild","count","NONVALID_TAGS","toLowerCase","NONVALID_PARENT_TAGS","unwrap","IGNORE_PARENT_TAGS","Wrap","createElement","blockNodes","textNodes","currentInlineNode","currentNode","isBlockNode","parentElement","inlineTags","removeInlineParent"],"mappings":"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","sourcesContent":["/**\n * `Clear Format` module is used to handle Clear Format.\n */\nimport { closest } from '@syncfusion/ej2-base';\nimport { NodeSelection } from './../../selection/index';\nimport { NodeCutter } from './nodecutter';\nimport { DOMNode } from './dom-node';\nimport { InsertMethods } from './insert-methods';\nimport { IsFormatted } from './isformatted';\nimport { isIDevice, setEditFrameFocus } from '../../common/util';\nvar ClearFormat = /** @class */ (function () {\n    function ClearFormat() {\n    }\n    /**\n     * clear method\n     *\n     * @param {Document} docElement - specifies the document element.\n     * @param {Node} endNode - specifies the end node\n     * @param {string} enterAction - specifies the enter key action\n     * @param {string} selector - specifies the string value\n     * @returns {void}\n     * @hidden\n\n     */\n    ClearFormat.clear = function (docElement, endNode, enterAction, selector) {\n        this.domNode = new DOMNode(endNode, docElement);\n        this.defaultTag = enterAction === 'P' ? this.defaultTag : 'div';\n        var nodeSelection = new NodeSelection();\n        var nodeCutter = new NodeCutter();\n        var range = nodeSelection.getRange(docElement);\n        var isCollapsed = range.collapsed;\n        var nodes = nodeSelection.getInsertNodeCollection(range);\n        var save = nodeSelection.save(range, docElement);\n        if (!isCollapsed) {\n            var preNode = void 0;\n            if (nodes[0].nodeName === 'BR' && closest(nodes[0], 'table')) {\n                preNode = nodeCutter.GetSpliceNode(range, closest(nodes[0], 'table'));\n            }\n            else {\n                preNode = nodeCutter.GetSpliceNode(range, nodes[nodes.length > 1 && nodes[0].nodeName === 'IMG' ? 1 : 0]);\n            }\n            if (nodes.length === 1) {\n                nodeSelection.setSelectionContents(docElement, preNode);\n                range = nodeSelection.getRange(docElement);\n            }\n            else {\n                var i = 1;\n                var lastText = nodes[nodes.length - i];\n                while (nodes.length <= i && nodes[nodes.length - i].nodeName === 'BR') {\n                    i++;\n                    lastText = nodes[nodes.length - i];\n                }\n                var lasNode = nodeCutter.GetSpliceNode(range, lastText);\n                nodeSelection.setSelectionText(docElement, preNode, lasNode, 0, (lasNode.nodeType === 3) ?\n                    lasNode.textContent.length : lasNode.childNodes.length);\n                range = nodeSelection.getRange(docElement);\n            }\n            var exactNodes = nodeSelection.getNodeCollection(range);\n            var cloneSelectNodes = exactNodes.slice();\n            this.clearInlines(nodeSelection.getSelectionNodes(cloneSelectNodes), cloneSelectNodes, nodeSelection.getRange(docElement), nodeCutter, endNode);\n            this.reSelection(docElement, save, exactNodes);\n            range = nodeSelection.getRange(docElement);\n            exactNodes = nodeSelection.getNodeCollection(range);\n            var cloneParentNodes = exactNodes.slice();\n            this.clearBlocks(docElement, cloneParentNodes, endNode, nodeCutter, nodeSelection);\n            if (isIDevice()) {\n                setEditFrameFocus(endNode, selector);\n            }\n            this.reSelection(docElement, save, exactNodes);\n        }\n    };\n    ClearFormat.reSelection = function (docElement, save, exactNodes) {\n        var selectionNodes = save.getInsertNodes(exactNodes);\n        save.startContainer = save.getNodeArray(selectionNodes[0], true, docElement);\n        save.startOffset = 0;\n        save.endContainer = save.getNodeArray(selectionNodes[selectionNodes.length - 1], false, docElement);\n        var endIndexNode = selectionNodes[selectionNodes.length - 1];\n        save.endOffset = (endIndexNode.nodeType === 3) ? endIndexNode.textContent.length\n            : endIndexNode.childNodes.length;\n        save.restore();\n    };\n    ClearFormat.clearBlocks = function (docElement, nodes, endNode, nodeCutter, nodeSelection) {\n        var parentNodes = [];\n        for (var index = 0; index < nodes.length; index++) {\n            if (this.BLOCK_TAGS.indexOf(nodes[index].nodeName.toLocaleLowerCase()) > -1\n                && parentNodes.indexOf(nodes[index]) === -1) {\n                parentNodes.push(nodes[index]);\n            }\n            else if ((this.BLOCK_TAGS.indexOf(nodes[index].parentNode.nodeName.toLocaleLowerCase()) > -1)\n                && parentNodes.indexOf(nodes[index].parentNode) === -1\n                && endNode !== nodes[index].parentNode) {\n                parentNodes.push(nodes[index].parentNode);\n            }\n        }\n        parentNodes = this.spliceParent(parentNodes, nodes)[0];\n        parentNodes = this.removeParent(parentNodes);\n        this.unWrap(docElement, parentNodes, nodeCutter, nodeSelection);\n    };\n    ClearFormat.spliceParent = function (parentNodes, nodes) {\n        for (var index1 = 0; index1 < parentNodes.length; index1++) {\n            var len = parentNodes[index1].childNodes.length;\n            for (var index2 = 0; index2 < len; index2++) {\n                if ((nodes.indexOf(parentNodes[index1].childNodes[index2]) > 0)\n                    && (parentNodes[index1].childNodes[index2].childNodes.length > 0)) {\n                    nodes = this.spliceParent([parentNodes[index1].childNodes[index2]], nodes)[1];\n                }\n                if ((nodes.indexOf(parentNodes[index1].childNodes[index2]) <= -1) &&\n                    (parentNodes[index1].childNodes[index2].textContent.trim() !== '')) {\n                    for (var index3 = 0; index3 < len; index3++) {\n                        if (nodes.indexOf(parentNodes[index1].childNodes[index3]) > -1) {\n                            nodes.splice(nodes.indexOf(parentNodes[index1].childNodes[index3]), 1);\n                        }\n                    }\n                    index2 = parentNodes[index1].childNodes.length;\n                    var parentIndex = parentNodes.indexOf(parentNodes[index1].parentNode);\n                    var nodeIndex = nodes.indexOf(parentNodes[index1].parentNode);\n                    if (parentIndex > -1) {\n                        parentNodes.splice(parentIndex, 1);\n                    }\n                    if (nodeIndex > -1) {\n                        nodes.splice(nodeIndex, 1);\n                    }\n                    var elementIndex = nodes.indexOf(parentNodes[index1]);\n                    if (elementIndex > -1) {\n                        nodes.splice(elementIndex, 1);\n                    }\n                    parentNodes.splice(index1, 1);\n                    index1--;\n                }\n            }\n        }\n        return [parentNodes, nodes];\n    };\n    ClearFormat.removeChild = function (parentNodes, parentNode) {\n        var count = parentNode.childNodes.length;\n        if (count > 0) {\n            for (var index = 0; index < count; index++) {\n                if (parentNodes.indexOf(parentNode.childNodes[index]) > -1) {\n                    parentNodes = this.removeChild(parentNodes, parentNode.childNodes[index]);\n                    parentNodes.splice(parentNodes.indexOf(parentNode.childNodes[index]), 1);\n                }\n            }\n        }\n        return parentNodes;\n    };\n    ClearFormat.removeParent = function (parentNodes) {\n        for (var index = 0; index < parentNodes.length; index++) {\n            if (parentNodes.indexOf(parentNodes[index].parentNode) > -1) {\n                parentNodes = this.removeChild(parentNodes, parentNodes[index]);\n                parentNodes.splice(index, 1);\n                index--;\n            }\n        }\n        return parentNodes;\n    };\n    ClearFormat.unWrap = function (docElement, parentNodes, nodeCutter, nodeSelection) {\n        for (var index1 = 0; index1 < parentNodes.length; index1++) {\n            if (this.NONVALID_TAGS.indexOf(parentNodes[index1].nodeName.toLowerCase()) > -1\n                && parentNodes[index1].parentNode\n                && this.NONVALID_PARENT_TAGS.indexOf(parentNodes[index1].parentNode.nodeName.toLowerCase()) > -1) {\n                nodeSelection.setSelectionText(docElement, parentNodes[index1], parentNodes[index1], 0, parentNodes[index1].childNodes.length);\n                InsertMethods.unwrap(nodeCutter.GetSpliceNode(nodeSelection.getRange(docElement), parentNodes[index1].parentNode));\n            }\n            if (parentNodes[index1].nodeName.toLocaleLowerCase() !== 'p') {\n                if (this.NONVALID_PARENT_TAGS.indexOf(parentNodes[index1].nodeName.toLowerCase()) < 0\n                    && parentNodes[index1].parentNode.nodeName.toLocaleLowerCase() !== 'p'\n                    && !((parentNodes[index1].nodeName.toLocaleLowerCase() === 'blockquote'\n                        || parentNodes[index1].nodeName.toLocaleLowerCase() === 'li')\n                        && this.IGNORE_PARENT_TAGS.indexOf(parentNodes[index1].childNodes[0].nodeName.toLocaleLowerCase()) > -1)\n                    && !(parentNodes[index1].childNodes.length === 1\n                        && parentNodes[index1].childNodes[0].nodeName.toLocaleLowerCase() === 'p')) {\n                    InsertMethods.Wrap(parentNodes[index1], docElement.createElement(this.defaultTag));\n                }\n                var childNodes = InsertMethods.unwrap(parentNodes[index1]);\n                if (childNodes.length === 1\n                    && childNodes[0].parentNode.nodeName.toLocaleLowerCase() === 'p') {\n                    InsertMethods.Wrap(parentNodes[index1], docElement.createElement(this.defaultTag));\n                    InsertMethods.unwrap(parentNodes[index1]);\n                }\n                for (var index2 = 0; index2 < childNodes.length; index2++) {\n                    if (this.NONVALID_TAGS.indexOf(childNodes[index2].nodeName.toLowerCase()) > -1) {\n                        this.unWrap(docElement, [childNodes[index2]], nodeCutter, nodeSelection);\n                    }\n                    else if (this.BLOCK_TAGS.indexOf(childNodes[index2].nodeName.toLocaleLowerCase()) > -1 &&\n                        childNodes[index2].nodeName.toLocaleLowerCase() !== 'p') {\n                        var blockNodes = this.removeParent([childNodes[index2]]);\n                        this.unWrap(docElement, blockNodes, nodeCutter, nodeSelection);\n                    }\n                    else if (this.BLOCK_TAGS.indexOf(childNodes[index2].nodeName.toLocaleLowerCase()) > -1 &&\n                        childNodes[index2].parentNode.nodeName.toLocaleLowerCase() === childNodes[index2].nodeName.toLocaleLowerCase()) {\n                        InsertMethods.unwrap(childNodes[index2]);\n                    }\n                    else if (this.BLOCK_TAGS.indexOf(childNodes[index2].nodeName.toLocaleLowerCase()) > -1 &&\n                        childNodes[index2].nodeName.toLocaleLowerCase() === 'p') {\n                        InsertMethods.Wrap(childNodes[index2], docElement.createElement(this.defaultTag));\n                        InsertMethods.unwrap(childNodes[index2]);\n                    }\n                }\n            }\n            else {\n                InsertMethods.Wrap(parentNodes[index1], docElement.createElement(this.defaultTag));\n                InsertMethods.unwrap(parentNodes[index1]);\n            }\n        }\n    };\n    ClearFormat.clearInlines = function (textNodes, nodes, range, nodeCutter, \n    // eslint-disable-next-line\n    endNode) {\n        for (var index = 0; index < textNodes.length; index++) {\n            var currentInlineNode = textNodes[index];\n            var currentNode = void 0;\n            while (!this.domNode.isBlockNode(currentInlineNode)) {\n                currentNode = currentInlineNode;\n                currentInlineNode = currentInlineNode.parentElement;\n            }\n            if (currentNode &&\n                IsFormatted.inlineTags.indexOf(currentNode.nodeName.toLocaleLowerCase()) > -1) {\n                nodeCutter.GetSpliceNode(range, currentNode);\n                this.removeInlineParent(currentNode);\n            }\n        }\n    };\n    ClearFormat.removeInlineParent = function (textNodes) {\n        var nodes = InsertMethods.unwrap(textNodes);\n        for (var index = 0; index < nodes.length; index++) {\n            if (nodes[index].parentNode.childNodes.length === 1\n                && IsFormatted.inlineTags.indexOf(nodes[index].parentNode.nodeName.toLocaleLowerCase()) > -1) {\n                this.removeInlineParent(nodes[index].parentNode);\n            }\n            else if (IsFormatted.inlineTags.indexOf(nodes[index].nodeName.toLocaleLowerCase()) > -1) {\n                this.removeInlineParent(nodes[index]);\n            }\n        }\n    };\n    ClearFormat.BLOCK_TAGS = ['address', 'article', 'aside', 'blockquote',\n        'details', 'dd', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer',\n        'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'li', 'main', 'nav',\n        'noscript', 'ol', 'p', 'pre', 'section', 'ul'];\n    ClearFormat.NONVALID_PARENT_TAGS = ['thead', 'tbody', 'ul', 'ol', 'table', 'tfoot', 'tr'];\n    ClearFormat.IGNORE_PARENT_TAGS = ['ul', 'ol', 'table'];\n    ClearFormat.NONVALID_TAGS = ['thead', 'tbody', 'figcaption', 'td', 'tr', 'th', 'tfoot', 'figcaption', 'li'];\n    ClearFormat.defaultTag = 'p';\n    return ClearFormat;\n}());\nexport { ClearFormat };\n"]},"metadata":{},"sourceType":"module"}