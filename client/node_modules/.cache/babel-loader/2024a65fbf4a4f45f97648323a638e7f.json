{"ast":null,"code":"import * as CONSTANT from './../base/constant';\n/**\n * Link internal component\n *\n * @hidden\n\n */\n\nvar MDLink =\n/** @class */\nfunction () {\n  /**\n   * Constructor for creating the Formats plugin\n   *\n   * @param {MarkdownParser} parent - specifies the parent element\n   * @hidden\n    */\n  function MDLink(parent) {\n    this.parent = parent;\n    this.selection = this.parent.markdownSelection;\n    this.addEventListener();\n  }\n\n  MDLink.prototype.addEventListener = function () {\n    this.parent.observer.on(CONSTANT.LINK_COMMAND, this.createLink, this);\n  };\n\n  MDLink.prototype.createLink = function (e) {\n    var textArea = this.parent.element;\n    textArea.focus();\n    var start = textArea.selectionStart;\n    var end = textArea.selectionEnd;\n    var text = e.subCommand === 'Image' ? this.selection.getSelectedText(textArea) : e.item.text;\n    var startOffset = e.subCommand === 'Image' ? start + 2 : start + 1;\n    var endOffset = e.subCommand === 'Image' ? end + 2 : end + 1;\n    text = e.subCommand === 'Image' ? '![' + text + '](' + e.item.url + ')' : '[' + text + '](' + e.item.url + ')';\n    textArea.value = textArea.value.substr(0, start) + text + textArea.value.substr(end, textArea.value.length);\n    this.parent.markdownSelection.setSelection(textArea, startOffset, endOffset);\n    this.restore(textArea, startOffset, endOffset, e);\n  };\n\n  MDLink.prototype.restore = function (textArea, start, end, event) {\n    this.selection.save(start, end);\n    this.selection.restore(textArea);\n\n    if (event && event.callBack) {\n      event.callBack({\n        requestType: event.subCommand,\n        selectedText: this.selection.getSelectedText(textArea),\n        editorMode: 'Markdown',\n        event: event.event\n      });\n    }\n  };\n\n  return MDLink;\n}();\n\nexport { MDLink };","map":{"version":3,"sources":["/Users/yasaman/Documents/moj_adminpanel/adminpanel/node_modules/@syncfusion/ej2-richtexteditor/src/markdown-parser/plugin/link.js"],"names":["CONSTANT","MDLink","parent","selection","markdownSelection","addEventListener","prototype","observer","on","LINK_COMMAND","createLink","e","textArea","element","focus","start","selectionStart","end","selectionEnd","text","subCommand","getSelectedText","item","startOffset","endOffset","url","value","substr","length","setSelection","restore","event","save","callBack","requestType","selectedText","editorMode"],"mappings":"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","sourcesContent":["import * as CONSTANT from './../base/constant';\n/**\n * Link internal component\n *\n * @hidden\n\n */\nvar MDLink = /** @class */ (function () {\n    /**\n     * Constructor for creating the Formats plugin\n     *\n     * @param {MarkdownParser} parent - specifies the parent element\n     * @hidden\n\n     */\n    function MDLink(parent) {\n        this.parent = parent;\n        this.selection = this.parent.markdownSelection;\n        this.addEventListener();\n    }\n    MDLink.prototype.addEventListener = function () {\n        this.parent.observer.on(CONSTANT.LINK_COMMAND, this.createLink, this);\n    };\n    MDLink.prototype.createLink = function (e) {\n        var textArea = this.parent.element;\n        textArea.focus();\n        var start = textArea.selectionStart;\n        var end = textArea.selectionEnd;\n        var text = (e.subCommand === 'Image') ? this.selection.getSelectedText(textArea) : e.item.text;\n        var startOffset = (e.subCommand === 'Image') ? (start + 2) : (start + 1);\n        var endOffset = (e.subCommand === 'Image') ? (end + 2) : (end + 1);\n        text = (e.subCommand === 'Image') ? '![' + text + '](' + e.item.url + ')' : '[' + text + '](' + e.item.url + ')';\n        textArea.value = textArea.value.substr(0, start)\n            + text + textArea.value.substr(end, textArea.value.length);\n        this.parent.markdownSelection.setSelection(textArea, startOffset, endOffset);\n        this.restore(textArea, startOffset, endOffset, e);\n    };\n    MDLink.prototype.restore = function (textArea, start, end, event) {\n        this.selection.save(start, end);\n        this.selection.restore(textArea);\n        if (event && event.callBack) {\n            event.callBack({\n                requestType: event.subCommand,\n                selectedText: this.selection.getSelectedText(textArea),\n                editorMode: 'Markdown',\n                event: event.event\n            });\n        }\n    };\n    return MDLink;\n}());\nexport { MDLink };\n"]},"metadata":{},"sourceType":"module"}