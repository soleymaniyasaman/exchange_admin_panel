{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module heading/headingui\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Model, createDropdown, addListToDropdown } from 'ckeditor5/src/ui';\nimport { Collection } from 'ckeditor5/src/utils';\nimport { getLocalizedOptions } from './utils';\nimport '../theme/heading.css';\n/**\n * The headings UI feature. It introduces the `headings` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class HeadingUI extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'HeadingUI';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const t = editor.t;\n    const options = getLocalizedOptions(editor);\n    const defaultTitle = t('Choose heading');\n    const dropdownTooltip = t('Heading'); // Register UI component.\n\n    editor.ui.componentFactory.add('heading', locale => {\n      const titles = {};\n      const itemDefinitions = new Collection();\n      const headingCommand = editor.commands.get('heading');\n      const paragraphCommand = editor.commands.get('paragraph');\n      const commands = [headingCommand];\n\n      for (const option of options) {\n        const def = {\n          type: 'button',\n          model: new Model({\n            label: option.title,\n            class: option.class,\n            withText: true\n          })\n        };\n\n        if (option.model === 'paragraph') {\n          def.model.bind('isOn').to(paragraphCommand, 'value');\n          def.model.set('commandName', 'paragraph');\n          commands.push(paragraphCommand);\n        } else {\n          def.model.bind('isOn').to(headingCommand, 'value', value => value === option.model);\n          def.model.set({\n            commandName: 'heading',\n            commandValue: option.model\n          });\n        } // Add the option to the collection.\n\n\n        itemDefinitions.add(def);\n        titles[option.model] = option.title;\n      }\n\n      const dropdownView = createDropdown(locale);\n      addListToDropdown(dropdownView, itemDefinitions);\n      dropdownView.buttonView.set({\n        isOn: false,\n        withText: true,\n        tooltip: dropdownTooltip\n      });\n      dropdownView.extendTemplate({\n        attributes: {\n          class: ['ck-heading-dropdown']\n        }\n      });\n      dropdownView.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled) => {\n        return areEnabled.some(isEnabled => isEnabled);\n      });\n      dropdownView.buttonView.bind('label').to(headingCommand, 'value', paragraphCommand, 'value', (value, para) => {\n        const whichModel = value || para && 'paragraph'; // If none of the commands is active, display default title.\n\n        return titles[whichModel] ? titles[whichModel] : defaultTitle;\n      }); // Execute command when an item from the dropdown is selected.\n\n      this.listenTo(dropdownView, 'execute', evt => {\n        editor.execute(evt.source.commandName, evt.source.commandValue ? {\n          value: evt.source.commandValue\n        } : undefined);\n        editor.editing.view.focus();\n      });\n      return dropdownView;\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/yasaman/Documents/moj_adminpanel/adminpanel/node_modules/@ckeditor/ckeditor5-heading/src/headingui.js"],"names":["Plugin","Model","createDropdown","addListToDropdown","Collection","getLocalizedOptions","HeadingUI","pluginName","init","editor","t","options","defaultTitle","dropdownTooltip","ui","componentFactory","add","locale","titles","itemDefinitions","headingCommand","commands","get","paragraphCommand","option","def","type","model","label","title","class","withText","bind","to","set","push","value","commandName","commandValue","dropdownView","buttonView","isOn","tooltip","extendTemplate","attributes","toMany","areEnabled","some","isEnabled","para","whichModel","listenTo","evt","execute","source","undefined","editing","view","focus"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module heading/headingui\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Model, createDropdown, addListToDropdown } from 'ckeditor5/src/ui';\nimport { Collection } from 'ckeditor5/src/utils';\n\nimport { getLocalizedOptions } from './utils';\n\nimport '../theme/heading.css';\n\n/**\n * The headings UI feature. It introduces the `headings` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class HeadingUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'HeadingUI';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tconst options = getLocalizedOptions( editor );\n\t\tconst defaultTitle = t( 'Choose heading' );\n\t\tconst dropdownTooltip = t( 'Heading' );\n\n\t\t// Register UI component.\n\t\teditor.ui.componentFactory.add( 'heading', locale => {\n\t\t\tconst titles = {};\n\t\t\tconst itemDefinitions = new Collection();\n\n\t\t\tconst headingCommand = editor.commands.get( 'heading' );\n\t\t\tconst paragraphCommand = editor.commands.get( 'paragraph' );\n\n\t\t\tconst commands = [ headingCommand ];\n\n\t\t\tfor ( const option of options ) {\n\t\t\t\tconst def = {\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: new Model( {\n\t\t\t\t\t\tlabel: option.title,\n\t\t\t\t\t\tclass: option.class,\n\t\t\t\t\t\twithText: true\n\t\t\t\t\t} )\n\t\t\t\t};\n\n\t\t\t\tif ( option.model === 'paragraph' ) {\n\t\t\t\t\tdef.model.bind( 'isOn' ).to( paragraphCommand, 'value' );\n\t\t\t\t\tdef.model.set( 'commandName', 'paragraph' );\n\t\t\t\t\tcommands.push( paragraphCommand );\n\t\t\t\t} else {\n\t\t\t\t\tdef.model.bind( 'isOn' ).to( headingCommand, 'value', value => value === option.model );\n\t\t\t\t\tdef.model.set( {\n\t\t\t\t\t\tcommandName: 'heading',\n\t\t\t\t\t\tcommandValue: option.model\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// Add the option to the collection.\n\t\t\t\titemDefinitions.add( def );\n\n\t\t\t\ttitles[ option.model ] = option.title;\n\t\t\t}\n\n\t\t\tconst dropdownView = createDropdown( locale );\n\t\t\taddListToDropdown( dropdownView, itemDefinitions );\n\n\t\t\tdropdownView.buttonView.set( {\n\t\t\t\tisOn: false,\n\t\t\t\twithText: true,\n\t\t\t\ttooltip: dropdownTooltip\n\t\t\t} );\n\n\t\t\tdropdownView.extendTemplate( {\n\t\t\t\tattributes: {\n\t\t\t\t\tclass: [\n\t\t\t\t\t\t'ck-heading-dropdown'\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tdropdownView.bind( 'isEnabled' ).toMany( commands, 'isEnabled', ( ...areEnabled ) => {\n\t\t\t\treturn areEnabled.some( isEnabled => isEnabled );\n\t\t\t} );\n\n\t\t\tdropdownView.buttonView.bind( 'label' ).to( headingCommand, 'value', paragraphCommand, 'value', ( value, para ) => {\n\t\t\t\tconst whichModel = value || para && 'paragraph';\n\t\t\t\t// If none of the commands is active, display default title.\n\t\t\t\treturn titles[ whichModel ] ? titles[ whichModel ] : defaultTitle;\n\t\t\t} );\n\n\t\t\t// Execute command when an item from the dropdown is selected.\n\t\t\tthis.listenTo( dropdownView, 'execute', evt => {\n\t\t\t\teditor.execute( evt.source.commandName, evt.source.commandValue ? { value: evt.source.commandValue } : undefined );\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\treturn dropdownView;\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}