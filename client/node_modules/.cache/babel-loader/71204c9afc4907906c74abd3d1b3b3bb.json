{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module heading/headingediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Paragraph } from 'ckeditor5/src/paragraph';\nimport { priorities } from 'ckeditor5/src/utils';\nimport HeadingCommand from './headingcommand';\nconst defaultModelElement = 'paragraph';\n/**\n * The headings engine feature. It handles switching between block formats &ndash; headings and paragraph.\n * This class represents the engine part of the heading feature. See also {@link module:heading/heading~Heading}.\n * It introduces `heading1`-`headingN` commands which allow to convert paragraphs into headings.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class HeadingEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'HeadingEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    editor.config.define('heading', {\n      options: [{\n        model: 'paragraph',\n        title: 'Paragraph',\n        class: 'ck-heading_paragraph'\n      }, {\n        model: 'heading1',\n        view: 'h2',\n        title: 'Heading 1',\n        class: 'ck-heading_heading1'\n      }, {\n        model: 'heading2',\n        view: 'h3',\n        title: 'Heading 2',\n        class: 'ck-heading_heading2'\n      }, {\n        model: 'heading3',\n        view: 'h4',\n        title: 'Heading 3',\n        class: 'ck-heading_heading3'\n      }]\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return [Paragraph];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const options = editor.config.get('heading.options');\n    const modelElements = [];\n\n    for (const option of options) {\n      // Skip paragraph - it is defined in required Paragraph feature.\n      if (option.model !== defaultModelElement) {\n        // Schema.\n        editor.model.schema.register(option.model, {\n          inheritAllFrom: '$block'\n        });\n        editor.conversion.elementToElement(option);\n        modelElements.push(option.model);\n      }\n    }\n\n    this._addDefaultH1Conversion(editor); // Register the heading command for this option.\n\n\n    editor.commands.add('heading', new HeadingCommand(editor, modelElements));\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  afterInit() {\n    // If the enter command is added to the editor, alter its behavior.\n    // Enter at the end of a heading element should create a paragraph.\n    const editor = this.editor;\n    const enterCommand = editor.commands.get('enter');\n    const options = editor.config.get('heading.options');\n\n    if (enterCommand) {\n      this.listenTo(enterCommand, 'afterExecute', (evt, data) => {\n        const positionParent = editor.model.document.selection.getFirstPosition().parent;\n        const isHeading = options.some(option => positionParent.is('element', option.model));\n\n        if (isHeading && !positionParent.is('element', defaultModelElement) && positionParent.childCount === 0) {\n          data.writer.rename(positionParent, defaultModelElement);\n        }\n      });\n    }\n  }\n  /**\n   * Adds default conversion for `h1` -> `heading1` with a low priority.\n   *\n   * @private\n   * @param {module:core/editor/editor~Editor} editor Editor instance on which to add the `h1` conversion.\n   */\n\n\n  _addDefaultH1Conversion(editor) {\n    editor.conversion.for('upcast').elementToElement({\n      model: 'heading1',\n      view: 'h1',\n      // With a `low` priority, `paragraph` plugin autoparagraphing mechanism is executed. Make sure\n      // this listener is called before it. If not, `h1` will be transformed into a paragraph.\n      converterPriority: priorities.get('low') + 1\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/yasaman/Documents/moj_adminpanel/adminpanel/node_modules/@ckeditor/ckeditor5-heading/src/headingediting.js"],"names":["Plugin","Paragraph","priorities","HeadingCommand","defaultModelElement","HeadingEditing","pluginName","constructor","editor","config","define","options","model","title","class","view","requires","init","get","modelElements","option","schema","register","inheritAllFrom","conversion","elementToElement","push","_addDefaultH1Conversion","commands","add","afterInit","enterCommand","listenTo","evt","data","positionParent","document","selection","getFirstPosition","parent","isHeading","some","is","childCount","writer","rename","for","converterPriority"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module heading/headingediting\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\nimport { Paragraph } from 'ckeditor5/src/paragraph';\nimport { priorities } from 'ckeditor5/src/utils';\n\nimport HeadingCommand from './headingcommand';\n\nconst defaultModelElement = 'paragraph';\n\n/**\n * The headings engine feature. It handles switching between block formats &ndash; headings and paragraph.\n * This class represents the engine part of the heading feature. See also {@link module:heading/heading~Heading}.\n * It introduces `heading1`-`headingN` commands which allow to convert paragraphs into headings.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class HeadingEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'HeadingEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'heading', {\n\t\t\toptions: [\n\t\t\t\t{ model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },\n\t\t\t\t{ model: 'heading1', view: 'h2', title: 'Heading 1', class: 'ck-heading_heading1' },\n\t\t\t\t{ model: 'heading2', view: 'h3', title: 'Heading 2', class: 'ck-heading_heading2' },\n\t\t\t\t{ model: 'heading3', view: 'h4', title: 'Heading 3', class: 'ck-heading_heading3' }\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Paragraph ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst options = editor.config.get( 'heading.options' );\n\n\t\tconst modelElements = [];\n\n\t\tfor ( const option of options ) {\n\t\t\t// Skip paragraph - it is defined in required Paragraph feature.\n\t\t\tif ( option.model !== defaultModelElement ) {\n\t\t\t\t// Schema.\n\t\t\t\teditor.model.schema.register( option.model, {\n\t\t\t\t\tinheritAllFrom: '$block'\n\t\t\t\t} );\n\n\t\t\t\teditor.conversion.elementToElement( option );\n\n\t\t\t\tmodelElements.push( option.model );\n\t\t\t}\n\t\t}\n\n\t\tthis._addDefaultH1Conversion( editor );\n\n\t\t// Register the heading command for this option.\n\t\teditor.commands.add( 'heading', new HeadingCommand( editor, modelElements ) );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\t// If the enter command is added to the editor, alter its behavior.\n\t\t// Enter at the end of a heading element should create a paragraph.\n\t\tconst editor = this.editor;\n\t\tconst enterCommand = editor.commands.get( 'enter' );\n\t\tconst options = editor.config.get( 'heading.options' );\n\n\t\tif ( enterCommand ) {\n\t\t\tthis.listenTo( enterCommand, 'afterExecute', ( evt, data ) => {\n\t\t\t\tconst positionParent = editor.model.document.selection.getFirstPosition().parent;\n\t\t\t\tconst isHeading = options.some( option => positionParent.is( 'element', option.model ) );\n\n\t\t\t\tif ( isHeading && !positionParent.is( 'element', defaultModelElement ) && positionParent.childCount === 0 ) {\n\t\t\t\t\tdata.writer.rename( positionParent, defaultModelElement );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Adds default conversion for `h1` -> `heading1` with a low priority.\n\t *\n\t * @private\n\t * @param {module:core/editor/editor~Editor} editor Editor instance on which to add the `h1` conversion.\n\t */\n\t_addDefaultH1Conversion( editor ) {\n\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t\t\tmodel: 'heading1',\n\t\t\tview: 'h1',\n\t\t\t// With a `low` priority, `paragraph` plugin autoparagraphing mechanism is executed. Make sure\n\t\t\t// this listener is called before it. If not, `h1` will be transformed into a paragraph.\n\t\t\tconverterPriority: priorities.get( 'low' ) + 1\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}