{"ast":null,"code":"import { Popup } from '@syncfusion/ej2-popups';\nimport { CLS_QUICK_POP } from '../base/classes';\nimport * as events from '../base/constant';\n/**\n * `Popup renderer` module is used to render popup in RichTextEditor.\n *\n * @hidden\n\n */\n\nvar PopupRenderer =\n/** @class */\nfunction () {\n  /**\n   * Constructor for popup renderer module\n   *\n   * @param {IRichTextEditor} parent - specifies the parent.\n   */\n  function PopupRenderer(parent) {\n    this.parent = parent;\n  }\n\n  PopupRenderer.prototype.quickToolbarOpen = function () {\n    var args = this.popupObj;\n    this.parent.trigger(events.quickToolbarOpen, args);\n  };\n  /**\n   * renderPopup method\n   *\n   * @param {BaseQuickToolbar} args - specifies  the arguments.\n   * @returns {void}\n   * @hidden\n    */\n\n\n  PopupRenderer.prototype.renderPopup = function (args) {\n    this.setPanel(args.element);\n    this.renderPanel();\n    args.popupObj = new Popup(args.element, {\n      targetType: 'relative',\n      relateTo: this.parent.element,\n      open: this.quickToolbarOpen.bind(this)\n    });\n    this.popupObj = args.popupObj;\n    args.popupObj.hide();\n  };\n  /**\n   * The function is used to add popup class in Quick Toolbar\n   *\n   * @returns {void}\n   * @hidden\n    */\n\n\n  PopupRenderer.prototype.renderPanel = function () {\n    this.getPanel().classList.add(CLS_QUICK_POP);\n  };\n  /**\n   * Get the popup element of RichTextEditor\n   *\n   * @returns {Element} - specifies the element\n   * @hidden\n    */\n\n\n  PopupRenderer.prototype.getPanel = function () {\n    return this.popupPanel;\n  };\n  /**\n   * Set the popup element of RichTextEditor\n   *\n   * @returns {void}\n   * @param  {Element} panel - specifies the element\n   * @hidden\n    */\n\n\n  PopupRenderer.prototype.setPanel = function (panel) {\n    this.popupPanel = panel;\n  };\n\n  return PopupRenderer;\n}();\n\nexport { PopupRenderer };","map":{"version":3,"sources":["/Users/yasaman/Documents/moj_adminpanel/adminpanel/node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/renderer/popup-renderer.js"],"names":["Popup","CLS_QUICK_POP","events","PopupRenderer","parent","prototype","quickToolbarOpen","args","popupObj","trigger","renderPopup","setPanel","element","renderPanel","targetType","relateTo","open","bind","hide","getPanel","classList","add","popupPanel","panel"],"mappings":"AAAA,SAASA,KAAT,QAAsB,wBAAtB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAO,KAAKC,MAAZ,MAAwB,kBAAxB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,aAAa;AAAG;AAAe,YAAY;AAC3C;AACJ;AACA;AACA;AACA;AACI,WAASA,aAAT,CAAuBC,MAAvB,EAA+B;AAC3B,SAAKA,MAAL,GAAcA,MAAd;AACH;;AACDD,EAAAA,aAAa,CAACE,SAAd,CAAwBC,gBAAxB,GAA2C,YAAY;AACnD,QAAIC,IAAI,GAAG,KAAKC,QAAhB;AACA,SAAKJ,MAAL,CAAYK,OAAZ,CAAoBP,MAAM,CAACI,gBAA3B,EAA6CC,IAA7C;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AAEIJ,EAAAA,aAAa,CAACE,SAAd,CAAwBK,WAAxB,GAAsC,UAAUH,IAAV,EAAgB;AAClD,SAAKI,QAAL,CAAcJ,IAAI,CAACK,OAAnB;AACA,SAAKC,WAAL;AACAN,IAAAA,IAAI,CAACC,QAAL,GAAgB,IAAIR,KAAJ,CAAUO,IAAI,CAACK,OAAf,EAAwB;AACpCE,MAAAA,UAAU,EAAE,UADwB;AAEpCC,MAAAA,QAAQ,EAAE,KAAKX,MAAL,CAAYQ,OAFc;AAGpCI,MAAAA,IAAI,EAAE,KAAKV,gBAAL,CAAsBW,IAAtB,CAA2B,IAA3B;AAH8B,KAAxB,CAAhB;AAKA,SAAKT,QAAL,GAAgBD,IAAI,CAACC,QAArB;AACAD,IAAAA,IAAI,CAACC,QAAL,CAAcU,IAAd;AACH,GAVD;AAWA;AACJ;AACA;AACA;AACA;AACA;;;AAEIf,EAAAA,aAAa,CAACE,SAAd,CAAwBQ,WAAxB,GAAsC,YAAY;AAC9C,SAAKM,QAAL,GAAgBC,SAAhB,CAA0BC,GAA1B,CAA8BpB,aAA9B;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AAEIE,EAAAA,aAAa,CAACE,SAAd,CAAwBc,QAAxB,GAAmC,YAAY;AAC3C,WAAO,KAAKG,UAAZ;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AAEInB,EAAAA,aAAa,CAACE,SAAd,CAAwBM,QAAxB,GAAmC,UAAUY,KAAV,EAAiB;AAChD,SAAKD,UAAL,GAAkBC,KAAlB;AACH,GAFD;;AAGA,SAAOpB,aAAP;AACH,CAhEkC,EAAnC;;AAiEA,SAASA,aAAT","sourcesContent":["import { Popup } from '@syncfusion/ej2-popups';\nimport { CLS_QUICK_POP } from '../base/classes';\nimport * as events from '../base/constant';\n/**\n * `Popup renderer` module is used to render popup in RichTextEditor.\n *\n * @hidden\n\n */\nvar PopupRenderer = /** @class */ (function () {\n    /**\n     * Constructor for popup renderer module\n     *\n     * @param {IRichTextEditor} parent - specifies the parent.\n     */\n    function PopupRenderer(parent) {\n        this.parent = parent;\n    }\n    PopupRenderer.prototype.quickToolbarOpen = function () {\n        var args = this.popupObj;\n        this.parent.trigger(events.quickToolbarOpen, args);\n    };\n    /**\n     * renderPopup method\n     *\n     * @param {BaseQuickToolbar} args - specifies  the arguments.\n     * @returns {void}\n     * @hidden\n\n     */\n    PopupRenderer.prototype.renderPopup = function (args) {\n        this.setPanel(args.element);\n        this.renderPanel();\n        args.popupObj = new Popup(args.element, {\n            targetType: 'relative',\n            relateTo: this.parent.element,\n            open: this.quickToolbarOpen.bind(this)\n        });\n        this.popupObj = args.popupObj;\n        args.popupObj.hide();\n    };\n    /**\n     * The function is used to add popup class in Quick Toolbar\n     *\n     * @returns {void}\n     * @hidden\n\n     */\n    PopupRenderer.prototype.renderPanel = function () {\n        this.getPanel().classList.add(CLS_QUICK_POP);\n    };\n    /**\n     * Get the popup element of RichTextEditor\n     *\n     * @returns {Element} - specifies the element\n     * @hidden\n\n     */\n    PopupRenderer.prototype.getPanel = function () {\n        return this.popupPanel;\n    };\n    /**\n     * Set the popup element of RichTextEditor\n     *\n     * @returns {void}\n     * @param  {Element} panel - specifies the element\n     * @hidden\n\n     */\n    PopupRenderer.prototype.setPanel = function (panel) {\n        this.popupPanel = panel;\n    };\n    return PopupRenderer;\n}());\nexport { PopupRenderer };\n"]},"metadata":{},"sourceType":"module"}