{"ast":null,"code":"import { remove } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, extend } from '@syncfusion/ej2-base';\nimport { doesImplementInterface, setStyleAndAttributes, appendChildren, extendObjWithFn } from '../base/util';\nimport { createCheckBox } from '@syncfusion/ej2-buttons';\nimport { foreignKeyData } from '../base/constant';\nimport { CellType } from '../base/enum';\nimport * as literals from '../base/string-literals';\n/**\n * CellRenderer class which responsible for building cell content.\n *\n * @hidden\n */\n\nvar CellRenderer =\n/** @class */\nfunction () {\n  function CellRenderer(parent, locator) {\n    this.localizer = locator.getService('localization');\n    this.formatter = locator.getService('valueFormatter');\n    this.parent = parent;\n    this.element = this.parent.createElement('TD', {\n      className: literals.rowCell,\n      attrs: {\n        role: 'gridcell',\n        tabindex: '-1'\n      }\n    });\n    this.rowChkBox = this.parent.createElement('input', {\n      className: 'e-checkselect',\n      attrs: {\n        'type': 'checkbox'\n      }\n    });\n  }\n  /**\n   * Function to return the wrapper for the TD content\n   *\n   * @returns {string | Element} returns the string\n   */\n\n\n  CellRenderer.prototype.getGui = function () {\n    return '';\n  };\n  /**\n   * Function to format the cell value.\n   *\n   * @param  {Column} column - specifies the column\n   * @param  {Object} value - specifies the value\n   * @param  {Object} data - specifies the data\n   * @returns {string} returns the format\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  CellRenderer.prototype.format = function (column, value, data) {\n    if (!isNullOrUndefined(column.format)) {\n      if (column.type === 'number' && isNaN(parseInt(value, 10))) {\n        value = null;\n      }\n\n      value = this.formatter.toView(value, column.getFormatter());\n    }\n\n    return isNullOrUndefined(value) ? '' : value.toString();\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  CellRenderer.prototype.evaluate = function (node, cell, data, attributes, fData, isEdit) {\n    var _a;\n\n    var result;\n\n    if (cell.column.template) {\n      var isReactCompiler = this.parent.isReact && typeof cell.column.template !== 'string';\n      var literals_1 = ['index'];\n      var dummyData = extendObjWithFn({}, data, (_a = {}, _a[foreignKeyData] = fData, _a.column = cell.column, _a));\n      var templateID = this.parent.element.id + cell.column.uid;\n      var str = 'isStringTemplate';\n\n      if (isReactCompiler) {\n        var copied = {\n          'index': attributes[literals_1[0]]\n        };\n        cell.column.getColumnTemplate()(extend(copied, dummyData), this.parent, 'columnTemplate', templateID, this.parent[str], null, node);\n        this.parent.renderTemplates();\n      } else {\n        result = cell.column.getColumnTemplate()(extend({\n          'index': attributes[literals_1[0]]\n        }, dummyData), this.parent, 'template', templateID, this.parent[str]);\n      }\n\n      if (!isReactCompiler) {\n        appendChildren(node, result);\n      }\n\n      this.parent.notify('template-result', {\n        template: result\n      });\n      result = null;\n      node.setAttribute('aria-label', node.innerText + ' is template cell' + ' column header ' + cell.column.headerText);\n      return false;\n    }\n\n    return true;\n  };\n  /**\n   * Function to invoke the custom formatter available in the column object.\n   *\n   * @param  {Column} column - specifies the column\n   * @param  {Object} value - specifies the value\n   * @param  {Object} data - specifies the data\n   * @returns {Object} returns the object\n   */\n\n\n  CellRenderer.prototype.invokeFormatter = function (column, value, data) {\n    if (!isNullOrUndefined(column.formatter)) {\n      if (doesImplementInterface(column.formatter, 'getValue')) {\n        var formatter = column.formatter;\n        value = new formatter().getValue(column, data);\n      } else if (typeof column.formatter === 'function') {\n        value = column.formatter(column, data);\n      } else {\n        value = column.formatter.getValue(column, data);\n      }\n    }\n\n    return value;\n  };\n  /**\n   * Function to render the cell content based on Column object.\n   *\n   * @param {Cell<Column>} cell - specifies the cell\n   * @param {Object} data - specifies the data\n   * @param {Object} attributes - specifies the attributes\n   * @param {boolean} isExpand - specifies the boolean for expand\n   * @param {boolean} isEdit - specifies the boolean for edit\n   * @returns {Element} returns the element\n   */\n\n\n  CellRenderer.prototype.render = function (cell, data, attributes, isExpand, isEdit) {\n    return this.refreshCell(cell, data, attributes, isEdit);\n  };\n  /**\n   * Function to refresh the cell content based on Column object.\n   *\n   * @param {Element} td - specifies the element\n   * @param {Cell<Column>} cell - specifies the cell\n   * @param {Object} data - specifies the data\n   * @param {Object} attributes - specifies the attribute\n   * @returns {void}\n   */\n\n\n  CellRenderer.prototype.refreshTD = function (td, cell, data, attributes) {\n    var isEdit = this.parent.editSettings.mode === 'Batch' && td.classList.contains('e-editedbatchcell');\n\n    if (this.parent.isReact) {\n      td.innerHTML = '';\n      var cellIndex = td.cellIndex;\n      var parentRow = td.parentElement;\n      remove(td);\n      var newTD = this.refreshCell(cell, data, attributes, isEdit);\n      this.cloneAttributes(newTD, td);\n\n      if (parentRow.cells.length !== cellIndex - 1) {\n        parentRow.insertBefore(newTD, parentRow.cells[cellIndex]);\n      } else {\n        parentRow.appendChild(newTD);\n      }\n    } else {\n      var node = this.refreshCell(cell, data, attributes, isEdit);\n      td.innerHTML = '';\n      td.setAttribute('aria-label', node.getAttribute('aria-label'));\n      var elements = [].slice.call(node.childNodes);\n\n      for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n        var elem = elements_1[_i];\n        td.appendChild(elem);\n      }\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  CellRenderer.prototype.cloneAttributes = function (target, source) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var attrs = source.attributes; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    var i = attrs.length; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    var attr;\n\n    while (i--) {\n      attr = attrs[i];\n      target.setAttribute(attr.name, attr.value);\n    }\n  };\n\n  CellRenderer.prototype.refreshCell = function (cell, data, attributes, isEdit) {\n    var _a;\n\n    var node = this.element.cloneNode();\n    var column = cell.column;\n    var fData;\n\n    if (cell.isForeignKey) {\n      fData = cell.foreignKeyData[0] || (_a = {}, _a[column.foreignKeyValue] = column.format ? null : '', _a);\n    } //Prepare innerHtml\n\n\n    var innerHtml = this.getGui();\n    var value = cell.isForeignKey ? this.getValue(column.foreignKeyValue, fData, column) : this.getValue(column.field, data, column);\n\n    if ((column.type === 'date' || column.type === 'datetime') && !isNullOrUndefined(value)) {\n      value = new Date(value);\n    }\n\n    value = this.format(column, value, data);\n    innerHtml = value.toString();\n\n    if (column.type === 'boolean' && !column.displayAsCheckBox) {\n      var localeStr = value !== 'true' && value !== 'false' ? null : value === 'true' ? 'True' : 'False';\n      innerHtml = localeStr ? this.localizer.getConstant(localeStr) : innerHtml;\n    }\n\n    var fromFormatter = this.invokeFormatter(column, value, data);\n    innerHtml = !isNullOrUndefined(column.formatter) ? isNullOrUndefined(fromFormatter) ? '' : fromFormatter.toString() : innerHtml;\n    node.setAttribute('aria-label', innerHtml + ' column header ' + cell.column.headerText);\n\n    if (this.evaluate(node, cell, data, attributes, fData, isEdit) && column.type !== 'checkbox') {\n      this.appendHtml(node, innerHtml, column.getDomSetter ? column.getDomSetter() : 'innerHTML');\n    } else if (column.type === 'checkbox') {\n      node.classList.add(literals.gridChkBox);\n      node.setAttribute('aria-label', 'checkbox');\n\n      if (this.parent.selectionSettings.persistSelection) {\n        value = value === 'true';\n      } else {\n        value = false;\n      }\n\n      var checkWrap = createCheckBox(this.parent.createElement, false, {\n        checked: value,\n        label: ' '\n      });\n      checkWrap.insertBefore(this.rowChkBox.cloneNode(), checkWrap.firstChild);\n      node.appendChild(checkWrap);\n    }\n\n    if (this.parent.checkAllRows === 'Check' && this.parent.enableVirtualization) {\n      cell.isSelected = true;\n    }\n\n    this.setAttributes(node, cell, attributes);\n\n    if (column.type === 'boolean' && column.displayAsCheckBox) {\n      var checked = isNaN(parseInt(value.toString(), 10)) ? value === 'true' : parseInt(value.toString(), 10) > 0;\n      var checkWrap = createCheckBox(this.parent.createElement, false, {\n        checked: checked,\n        label: ' '\n      });\n      node.innerHTML = '';\n      checkWrap.classList.add('e-checkbox-disabled');\n      node.appendChild(checkWrap);\n      node.setAttribute('aria-label', checked + ' column header ' + cell.column.headerText);\n    }\n\n    return node;\n  };\n  /**\n   * Function to specifies how the result content to be placed in the cell.\n   *\n   * @param {Element} node - specifies the node\n   * @param {string|Element} innerHtml - specifies the innerHTML\n   * @param {string} property - specifies the element\n   * @returns {Element} returns the element\n   */\n\n\n  CellRenderer.prototype.appendHtml = function (node, innerHtml, property) {\n    if (property === void 0) {\n      property = 'innerHTML';\n    }\n\n    node[property] = innerHtml;\n    return node;\n  };\n  /**\n   * @param {HTMLElement} node - specifies the node\n   * @param {cell<Column>} cell - specifies the cell\n   * @param {Object} attributes - specifies the attributes\n   * @returns {void}\n   * @hidden\n   */\n\n\n  CellRenderer.prototype.setAttributes = function (node, cell, attributes) {\n    var column = cell.column;\n    this.buildAttributeFromCell(node, cell, column.type === 'checkbox');\n    setStyleAndAttributes(node, attributes);\n    setStyleAndAttributes(node, cell.attributes);\n\n    if (column.customAttributes) {\n      setStyleAndAttributes(node, column.customAttributes);\n    }\n\n    if (this.parent.rowRenderingMode === 'Vertical') {\n      setStyleAndAttributes(node, {\n        'data-cell': column.headerText\n      });\n    }\n\n    if (column.textAlign) {\n      node.style.textAlign = column.textAlign;\n    }\n\n    if (column.clipMode === 'Clip' || !column.clipMode && this.parent.clipMode === 'Clip') {\n      node.classList.add('e-gridclip');\n    } else if (column.clipMode === 'EllipsisWithTooltip' || !column.clipMode && this.parent.clipMode === 'EllipsisWithTooltip') {\n      if (column.type !== 'checkbox') {\n        node.classList.add('e-ellipsistooltip');\n      }\n    }\n  };\n\n  CellRenderer.prototype.buildAttributeFromCell = function (node, cell, isCheckBoxType) {\n    var attr = {};\n    var prop = {\n      'colindex': literals.ariaColIndex\n    };\n    var classes = [];\n\n    if (cell.colSpan) {\n      attr.colSpan = cell.colSpan;\n    }\n\n    if (cell.rowSpan) {\n      attr.rowSpan = cell.rowSpan;\n    }\n\n    if (cell.isTemplate) {\n      classes.push('e-templatecell');\n    }\n\n    if (cell.isSelected) {\n      classes.push.apply(classes, ['e-selectionbackground', 'e-active']);\n\n      if (isCheckBoxType) {\n        node.querySelector('.e-frame').classList.add('e-check');\n      }\n    }\n\n    if (cell.isColumnSelected) {\n      classes.push.apply(classes, ['e-columnselection']);\n    }\n\n    if (cell.cellType === CellType.Header) {\n      attr[prop.colindex] = cell.colIndex;\n    } else if (!isNullOrUndefined(cell.index)) {\n      attr[prop.colindex] = cell.index;\n    }\n\n    if (!cell.visible) {\n      classes.push('e-hide');\n    }\n\n    attr.class = classes;\n    setStyleAndAttributes(node, attr);\n  };\n\n  CellRenderer.prototype.getValue = function (field, data, column) {\n    return column.valueAccessor(field, data, column);\n  };\n\n  return CellRenderer;\n}();\n\nexport { CellRenderer };","map":{"version":3,"sources":["/Users/yasaman/Documents/moj_adminpanel/adminpanel/node_modules/@syncfusion/ej2-grids/src/grid/renderer/cell-renderer.js"],"names":["remove","isNullOrUndefined","extend","doesImplementInterface","setStyleAndAttributes","appendChildren","extendObjWithFn","createCheckBox","foreignKeyData","CellType","literals","CellRenderer","parent","locator","localizer","getService","formatter","element","createElement","className","rowCell","attrs","role","tabindex","rowChkBox","prototype","getGui","format","column","value","data","type","isNaN","parseInt","toView","getFormatter","toString","evaluate","node","cell","attributes","fData","isEdit","_a","result","template","isReactCompiler","isReact","literals_1","dummyData","templateID","id","uid","str","copied","getColumnTemplate","renderTemplates","notify","setAttribute","innerText","headerText","invokeFormatter","getValue","render","isExpand","refreshCell","refreshTD","td","editSettings","mode","classList","contains","innerHTML","cellIndex","parentRow","parentElement","newTD","cloneAttributes","cells","length","insertBefore","appendChild","getAttribute","elements","slice","call","childNodes","_i","elements_1","elem","target","source","i","attr","name","cloneNode","isForeignKey","foreignKeyValue","innerHtml","field","Date","displayAsCheckBox","localeStr","getConstant","fromFormatter","appendHtml","getDomSetter","add","gridChkBox","selectionSettings","persistSelection","checkWrap","checked","label","firstChild","checkAllRows","enableVirtualization","isSelected","setAttributes","property","buildAttributeFromCell","customAttributes","rowRenderingMode","textAlign","style","clipMode","isCheckBoxType","prop","ariaColIndex","classes","colSpan","rowSpan","isTemplate","push","apply","querySelector","isColumnSelected","cellType","Header","colindex","colIndex","index","visible","class","valueAccessor"],"mappings":"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","sourcesContent":["import { remove } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, extend } from '@syncfusion/ej2-base';\nimport { doesImplementInterface, setStyleAndAttributes, appendChildren, extendObjWithFn } from '../base/util';\nimport { createCheckBox } from '@syncfusion/ej2-buttons';\nimport { foreignKeyData } from '../base/constant';\nimport { CellType } from '../base/enum';\nimport * as literals from '../base/string-literals';\n/**\n * CellRenderer class which responsible for building cell content.\n *\n * @hidden\n */\nvar CellRenderer = /** @class */ (function () {\n    function CellRenderer(parent, locator) {\n        this.localizer = locator.getService('localization');\n        this.formatter = locator.getService('valueFormatter');\n        this.parent = parent;\n        this.element = this.parent.createElement('TD', { className: literals.rowCell, attrs: { role: 'gridcell', tabindex: '-1' } });\n        this.rowChkBox = this.parent.createElement('input', { className: 'e-checkselect', attrs: { 'type': 'checkbox' } });\n    }\n    /**\n     * Function to return the wrapper for the TD content\n     *\n     * @returns {string | Element} returns the string\n     */\n    CellRenderer.prototype.getGui = function () {\n        return '';\n    };\n    /**\n     * Function to format the cell value.\n     *\n     * @param  {Column} column - specifies the column\n     * @param  {Object} value - specifies the value\n     * @param  {Object} data - specifies the data\n     * @returns {string} returns the format\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    CellRenderer.prototype.format = function (column, value, data) {\n        if (!isNullOrUndefined(column.format)) {\n            if (column.type === 'number' && isNaN(parseInt(value, 10))) {\n                value = null;\n            }\n            value = this.formatter.toView(value, column.getFormatter());\n        }\n        return isNullOrUndefined(value) ? '' : value.toString();\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    CellRenderer.prototype.evaluate = function (node, cell, data, attributes, fData, isEdit) {\n        var _a;\n        var result;\n        if (cell.column.template) {\n            var isReactCompiler = this.parent.isReact && typeof (cell.column.template) !== 'string';\n            var literals_1 = ['index'];\n            var dummyData = extendObjWithFn({}, data, (_a = {}, _a[foreignKeyData] = fData, _a.column = cell.column, _a));\n            var templateID = this.parent.element.id + cell.column.uid;\n            var str = 'isStringTemplate';\n            if (isReactCompiler) {\n                var copied = { 'index': attributes[literals_1[0]] };\n                cell.column.getColumnTemplate()(extend(copied, dummyData), this.parent, 'columnTemplate', templateID, this.parent[str], null, node);\n                this.parent.renderTemplates();\n            }\n            else {\n                result = cell.column.getColumnTemplate()(extend({ 'index': attributes[literals_1[0]] }, dummyData), this.parent, 'template', templateID, this.parent[str]);\n            }\n            if (!isReactCompiler) {\n                appendChildren(node, result);\n            }\n            this.parent.notify('template-result', { template: result });\n            result = null;\n            node.setAttribute('aria-label', node.innerText + ' is template cell' + ' column header ' +\n                cell.column.headerText);\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Function to invoke the custom formatter available in the column object.\n     *\n     * @param  {Column} column - specifies the column\n     * @param  {Object} value - specifies the value\n     * @param  {Object} data - specifies the data\n     * @returns {Object} returns the object\n     */\n    CellRenderer.prototype.invokeFormatter = function (column, value, data) {\n        if (!isNullOrUndefined(column.formatter)) {\n            if (doesImplementInterface(column.formatter, 'getValue')) {\n                var formatter = column.formatter;\n                value = new formatter().getValue(column, data);\n            }\n            else if (typeof column.formatter === 'function') {\n                value = column.formatter(column, data);\n            }\n            else {\n                value = column.formatter.getValue(column, data);\n            }\n        }\n        return value;\n    };\n    /**\n     * Function to render the cell content based on Column object.\n     *\n     * @param {Cell<Column>} cell - specifies the cell\n     * @param {Object} data - specifies the data\n     * @param {Object} attributes - specifies the attributes\n     * @param {boolean} isExpand - specifies the boolean for expand\n     * @param {boolean} isEdit - specifies the boolean for edit\n     * @returns {Element} returns the element\n     */\n    CellRenderer.prototype.render = function (cell, data, attributes, isExpand, isEdit) {\n        return this.refreshCell(cell, data, attributes, isEdit);\n    };\n    /**\n     * Function to refresh the cell content based on Column object.\n     *\n     * @param {Element} td - specifies the element\n     * @param {Cell<Column>} cell - specifies the cell\n     * @param {Object} data - specifies the data\n     * @param {Object} attributes - specifies the attribute\n     * @returns {void}\n     */\n    CellRenderer.prototype.refreshTD = function (td, cell, data, attributes) {\n        var isEdit = this.parent.editSettings.mode === 'Batch' && td.classList.contains('e-editedbatchcell');\n        if (this.parent.isReact) {\n            td.innerHTML = '';\n            var cellIndex = td.cellIndex;\n            var parentRow = td.parentElement;\n            remove(td);\n            var newTD = this.refreshCell(cell, data, attributes, isEdit);\n            this.cloneAttributes(newTD, td);\n            if (parentRow.cells.length !== cellIndex - 1) {\n                parentRow.insertBefore(newTD, parentRow.cells[cellIndex]);\n            }\n            else {\n                parentRow.appendChild(newTD);\n            }\n        }\n        else {\n            var node = this.refreshCell(cell, data, attributes, isEdit);\n            td.innerHTML = '';\n            td.setAttribute('aria-label', node.getAttribute('aria-label'));\n            var elements = [].slice.call(node.childNodes);\n            for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n                var elem = elements_1[_i];\n                td.appendChild(elem);\n            }\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    CellRenderer.prototype.cloneAttributes = function (target, source) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var attrs = source.attributes;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var i = attrs.length;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var attr;\n        while (i--) {\n            attr = attrs[i];\n            target.setAttribute(attr.name, attr.value);\n        }\n    };\n    CellRenderer.prototype.refreshCell = function (cell, data, attributes, isEdit) {\n        var _a;\n        var node = this.element.cloneNode();\n        var column = cell.column;\n        var fData;\n        if (cell.isForeignKey) {\n            fData = cell.foreignKeyData[0] || (_a = {}, _a[column.foreignKeyValue] = column.format ? null : '', _a);\n        }\n        //Prepare innerHtml\n        var innerHtml = this.getGui();\n        var value = cell.isForeignKey ? this.getValue(column.foreignKeyValue, fData, column) :\n            this.getValue(column.field, data, column);\n        if ((column.type === 'date' || column.type === 'datetime') && !isNullOrUndefined(value)) {\n            value = new Date(value);\n        }\n        value = this.format(column, value, data);\n        innerHtml = value.toString();\n        if (column.type === 'boolean' && !column.displayAsCheckBox) {\n            var localeStr = (value !== 'true' && value !== 'false') ? null : value === 'true' ? 'True' : 'False';\n            innerHtml = localeStr ? this.localizer.getConstant(localeStr) : innerHtml;\n        }\n        var fromFormatter = this.invokeFormatter(column, value, data);\n        innerHtml = !isNullOrUndefined(column.formatter) ? isNullOrUndefined(fromFormatter) ? '' : fromFormatter.toString() : innerHtml;\n        node.setAttribute('aria-label', innerHtml + ' column header ' + cell.column.headerText);\n        if (this.evaluate(node, cell, data, attributes, fData, isEdit) && column.type !== 'checkbox') {\n            this.appendHtml(node, innerHtml, column.getDomSetter ? column.getDomSetter() : 'innerHTML');\n        }\n        else if (column.type === 'checkbox') {\n            node.classList.add(literals.gridChkBox);\n            node.setAttribute('aria-label', 'checkbox');\n            if (this.parent.selectionSettings.persistSelection) {\n                value = value === 'true';\n            }\n            else {\n                value = false;\n            }\n            var checkWrap = createCheckBox(this.parent.createElement, false, { checked: value, label: ' ' });\n            checkWrap.insertBefore(this.rowChkBox.cloneNode(), checkWrap.firstChild);\n            node.appendChild(checkWrap);\n        }\n        if (this.parent.checkAllRows === 'Check' && this.parent.enableVirtualization) {\n            cell.isSelected = true;\n        }\n        this.setAttributes(node, cell, attributes);\n        if (column.type === 'boolean' && column.displayAsCheckBox) {\n            var checked = isNaN(parseInt(value.toString(), 10)) ? value === 'true' : parseInt(value.toString(), 10) > 0;\n            var checkWrap = createCheckBox(this.parent.createElement, false, { checked: checked, label: ' ' });\n            node.innerHTML = '';\n            checkWrap.classList.add('e-checkbox-disabled');\n            node.appendChild(checkWrap);\n            node.setAttribute('aria-label', checked + ' column header ' + cell.column.headerText);\n        }\n        return node;\n    };\n    /**\n     * Function to specifies how the result content to be placed in the cell.\n     *\n     * @param {Element} node - specifies the node\n     * @param {string|Element} innerHtml - specifies the innerHTML\n     * @param {string} property - specifies the element\n     * @returns {Element} returns the element\n     */\n    CellRenderer.prototype.appendHtml = function (node, innerHtml, property) {\n        if (property === void 0) { property = 'innerHTML'; }\n        node[property] = innerHtml;\n        return node;\n    };\n    /**\n     * @param {HTMLElement} node - specifies the node\n     * @param {cell<Column>} cell - specifies the cell\n     * @param {Object} attributes - specifies the attributes\n     * @returns {void}\n     * @hidden\n     */\n    CellRenderer.prototype.setAttributes = function (node, cell, attributes) {\n        var column = cell.column;\n        this.buildAttributeFromCell(node, cell, column.type === 'checkbox');\n        setStyleAndAttributes(node, attributes);\n        setStyleAndAttributes(node, cell.attributes);\n        if (column.customAttributes) {\n            setStyleAndAttributes(node, column.customAttributes);\n        }\n        if (this.parent.rowRenderingMode === 'Vertical') {\n            setStyleAndAttributes(node, { 'data-cell': column.headerText });\n        }\n        if (column.textAlign) {\n            node.style.textAlign = column.textAlign;\n        }\n        if (column.clipMode === 'Clip' || (!column.clipMode && this.parent.clipMode === 'Clip')) {\n            node.classList.add('e-gridclip');\n        }\n        else if (column.clipMode === 'EllipsisWithTooltip' || (!column.clipMode && this.parent.clipMode === 'EllipsisWithTooltip')) {\n            if (column.type !== 'checkbox') {\n                node.classList.add('e-ellipsistooltip');\n            }\n        }\n    };\n    CellRenderer.prototype.buildAttributeFromCell = function (node, cell, isCheckBoxType) {\n        var attr = {};\n        var prop = { 'colindex': literals.ariaColIndex };\n        var classes = [];\n        if (cell.colSpan) {\n            attr.colSpan = cell.colSpan;\n        }\n        if (cell.rowSpan) {\n            attr.rowSpan = cell.rowSpan;\n        }\n        if (cell.isTemplate) {\n            classes.push('e-templatecell');\n        }\n        if (cell.isSelected) {\n            classes.push.apply(classes, ['e-selectionbackground', 'e-active']);\n            if (isCheckBoxType) {\n                node.querySelector('.e-frame').classList.add('e-check');\n            }\n        }\n        if (cell.isColumnSelected) {\n            classes.push.apply(classes, ['e-columnselection']);\n        }\n        if (cell.cellType === CellType.Header) {\n            attr[prop.colindex] = cell.colIndex;\n        }\n        else if (!isNullOrUndefined(cell.index)) {\n            attr[prop.colindex] = cell.index;\n        }\n        if (!cell.visible) {\n            classes.push('e-hide');\n        }\n        attr.class = classes;\n        setStyleAndAttributes(node, attr);\n    };\n    CellRenderer.prototype.getValue = function (field, data, column) {\n        return column.valueAccessor(field, data, column);\n    };\n    return CellRenderer;\n}());\nexport { CellRenderer };\n"]},"metadata":{},"sourceType":"module"}