{"ast":null,"code":"import { Droppable } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, extend } from '@syncfusion/ej2-base';\nimport { setStyleAttribute, remove, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { getUpdateUsingRaf, appendChildren, setDisplayValue, clearReactVueTemplates } from '../base/util';\nimport * as events from '../base/constant';\nimport { RowRenderer } from './row-renderer';\nimport { CellMergeRender } from './cell-merge-renderer';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { GroupModelGenerator } from '../services/group-model-generator';\nimport { isGroupAdaptive } from '../base/util';\nimport * as literals from '../base/string-literals'; // eslint-disable-next-line valid-jsdoc\n\n/**\n * Content module is used to render grid content\n *\n * @hidden\n */\n\nvar ContentRender =\n/** @class */\nfunction () {\n  /**\n   * Constructor for content renderer module\n   *\n   * @param {IGrid} parent - specifies the Igrid\n   * @param {ServiceLocator} serviceLocator - specifies the service locator\n   */\n  function ContentRender(parent, serviceLocator) {\n    var _this = this;\n\n    this.rows = [];\n    this.freezeRows = [];\n    this.movableRows = [];\n    this.freezeRowElements = [];\n    /** @hidden */\n\n    this.currentInfo = {};\n    /** @hidden */\n\n    this.prevCurrentView = [];\n    this.isLoaded = true;\n    this.viewColIndexes = [];\n\n    this.drop = function (e) {\n      _this.parent.notify(events.columnDrop, {\n        target: e.target,\n        droppedElement: e.droppedElement\n      });\n\n      remove(e.droppedElement);\n    };\n\n    this.infiniteCache = {};\n    this.isRemove = false;\n    this.visibleRows = [];\n    this.visibleFrozenRows = [];\n    this.rightFreezeRows = [];\n    this.isAddRows = false;\n    this.isInfiniteFreeze = false;\n    this.useGroupCache = false;\n\n    this.rafCallback = function (args) {\n      var arg = args;\n      return function () {\n        if (_this.parent.isFrozenGrid() && _this.parent.enableVirtualization) {\n          var tableName = args.tableName;\n          _this.isLoaded = _this.parent.getFrozenMode() === literals.leftRight ? tableName === 'frozen-right' : tableName === 'movable';\n\n          if (_this.parent.enableColumnVirtualization && args.requestType === 'virtualscroll' && _this.isLoaded) {\n            var mHdr = [].slice.call(_this.parent.getMovableVirtualHeader().getElementsByClassName(literals.row));\n            var fHdr = [].slice.call(_this.parent.getFrozenVirtualHeader().getElementsByClassName(literals.row));\n            _this.isLoaded = mHdr.length === fHdr.length;\n          }\n        }\n\n        _this.ariaService.setBusy(_this.getPanel().querySelector('.' + literals.content), false);\n\n        if (_this.parent.isDestroyed) {\n          return;\n        }\n\n        var rows = _this.rows.slice(0);\n\n        if (_this.parent.enableInfiniteScrolling) {\n          rows = _this.parent.getRowsObject();\n          var prevPage = arg.prevPage;\n\n          if (_this.parent.infiniteScrollSettings.enableCache && prevPage) {\n            var maxBlock = _this.parent.infiniteScrollSettings.maxBlocks;\n            rows = [];\n            var rowIdx = parseInt(_this.rowElements[0].getAttribute('aria-rowindex'), 10) + 1;\n            var startIdx = Math.ceil(rowIdx / _this.parent.pageSettings.pageSize);\n\n            for (var i = 0, count = startIdx; i < maxBlock; i++, count++) {\n              if (_this.infiniteCache[count]) {\n                rows = rows.concat(_this.infiniteCache[count]);\n              }\n            }\n          }\n        }\n\n        if (_this.parent.isFrozenGrid()) {\n          rows = args.isFrozen ? _this.freezeRows : args.renderFrozenRightContent ? _this.parent.getFrozenRightRowsObject() : _this.movableRows;\n        }\n\n        _this.parent.notify(events.contentReady, {\n          rows: rows,\n          args: arg\n        });\n\n        if (_this.isLoaded) {\n          _this.parent.isManualRefresh = false;\n\n          _this.parent.trigger(events.dataBound, {}, function () {\n            if (_this.parent.allowTextWrap) {\n              _this.parent.notify(events.freezeRender, {\n                case: 'textwrap'\n              });\n            }\n          });\n        }\n\n        if (arg) {\n          var action = (arg.requestType || '').toLowerCase() + '-complete';\n\n          _this.parent.notify(action, arg);\n\n          if (args.requestType === 'batchsave') {\n            args.cancel = false;\n\n            _this.parent.trigger(events.actionComplete, args);\n          }\n        }\n\n        if (_this.isLoaded) {\n          _this.parent.hideSpinner();\n        }\n      };\n    };\n\n    this.parent = parent;\n    this.serviceLocator = serviceLocator;\n    this.ariaService = this.serviceLocator.getService('ariaService');\n    this.parent.enableDeepCompare = this.parent.getDataModule().isRemote();\n    this.generator = this.getModelGenerator();\n\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    if (!this.parent.enableColumnVirtualization && !this.parent.enableVirtualization && !this.parent.groupSettings.enableLazyLoading) {\n      this.parent.on(events.columnVisibilityChanged, this.setVisible, this);\n    }\n\n    this.parent.on(events.colGroupRefresh, this.colGroupRefresh, this);\n    this.parent.on(events.uiUpdate, this.enableAfterRender, this);\n    this.parent.on(events.refreshInfiniteModeBlocks, this.refreshContentRows, this);\n    this.parent.on(events.beforeCellFocused, this.beforeCellFocused, this);\n    this.parent.on(events.destroy, this.droppableDestroy, this);\n  }\n\n  ContentRender.prototype.beforeCellFocused = function (e) {\n    if (e.byKey && (e.keyArgs.action === 'upArrow' || e.keyArgs.action === 'downArrow')) {\n      this.pressedKey = e.keyArgs.action;\n    } else {\n      this.pressedKey = undefined;\n    }\n  };\n  /**\n   * The function is used to render grid content div\n   *\n   * @returns {void}\n   */\n\n\n  ContentRender.prototype.renderPanel = function () {\n    var gObj = this.parent;\n    var div = this.parent.element.querySelector('.' + literals.gridContent);\n\n    if (div) {\n      this.ariaService.setOptions(this.parent.element.querySelector('.' + literals.content), {\n        busy: false\n      });\n      this.setPanel(div);\n      return;\n    }\n\n    div = this.parent.createElement('div', {\n      className: literals.gridContent\n    });\n    var innerDiv = this.parent.createElement('div', {\n      className: literals.content\n    });\n    this.ariaService.setOptions(innerDiv, {\n      busy: false\n    });\n    div.appendChild(innerDiv);\n    this.setPanel(div);\n    gObj.element.appendChild(div);\n  };\n  /**\n   * The function is used to render grid content table\n   *\n   * @returns {void}\n   */\n\n\n  ContentRender.prototype.renderTable = function () {\n    var contentDiv = this.getPanel();\n    var virtualTable = contentDiv.querySelector('.e-virtualtable');\n    var virtualTrack = contentDiv.querySelector('.e-virtualtrack');\n\n    if (this.parent.enableVirtualization && !isNullOrUndefined(virtualTable) && !isNullOrUndefined(virtualTrack)) {\n      remove(virtualTable);\n      remove(virtualTrack);\n    }\n\n    contentDiv.appendChild(this.createContentTable('_content_table'));\n    this.setTable(contentDiv.querySelector('.' + literals.table));\n    this.ariaService.setOptions(this.getTable(), {\n      multiselectable: this.parent.selectionSettings.type === 'Multiple'\n    });\n    this.initializeContentDrop();\n\n    if (this.parent.frozenRows) {\n      this.parent.getHeaderContent().classList.add('e-frozenhdrcont');\n    }\n  };\n  /**\n   * The function is used to create content table elements\n   *\n   * @param {string} id - specifies the id\n   * @returns {Element} returns the element\n   * @hidden\n   */\n\n\n  ContentRender.prototype.createContentTable = function (id) {\n    var innerDiv = this.getPanel().firstElementChild;\n\n    if (this.getTable()) {\n      remove(this.getTable());\n    }\n\n    var table = innerDiv.querySelector('.' + literals.table) ? innerDiv.querySelector('.' + literals.table) : this.parent.createElement('table', {\n      className: literals.table,\n      attrs: {\n        cellspacing: '0.25px',\n        role: 'grid',\n        id: this.parent.element.id + id\n      }\n    });\n    this.setColGroup(this.parent.getHeaderTable().querySelector(literals.colGroup).cloneNode(true));\n    table.appendChild(this.getColGroup());\n    table.appendChild(this.parent.createElement(literals.tbody));\n    innerDiv.appendChild(table);\n    return innerDiv;\n  };\n  /**\n   * Refresh the content of the Grid.\n   *\n   * @param {NotifyArgs} args - specifies the args\n   * @returns {void}\n   */\n  // tslint:disable-next-line:max-func-body-length\n\n\n  ContentRender.prototype.refreshContentRows = function (args) {\n    var _this = this;\n\n    if (args === void 0) {\n      args = {};\n    }\n\n    var gObj = this.parent;\n\n    if (gObj.currentViewData.length === 0) {\n      return;\n    }\n\n    var dataSource = this.currentMovableRows || gObj.currentViewData;\n    var contentModule = this.parent.contentModule;\n    var isReact = gObj.isReact && !isNullOrUndefined(gObj.rowTemplate);\n    var frag = isReact ? gObj.createElement(literals.tbody) : document.createDocumentFragment();\n\n    if (!this.initialPageRecords) {\n      this.initialPageRecords = extend([], dataSource);\n    }\n\n    var hdrfrag = isReact ? gObj.createElement(literals.tbody) : document.createDocumentFragment();\n    var columns = gObj.getColumns();\n    var tr;\n    var hdrTbody;\n    var frzCols = gObj.getFrozenColumns();\n    var isFrozenGrid = this.parent.isFrozenGrid();\n    var trElement;\n    var row = new RowRenderer(this.serviceLocator, null, this.parent);\n    var isInfiniteScroll = this.parent.enableInfiniteScrolling && args.requestType === 'infiniteScroll';\n    gObj.notify(events.destroyChildGrid, {});\n    this.rowElements = [];\n    this.rows = [];\n    var fCont = this.getPanel().querySelector('.' + literals.frozenContent);\n    var mCont = this.getPanel().querySelector('.' + literals.movableContent);\n    var cont = this.getPanel().querySelector('.' + literals.content);\n    var tbdy;\n    var tableName;\n\n    if (isGroupAdaptive(gObj)) {\n      if (['sorting', 'filtering', 'searching', 'grouping', 'ungrouping', 'reorder'].some(function (value) {\n        return args.requestType === value;\n      })) {\n        this.emptyVcRows();\n      }\n    }\n\n    var modelData;\n\n    if (this.parent.enableVirtualization && this.parent.isFrozenGrid()) {\n      if (this.parent.enableColumnVirtualization && args.requestType === 'virtualscroll' && args.virtualInfo.sentinelInfo.axis === 'X') {\n        modelData = this.parent.contentModule.generateRows(dataSource, args);\n        args.renderMovableContent = true;\n      }\n\n      modelData = this.parent.contentModule.generateRows(dataSource, args);\n    } else {\n      modelData = this.checkCache(modelData, args);\n\n      if (!this.isAddRows && !this.useGroupCache) {\n        modelData = this.generator.generateRows(dataSource, args);\n      }\n    }\n\n    this.setGroupCache(modelData, args);\n    this.parent.notify(events.setInfiniteCache, {\n      isInfiniteScroll: isInfiniteScroll,\n      modelData: modelData,\n      args: args\n    });\n    var idx = modelData[0].cells[0].index;\n\n    if (isFrozenGrid) {\n      tableName = contentModule.setTbody(modelData, args);\n      tbdy = contentModule.getTbody(tableName);\n    }\n\n    var isFrozenLeft = this.parent.getFrozenMode() === literals.leftRight && tableName === literals.frozenRight;\n    /* eslint-disable */\n\n    if (args.requestType !== 'infiniteScroll' && this.parent.registeredTemplate && this.parent.registeredTemplate.template && !args.isFrozen && !isFrozenLeft) {\n      var templatetoclear = [];\n\n      for (var i = 0; i < this.parent.registeredTemplate.template.length; i++) {\n        for (var j = 0; j < this.parent.registeredTemplate.template[i].rootNodes.length; j++) {\n          if (isNullOrUndefined(this.parent.registeredTemplate.template[i].rootNodes[j].parentNode)) {\n            templatetoclear.push(this.parent.registeredTemplate.template[i]);\n            /* eslint-enable */\n          }\n        }\n      }\n\n      this.parent.destroyTemplate(['template'], templatetoclear);\n    }\n\n    if ((this.parent.isReact || this.parent.isVue) && args.requestType !== 'infiniteScroll' && !args.isFrozen) {\n      var templates = [this.parent.isVue ? 'template' : 'columnTemplate', 'rowTemplate', 'detailTemplate', 'captionTemplate', 'commandsTemplate', 'groupFooterTemplate', 'groupCaptionTemplate'];\n      clearReactVueTemplates(this.parent, templates);\n    }\n\n    if (this.parent.enableColumnVirtualization) {\n      var cellMerge = new CellMergeRender(this.serviceLocator, this.parent);\n      cellMerge.updateVirtualCells(modelData);\n    }\n\n    if (!isFrozenGrid) {\n      this.tbody = this.getTable().querySelector(literals.tbody);\n    }\n\n    var startIndex = 0;\n    var blockLoad = true;\n\n    if (isGroupAdaptive(gObj) && gObj.vcRows.length) {\n      var top_1 = 'top';\n      var scrollTop = !isNullOrUndefined(args.virtualInfo.offsets) ? args.virtualInfo.offsets.top : !isNullOrUndefined(args.scrollTop) ? args.scrollTop[top_1] : 0;\n\n      if (scrollTop !== 0) {\n        var offsets_1 = gObj.vGroupOffsets;\n        var bSize = gObj.pageSettings.pageSize / 2;\n        var values = Object.keys(offsets_1).map(function (key) {\n          return offsets_1[key];\n        });\n\n        for (var m = 0; m < values.length; m++) {\n          if (scrollTop < values[m]) {\n            if (!isNullOrUndefined(args.virtualInfo) && args.virtualInfo.direction === 'up') {\n              startIndex = m > 0 ? (m - 1) * bSize : m * bSize;\n              break;\n            } else {\n              startIndex = m * bSize;\n\n              if (this.parent.contentModule.isEndBlock(m) || this.parent.contentModule.isEndBlock(m + 1)) {\n                args.virtualInfo.blockIndexes = [m, m + 1];\n              }\n\n              break;\n            }\n          }\n        }\n\n        if (Math.round(scrollTop + this.contentPanel.firstElementChild.offsetHeight) >= this.contentPanel.firstElementChild.scrollHeight && !args.rowObject) {\n          blockLoad = false;\n        }\n      }\n    }\n\n    var isVFFrozenOnly = gObj.frozenRows && !gObj.isFrozenGrid() && this.parent.enableVirtualization && args.requestType === 'reorder';\n\n    if (gObj.frozenRows && args.requestType === 'virtualscroll' && args.virtualInfo.sentinelInfo.axis === 'X' || isVFFrozenOnly) {\n      var bIndex = args.virtualInfo.blockIndexes;\n      var page = args.virtualInfo.page;\n      args.virtualInfo.blockIndexes = [1, 2];\n\n      if (isVFFrozenOnly) {\n        args.virtualInfo.page = 1;\n      }\n\n      var data = isVFFrozenOnly ? this.initialPageRecords : dataSource;\n      var mhdrData = this.vgenerator.generateRows(data, args);\n      mhdrData.splice(this.parent.frozenRows);\n\n      for (var i = 0; i < this.parent.frozenRows; i++) {\n        mhdrData[i].cells.splice(0, this.parent.getFrozenColumns());\n        tr = row.render(mhdrData[i], columns);\n        hdrfrag.appendChild(tr);\n      }\n\n      args.virtualInfo.blockIndexes = bIndex;\n      args.virtualInfo.page = page;\n\n      if (isVFFrozenOnly && args.virtualInfo.page === 1) {\n        modelData.splice(0, this.parent.frozenRows);\n      }\n    }\n\n    this.virtualFrozenHdrRefresh(hdrfrag, modelData, row, args, dataSource, columns);\n\n    for (var i = startIndex, len = modelData.length; i < len; i++) {\n      this.rows.push(modelData[i]);\n\n      if (this.parent.groupSettings.enableLazyLoading && !this.useGroupCache && this.parent.groupSettings.columns.length) {\n        this.setRowsInLazyGroup(modelData[i], i);\n\n        if (isNullOrUndefined(modelData[i].indent)) {\n          continue;\n        }\n      }\n\n      this.setInfiniteVisibleRows(args, modelData[i], tableName);\n\n      if (isGroupAdaptive(gObj) && args.virtualInfo && args.virtualInfo.blockIndexes && this.rowElements.length >= args.virtualInfo.blockIndexes.length * this.parent.contentModule.getBlockSize() && blockLoad) {\n        this.parent.currentViewData['records'] = this.rows.map(function (m) {\n          return m.data;\n        });\n        break;\n      }\n\n      if (!gObj.rowTemplate) {\n        tr = row.render(modelData[i], columns);\n        var isVFreorder = this.ensureFrozenHeaderRender(args);\n\n        if (gObj.frozenRows && i < gObj.frozenRows && !isInfiniteScroll && args.requestType !== 'virtualscroll' && isVFreorder && this.ensureVirtualFrozenHeaderRender(args)) {\n          hdrfrag.appendChild(tr);\n        } else {\n          frag.appendChild(tr);\n        }\n\n        if (modelData[i].isExpand) {\n          gObj.notify(events.expandChildGrid, tr.cells[gObj.groupSettings.columns.length]);\n        }\n      } else {\n        var rowTemplateID = gObj.element.id + 'rowTemplate';\n        var elements = void 0;\n\n        if (gObj.isReact) {\n          var isHeader = gObj.frozenRows && i < gObj.frozenRows;\n          var copied = extend({\n            index: i\n          }, dataSource[i]);\n          gObj.getRowTemplate()(copied, gObj, 'rowTemplate', rowTemplateID, null, null, isHeader ? hdrfrag : frag);\n          gObj.renderTemplates();\n        } else {\n          elements = gObj.getRowTemplate()(extend({\n            index: i\n          }, dataSource[i]), gObj, 'rowTemplate', rowTemplateID);\n        }\n\n        if (!gObj.isReact && elements[0].tagName === 'TBODY') {\n          for (var j = 0; j < elements.length; j++) {\n            var isTR = elements[j].nodeName.toLowerCase() === 'tr';\n\n            if (isTR || elements[j].querySelectorAll && elements[j].querySelectorAll('tr').length) {\n              tr = isTR ? elements[j] : elements[j].querySelector('tr');\n            }\n          }\n\n          if (gObj.frozenRows && i < gObj.frozenRows) {\n            hdrfrag.appendChild(tr);\n          } else {\n            frag.appendChild(tr);\n          }\n        } else {\n          if (gObj.frozenRows && i < gObj.frozenRows) {\n            tr = !gObj.isReact ? appendChildren(hdrfrag, elements) : hdrfrag.lastElementChild;\n          } else {\n            // frag.appendChild(tr);\n            if (!gObj.isReact) {\n              tr = appendChildren(frag, elements);\n            }\n\n            trElement = gObj.isReact ? frag.lastElementChild : tr.lastElementChild;\n          }\n        }\n\n        var arg = {\n          data: modelData[i].data,\n          row: trElement ? trElement : tr\n        };\n        this.parent.trigger(events.rowDataBound, arg);\n      }\n\n      if (modelData[i].isDataRow) {\n        this.rowElements.push(tr);\n      }\n\n      this.ariaService.setOptions(this.getTable(), {\n        colcount: gObj.getColumns().length.toString()\n      });\n    }\n\n    if (isFrozenGrid) {\n      contentModule.splitRows(tableName);\n    }\n\n    if (gObj.frozenRows && args.requestType !== 'virtualscroll' && !isInfiniteScroll && this.ensureVirtualFrozenHeaderRender(args) || args.requestType === 'virtualscroll' && args.virtualInfo.sentinelInfo && args.virtualInfo.sentinelInfo.axis === 'X') {\n      hdrTbody = isFrozenGrid ? contentModule.getFrozenHeader(tableName) : gObj.getHeaderTable().querySelector(literals.tbody);\n\n      if (isReact) {\n        var parentTable = hdrTbody.parentElement;\n        remove(hdrTbody);\n        parentTable.appendChild(hdrfrag);\n      } else {\n        hdrTbody.innerHTML = '';\n        hdrTbody.appendChild(hdrfrag);\n      }\n    }\n\n    if (!gObj.enableVirtualization && gObj.frozenRows && idx === 0 && cont.offsetHeight === Number(gObj.height)) {\n      cont.style.height = cont.offsetHeight - hdrTbody.offsetHeight + 'px';\n    }\n\n    args.rows = this.rows.slice(0);\n\n    if (isFrozenGrid) {\n      contentModule.setIsFrozen(args, tableName);\n    }\n\n    this.index = idx;\n    getUpdateUsingRaf(function () {\n      _this.parent.notify(events.beforeFragAppend, args);\n\n      var isVFTable = _this.parent.enableVirtualization && _this.parent.isFrozenGrid();\n\n      if (!_this.parent.enableVirtualization && !isInfiniteScroll) {\n        if (_this.parent.isFrozenGrid()) {\n          remove(contentModule.getTbody(tableName));\n          tbdy = _this.parent.createElement(literals.tbody);\n        } else {\n          _this.tbody.innerHTML = '';\n          remove(_this.tbody);\n          _this.tbody = _this.parent.createElement(literals.tbody);\n        }\n      }\n\n      if (isFrozenGrid && !isVFTable && !_this.parent.enableInfiniteScrolling) {\n        _this.appendContent(tbdy, frag, args, tableName);\n      } else {\n        if (gObj.rowTemplate) {\n          updateBlazorTemplate(gObj.element.id + 'rowTemplate', 'RowTemplate', gObj);\n        }\n\n        if (isVFTable) {\n          if (args.renderFrozenRightContent) {\n            var frCont = gObj.getContent().querySelector('.e-frozen-right-content').querySelector(literals.tbody);\n\n            _this.appendContent(frCont, frag, args);\n          } else if (!args.renderMovableContent) {\n            _this.appendContent(fCont.querySelector(literals.tbody), frag, args);\n          } else {\n            _this.appendContent(mCont.querySelector(literals.tbody), frag, args);\n\n            args.renderMovableContent = false;\n          }\n\n          if (!_this.parent.getFrozenColumns()) {\n            contentModule.renderNextFrozentPart(args, tableName);\n          }\n        } else {\n          if (!isNullOrUndefined(_this.parent.infiniteScrollModule) && _this.parent.enableInfiniteScrolling) {\n            _this.isAddRows = false;\n\n            _this.parent.notify(events.removeInfiniteRows, {\n              args: args\n            });\n\n            _this.parent.notify(events.appendInfiniteContent, {\n              tbody: tbdy ? tbdy : _this.tbody,\n              frag: frag,\n              args: args,\n              rows: _this.rows,\n              rowElements: _this.rowElements,\n              visibleRows: _this.visibleRows,\n              tableName: tableName\n            });\n\n            if (!frzCols && isFrozenGrid) {\n              if (gObj.getFrozenMode() !== literals.leftRight && (tableName === literals.frozenLeft || tableName === literals.frozenRight) || gObj.getFrozenMode() === literals.leftRight && (tableName === literals.frozenLeft || tableName === 'movable')) {\n                _this.refreshContentRows(extend({}, args));\n              }\n            }\n          } else {\n            _this.useGroupCache = false;\n\n            _this.appendContent(_this.tbody, frag, args);\n          }\n        }\n      }\n\n      if (frzCols) {\n        contentModule.renderNextFrozentPart(args, tableName);\n      }\n\n      frag = null;\n    }, this.rafCallback(extend({}, args)));\n  };\n\n  ContentRender.prototype.emptyVcRows = function () {\n    this.parent.vcRows = [];\n    this.parent.vRows = [];\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  ContentRender.prototype.appendContent = function (tbody, frag, args, tableName) {\n    var isReact = this.parent.isReact && !isNullOrUndefined(this.parent.rowTemplate);\n\n    if (isReact) {\n      this.getTable().appendChild(frag);\n    } else {\n      tbody.appendChild(frag);\n      this.getTable().appendChild(tbody);\n    }\n  };\n\n  ContentRender.prototype.setRowsInLazyGroup = function (row, index) {\n    if (this.parent.groupSettings.enableLazyLoading && !this.useGroupCache && this.parent.groupSettings.columns.length) {\n      this.parent.contentModule.maintainRows(row, index);\n    }\n  };\n\n  ContentRender.prototype.setGroupCache = function (data, args) {\n    if (!this.useGroupCache && this.parent.groupSettings.enableLazyLoading) {\n      this.parent.notify(events.setGroupCache, {\n        args: args,\n        data: data\n      });\n    }\n  };\n\n  ContentRender.prototype.ensureFrozenHeaderRender = function (args) {\n    return !(this.parent.enableVirtualization && (args.requestType === 'reorder' || args.requestType === 'refresh') || this.parent.infiniteScrollSettings.enableCache && this.parent.frozenRows && this.parent.infiniteScrollModule.requestType === 'delete' && this.parent.pageSettings.currentPage !== 1);\n  };\n\n  ContentRender.prototype.ensureVirtualFrozenHeaderRender = function (args) {\n    return !(this.parent.enableVirtualization && args.requestType === 'delete');\n  };\n\n  ContentRender.prototype.checkCache = function (modelData, args) {\n    if (this.parent.infiniteScrollSettings.enableCache && args.requestType === 'infiniteScroll') {\n      var index = args.isFrozen ? 1 : 0;\n      var frozenCols = this.parent.isFrozenGrid();\n      this.isAddRows = !isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage]);\n\n      if (frozenCols && !isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage])) {\n        this.isAddRows = this.infiniteCache[this.parent.pageSettings.currentPage][index].length !== 0;\n      }\n\n      if (this.isAddRows) {\n        var data = !frozenCols ? this.infiniteCache[this.parent.pageSettings.currentPage] : this.infiniteCache[this.parent.pageSettings.currentPage][index];\n        modelData = this.parent.pageSettings.currentPage === 1 ? data.slice(this.parent.frozenRows) : data;\n      }\n\n      return modelData;\n    }\n\n    if (this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length && (args.requestType === 'paging' || args.requestType === 'columnstate' || args.requestType === 'reorder') && this.parent.contentModule.getGroupCache()[this.parent.pageSettings.currentPage]) {\n      this.useGroupCache = true;\n      return this.parent.contentModule.initialGroupRows(args.requestType === 'reorder');\n    }\n\n    return null;\n  };\n\n  ContentRender.prototype.setInfiniteVisibleRows = function (args, data, tableName) {\n    var frozenCols = this.parent.isFrozenGrid();\n\n    if (this.parent.enableInfiniteScrolling && !this.parent.infiniteScrollSettings.enableCache) {\n      if (frozenCols) {\n        if (tableName === literals.frozenLeft || this.parent.getFrozenMode() === 'Right' && tableName === literals.frozenRight) {\n          this.visibleFrozenRows.push(data);\n        } else if (tableName === 'movable') {\n          this.visibleRows.push(data);\n        } else {\n          this.rightFreezeRows.push(data);\n        }\n      } else if (!this.parent.infiniteScrollSettings.enableCache) {\n        this.visibleRows.push(data);\n      }\n    }\n  };\n\n  ContentRender.prototype.getCurrentBlockInfiniteRecords = function (isFreeze) {\n    var data = [];\n\n    if (this.parent.infiniteScrollSettings.enableCache) {\n      if (!Object.keys(this.infiniteCache).length) {\n        return [];\n      }\n\n      var frozenCols = this.parent.isFrozenGrid();\n      var rows = this.parent.getRows();\n      var index = parseInt(rows[this.parent.frozenRows].getAttribute(literals.ariaRowIndex), 10);\n      var first = Math.ceil((index + 1) / this.parent.pageSettings.pageSize);\n      index = parseInt(rows[rows.length - 1].getAttribute(literals.ariaRowIndex), 10);\n      var last = Math.ceil(index / this.parent.pageSettings.pageSize);\n\n      if (frozenCols) {\n        var idx = isFreeze ? 0 : 1;\n\n        for (var i = first; i <= last; i++) {\n          data = !data.length ? this.infiniteCache[i][idx] : data.concat(this.infiniteCache[i][idx]);\n        }\n\n        if (this.parent.frozenRows && this.parent.pageSettings.currentPage > 1) {\n          data = this.infiniteCache[1][idx].slice(0, this.parent.frozenRows).concat(data);\n        }\n      } else {\n        for (var i = first; i <= last; i++) {\n          data = !data.length ? this.infiniteCache[i] : data.concat(this.infiniteCache[i]);\n        }\n\n        if (this.parent.frozenRows && this.parent.pageSettings.currentPage > 1) {\n          data = this.infiniteCache[1].slice(0, this.parent.frozenRows).concat(data);\n        }\n      }\n    }\n\n    return data;\n  };\n\n  ContentRender.prototype.getReorderedVFRows = function (args) {\n    return this.parent.contentModule.getReorderedFrozenRows(args);\n  };\n\n  ContentRender.prototype.getReorderedRows = function (args) {\n    return this.parent.contentModule.getReorderedFrozenRows(args);\n  };\n\n  ContentRender.prototype.virtualFrozenHdrRefresh = function (hdrfrag, modelData, row, args, dataSource, columns) {\n    if (this.parent.frozenRows && this.parent.enableVirtualization && (args.requestType === 'reorder' || args.requestType === 'refresh')) {\n      var tr = void 0;\n      var fhdrData = [];\n\n      if (this.parent.isFrozenGrid()) {\n        this.currentMovableRows = dataSource;\n        fhdrData = this.getReorderedVFRows(args);\n      } else {\n        fhdrData = this.getReorderedRows(args);\n      }\n\n      for (var i = 0; i < fhdrData.length; i++) {\n        tr = row.render(fhdrData[i], columns);\n        hdrfrag.appendChild(tr);\n      }\n\n      if (args.virtualInfo.page === 1) {\n        modelData.splice(0, this.parent.frozenRows);\n      }\n\n      if (args.renderMovableContent) {\n        this.parent.currentViewData = this.currentMovableRows;\n        this.currentMovableRows = null;\n      }\n    }\n  };\n\n  ContentRender.prototype.getInfiniteRows = function () {\n    var rows = [];\n    var frozenCols = this.parent.isFrozenGrid();\n\n    if (this.parent.enableInfiniteScrolling) {\n      if (this.parent.infiniteScrollSettings.enableCache) {\n        var keys = Object.keys(this.infiniteCache);\n\n        for (var i = 0; i < keys.length; i++) {\n          rows = !frozenCols ? rows.concat(this.infiniteCache[keys[i]]) : rows.concat(this.infiniteCache[keys[i]][0]);\n        }\n      } else {\n        rows = frozenCols ? this.visibleFrozenRows : this.visibleRows;\n      }\n    }\n\n    return rows;\n  };\n\n  ContentRender.prototype.getInfiniteMovableRows = function () {\n    var infiniteCacheRows = this.getCurrentBlockInfiniteRecords();\n    var infiniteRows = this.parent.enableInfiniteScrolling ? infiniteCacheRows.length ? infiniteCacheRows : this.visibleRows : [];\n    return infiniteRows;\n  };\n  /**\n   * Get the content div element of grid\n   *\n   * @returns {Element} returns the element\n   */\n\n\n  ContentRender.prototype.getPanel = function () {\n    return this.contentPanel;\n  };\n  /**\n   * Set the content div element of grid\n   *\n   * @param  {Element} panel - specifies the panel\n   * @returns {void}\n   */\n\n\n  ContentRender.prototype.setPanel = function (panel) {\n    this.contentPanel = panel;\n  };\n  /**\n   * Get the content table element of grid\n   *\n   * @returns {Element} returns the element\n   */\n\n\n  ContentRender.prototype.getTable = function () {\n    return this.contentTable;\n  };\n  /**\n   * Set the content table element of grid\n   *\n   * @param  {Element} table - specifies the table\n   * @returns {void}\n   */\n\n\n  ContentRender.prototype.setTable = function (table) {\n    this.contentTable = table;\n  };\n  /**\n   * Get the Movable Row collection in the Freeze pane Grid.\n   *\n   * @returns {Row[] | HTMLCollectionOf<HTMLTableRowElement>} returns the row\n   */\n\n\n  ContentRender.prototype.getRows = function () {\n    var infiniteRows = this.getInfiniteRows();\n    return infiniteRows.length ? infiniteRows : this.parent.getFrozenColumns() ? this.freezeRows : this.rows;\n  };\n  /**\n   * Get the Movable Row collection in the Freeze pane Grid.\n   *\n   * @returns {Row[] | HTMLCollectionOf<HTMLTableRowElement>} returns the row\n   */\n\n\n  ContentRender.prototype.getMovableRows = function () {\n    var infiniteRows = this.getInfiniteMovableRows();\n    return infiniteRows.length ? infiniteRows : this.movableRows;\n  };\n  /**\n   * Get the content table data row elements\n   *\n   * @returns {Element} returns the element\n   */\n\n\n  ContentRender.prototype.getRowElements = function () {\n    return this.parent.getFrozenColumns() ? this.freezeRowElements : this.rowElements;\n  };\n  /**\n   * Get the Freeze pane movable content table data row elements\n   *\n   * @returns {Element} returns the element\n   */\n\n\n  ContentRender.prototype.getMovableRowElements = function () {\n    return this.rowElements;\n  };\n  /**\n   * Get the content table data row elements\n   *\n   * @param {Element[]} elements - specifies the elements\n   * @returns {void}\n   */\n\n\n  ContentRender.prototype.setRowElements = function (elements) {\n    this.rowElements = elements;\n  };\n  /**\n   * Get the header colgroup element\n   *\n   * @returns {Element} returns the element\n   */\n\n\n  ContentRender.prototype.getColGroup = function () {\n    return this.colgroup;\n  };\n  /**\n   * Set the header colgroup element\n   *\n   * @param {Element} colGroup - specifies the colgroup\n   * @returns {Element} returns the element\n   */\n\n\n  ContentRender.prototype.setColGroup = function (colGroup) {\n    if (!isNullOrUndefined(colGroup)) {\n      colGroup.id = 'content-' + colGroup.id;\n    }\n\n    return this.colgroup = colGroup;\n  };\n  /**\n   * Function to hide content table column based on visible property\n   *\n   * @param {Column[]} columns - specifies the column\n   * @returns {void}\n   */\n\n\n  ContentRender.prototype.setVisible = function (columns) {\n    var gObj = this.parent;\n    var isFrozenGrid = this.parent.isFrozenGrid();\n    var frzCols = gObj.getFrozenColumns();\n    var rows = [];\n\n    if (isFrozenGrid) {\n      var fRows = this.freezeRows;\n      var mRows = this.movableRows;\n      var rowLen = fRows.length;\n      var cellLen = void 0;\n      var rightRows = [];\n\n      if (gObj.getFrozenMode() === literals.leftRight) {\n        rightRows = gObj.getFrozenRightRowsObject();\n      }\n\n      for (var i = 0, row = void 0; i < rowLen; i++) {\n        cellLen = mRows[i].cells.length;\n        var rightLen = rightRows.length ? rightRows[i].cells.length : 0;\n        row = fRows[i].clone();\n\n        for (var j = 0; j < cellLen; j++) {\n          row.cells.push(mRows[i].cells[j]);\n        }\n\n        for (var k = 0; k < rightLen; k++) {\n          row.cells.push(rightRows[i].cells[k]);\n        }\n\n        rows.push(row);\n      }\n    } else {\n      rows = this.getRows();\n    }\n\n    var testRow;\n    rows.some(function (r) {\n      if (r.isDataRow) {\n        testRow = r;\n      }\n\n      return r.isDataRow;\n    });\n    var needFullRefresh = true;\n\n    if (!gObj.groupSettings.columns.length && testRow) {\n      needFullRefresh = false;\n    }\n\n    var tr = gObj.getDataRows();\n    var args = {};\n    var infiniteData = this.infiniteRowVisibility();\n    var contentrows = infiniteData ? infiniteData : this.rows.filter(function (row) {\n      return !row.isDetailRow;\n    });\n\n    for (var c = 0, clen = columns.length; c < clen; c++) {\n      var column = columns[c];\n      var idx = this.parent.getNormalizedColumnIndex(column.uid);\n      var colIdx = this.parent.getColumnIndexByUid(column.uid);\n      var displayVal = column.visible === true ? '' : 'none';\n\n      if (idx !== -1 && testRow && idx < testRow.cells.length) {\n        if (isFrozenGrid) {\n          if (column.getFreezeTableName() !== 'movable') {\n            if (column.getFreezeTableName() === literals.frozenRight) {\n              var left = this.parent.getFrozenLeftColumnsCount();\n              var movable = this.parent.getMovableColumnsCount();\n              colIdx = idx = idx - (left + movable);\n              var colG = this.parent.getContent().querySelector('.e-frozen-right-content').querySelector(literals.colGroup);\n              setStyleAttribute(colG.childNodes[idx], {\n                'display': displayVal\n              });\n              contentrows = gObj.getFrozenRightRowsObject();\n              tr = gObj.getFrozenRightDataRows();\n            } else {\n              setStyleAttribute(this.getColGroup().childNodes[idx], {\n                'display': displayVal\n              });\n              var infiniteFreezeData = this.infiniteRowVisibility(true);\n              contentrows = infiniteFreezeData ? infiniteFreezeData : this.freezeRows;\n              tr = gObj.getDataRows();\n            }\n          } else {\n            var mTable = gObj.getContent().querySelector('.' + literals.movableContent).querySelector(literals.colGroup);\n            colIdx = idx = idx - frzCols - this.parent.getFrozenLeftColumnsCount();\n            setStyleAttribute(mTable.childNodes[idx], {\n              'display': displayVal\n            });\n            tr = gObj.getMovableDataRows();\n            var infiniteMovableData = this.infiniteRowVisibility();\n            contentrows = infiniteMovableData ? infiniteMovableData : this.movableRows;\n          }\n        } else {\n          setStyleAttribute(this.getColGroup().childNodes[idx], {\n            'display': displayVal\n          });\n        }\n      }\n\n      if (!needFullRefresh) {\n        this.setDisplayNone(tr, colIdx, displayVal, contentrows);\n      }\n\n      if (!this.parent.invokedFromMedia && column.hideAtMedia) {\n        this.parent.updateMediaColumns(column);\n      }\n\n      this.parent.invokedFromMedia = false;\n    }\n\n    if (needFullRefresh) {\n      this.refreshContentRows({\n        requestType: 'refresh'\n      });\n    } else {\n      if (!this.parent.getFrozenColumns()) {\n        this.parent.notify(events.partialRefresh, {\n          rows: contentrows,\n          args: args\n        });\n      } else {\n        this.parent.notify(events.partialRefresh, {\n          rows: this.freezeRows,\n          args: {\n            isFrozen: true,\n            rows: this.freezeRows\n          }\n        });\n        this.parent.notify(events.partialRefresh, {\n          rows: this.movableRows,\n          args: {\n            isFrozen: false,\n            rows: this.movableRows\n          }\n        });\n      }\n    }\n  };\n  /**\n   * @param {Object} tr - specifies the trr\n   * @param {number} idx - specifies the idx\n   * @param {string} displayVal - specifies the displayval\n   * @param {Row<Column>} rows - specifies the rows\n   * @returns {void}\n   * @hidden\n   */\n\n\n  ContentRender.prototype.setDisplayNone = function (tr, idx, displayVal, rows) {\n    setDisplayValue(tr, idx, displayVal, rows, this.parent, this.parent.isRowDragable());\n    this.parent.notify(events.infiniteShowHide, {\n      visible: displayVal,\n      index: idx,\n      isFreeze: this.isInfiniteFreeze\n    });\n  };\n\n  ContentRender.prototype.infiniteRowVisibility = function (isFreeze) {\n    var infiniteData;\n\n    if (this.parent.enableInfiniteScrolling) {\n      this.isInfiniteFreeze = isFreeze;\n\n      if (this.parent.infiniteScrollSettings.enableCache) {\n        infiniteData = isFreeze ? this.getCurrentBlockInfiniteRecords(true) : this.getCurrentBlockInfiniteRecords();\n      } else {\n        infiniteData = isFreeze ? this.visibleFrozenRows : this.visibleRows;\n      }\n    }\n\n    return infiniteData;\n  };\n\n  ContentRender.prototype.colGroupRefresh = function () {\n    if (this.getColGroup()) {\n      var colGroup = void 0;\n\n      if (this.parent.enableColumnVirtualization && this.parent.getFrozenColumns() && this.parent.contentModule.isXaxis()) {\n        colGroup = this.parent.getMovableVirtualHeader().querySelector(literals.colGroup).cloneNode(true);\n      } else {\n        colGroup = this.getHeaderColGroup();\n      }\n\n      this.getTable().replaceChild(colGroup, this.getColGroup());\n      this.setColGroup(colGroup);\n    }\n  };\n\n  ContentRender.prototype.getHeaderColGroup = function () {\n    return this.parent.element.querySelector('.' + literals.gridHeader).querySelector(literals.colGroup).cloneNode(true);\n  };\n\n  ContentRender.prototype.initializeContentDrop = function () {\n    var gObj = this.parent;\n    this.droppable = new Droppable(gObj.element, {\n      accept: '.e-dragclone',\n      drop: this.drop\n    });\n  };\n\n  ContentRender.prototype.droppableDestroy = function () {\n    if (this.droppable && !this.droppable.isDestroyed) {\n      this.droppable.destroy();\n    }\n  };\n\n  ContentRender.prototype.canSkip = function (column, row, index) {\n    /**\n     * Skip the toggle visiblity operation when one of the following success\n     * 1. Grid has empty records\n     * 2. column visible property is unchanged\n     * 3. cell`s isVisible property is same as column`s visible property.\n     */\n    return isNullOrUndefined(row) || //(1)\n    isNullOrUndefined(column.visible) || //(2)\n    row.cells[index].visible === column.visible; //(3)\n  };\n\n  ContentRender.prototype.getModelGenerator = function () {\n    return this.generator = this.parent.allowGrouping ? new GroupModelGenerator(this.parent) : new RowModelGenerator(this.parent);\n  };\n\n  ContentRender.prototype.renderEmpty = function (tbody) {\n    this.getTable().appendChild(tbody);\n\n    if (this.parent.frozenRows) {\n      this.parent.getHeaderContent().querySelector(literals.tbody).innerHTML = '';\n    }\n  };\n\n  ContentRender.prototype.setSelection = function (uid, set, clearAll) {\n    this.parent.notify(events.setFreezeSelection, {\n      uid: uid,\n      set: set,\n      clearAll: clearAll\n    });\n    var isFrozen = this.parent.isFrozenGrid();\n\n    if (isFrozen && this.parent.enableVirtualization) {\n      return;\n    }\n\n    if (isFrozen) {\n      var rows = this.getMovableRows().filter(function (row) {\n        return clearAll || uid === row.uid;\n      });\n\n      for (var i = 0; i < rows.length; i++) {\n        rows[i].isSelected = set;\n      }\n    }\n\n    var row = this.getRows().filter(function (row) {\n      return clearAll || uid === row.uid;\n    });\n\n    for (var j = 0; j < row.length; j++) {\n      row[j].isSelected = set;\n      var cells = row[j].cells;\n\n      for (var k = 0; k < cells.length; k++) {\n        cells[k].isSelected = set;\n      }\n    }\n  };\n\n  ContentRender.prototype.getRowByIndex = function (index) {\n    index = this.getInfiniteRowIndex(index);\n    return this.parent.getDataRows()[index];\n  };\n\n  ContentRender.prototype.getInfiniteRowIndex = function (index) {\n    if (this.parent.infiniteScrollSettings.enableCache) {\n      var fRows = this.parent.frozenRows;\n      var idx = fRows > index ? 0 : fRows;\n      var firstRowIndex = parseInt(this.parent.getRows()[idx].getAttribute(literals.ariaRowIndex), 10);\n      index = fRows > index ? index : index - firstRowIndex + fRows;\n    }\n\n    return index;\n  };\n\n  ContentRender.prototype.getVirtualRowIndex = function (index) {\n    return index;\n  };\n\n  ContentRender.prototype.getMovableRowByIndex = function (index) {\n    index = this.getInfiniteRowIndex(index);\n    return this.parent.getMovableDataRows()[index];\n  };\n\n  ContentRender.prototype.enableAfterRender = function (e) {\n    if (e.module === 'group' && e.enable) {\n      this.generator = this.getModelGenerator();\n    }\n  };\n\n  ContentRender.prototype.setRowObjects = function (rows) {\n    this.rows = rows;\n  };\n  /**\n   * @param {NotifyArgs} args - specifies the args\n   * @returns {void}\n   * @hidden\n   */\n\n\n  ContentRender.prototype.immutableModeRendering = function (args) {\n    var _this = this;\n\n    if (args === void 0) {\n      args = {};\n    }\n\n    var gObj = this.parent;\n    gObj.hideSpinner();\n    var key = gObj.getPrimaryKeyFieldNames()[0];\n    var oldKeys = {};\n    var newKeys = {};\n    var newRowObjs = [];\n    var oldIndexes = {};\n    var oldRowObjs = gObj.getRowsObject().slice();\n    var batchChangeKeys = this.getBatchEditedRecords(key, oldRowObjs);\n    var newIndexes = {};\n    var hasBatch = Object.keys(batchChangeKeys).length !== 0;\n\n    if (gObj.getContent().querySelector('.e-emptyrow') || args.requestType === 'reorder' || this.parent.groupSettings.columns.length) {\n      this.refreshContentRows(args);\n    } else {\n      if (gObj.currentViewData.length === 0) {\n        return;\n      }\n\n      var oldRowElements = {};\n      var tbody = gObj.createElement(literals.tbody);\n      var dataSource = gObj.currentViewData;\n      var trs = [].slice.call(this.getTable().querySelector(literals.tbody).children);\n\n      if (this.prevCurrentView.length) {\n        var prevLen = this.prevCurrentView.length;\n        var currentLen = dataSource.length;\n\n        if (prevLen === currentLen) {\n          for (var i = 0; i < currentLen; i++) {\n            if (this.parent.editSettings.mode === 'Batch' && trs[i].classList.contains('e-insertedrow')) {\n              trs.splice(i, 1);\n              --i;\n              continue;\n            }\n\n            newKeys[dataSource[i][key]] = oldKeys[this.prevCurrentView[i][key]] = i;\n            newIndexes[i] = dataSource[i][key];\n            oldRowElements[oldRowObjs[i].uid] = trs[i];\n            oldIndexes[i] = this.prevCurrentView[i][key];\n          }\n        } else {\n          for (var i = 0; i < currentLen; i++) {\n            newKeys[dataSource[i][key]] = i;\n            newIndexes[i] = dataSource[i][key];\n          }\n\n          for (var i = 0; i < prevLen; i++) {\n            if (this.parent.editSettings.mode === 'Batch' && trs[i].classList.contains('e-insertedrow')) {\n              trs.splice(i, 1);\n              --i;\n              continue;\n            }\n\n            oldRowElements[oldRowObjs[i].uid] = trs[i];\n            oldKeys[this.prevCurrentView[i][key]] = i;\n            oldIndexes[i] = this.prevCurrentView[i][key];\n          }\n        }\n      }\n\n      for (var i = 0; i < dataSource.length; i++) {\n        var oldIndex = oldKeys[dataSource[i][key]];\n\n        if (!isNullOrUndefined(oldIndex)) {\n          var isEqual = false;\n\n          if (this.parent.enableDeepCompare) {\n            isEqual = this.objectEqualityChecker(this.prevCurrentView[oldIndex], dataSource[i]);\n          }\n\n          var tr = oldRowElements[oldRowObjs[oldIndex].uid];\n          newRowObjs.push(oldRowObjs[oldIndex]);\n\n          if (this.rowElements[oldIndex] && this.rowElements[oldIndex].getAttribute('data-uid') === newRowObjs[i].uid && (hasBatch && isNullOrUndefined(batchChangeKeys[newIndexes[i]]) || !hasBatch && (isEqual || this.prevCurrentView[oldIndex] === dataSource[i]))) {\n            if (oldIndex !== i) {\n              this.refreshImmutableContent(i, tr, newRowObjs[i]);\n            }\n\n            tbody.appendChild(tr);\n            continue;\n          }\n\n          if (hasBatch && !isNullOrUndefined(batchChangeKeys[newIndexes[i]]) || !this.parent.enableDeepCompare && dataSource[i] !== this.prevCurrentView[oldIndex] || this.parent.enableDeepCompare && !isEqual) {\n            oldRowObjs[oldIndex].setRowValue(dataSource[i]);\n          }\n\n          tbody.appendChild(tr);\n          this.refreshImmutableContent(i, tr, newRowObjs[i]);\n        } else {\n          var row = new RowRenderer(this.serviceLocator, null, gObj);\n          var modelData = this.generator.generateRows([dataSource[i]]);\n          newRowObjs.push(modelData[0]);\n          var tr = row.render(modelData[0], gObj.getColumns());\n          tbody.appendChild(tr);\n          this.refreshImmutableContent(i, tr, newRowObjs[i]);\n        }\n      }\n\n      this.rows = newRowObjs;\n      this.rowElements = [].slice.call(tbody.children);\n      remove(this.getTable().querySelector(literals.tbody));\n      this.getTable().appendChild(tbody);\n      this.parent.trigger(events.dataBound, {}, function () {\n        if (_this.parent.allowTextWrap) {\n          _this.parent.notify(events.freezeRender, {\n            case: 'textwrap'\n          });\n        }\n      });\n\n      if (args) {\n        var action = (args.requestType || '').toLowerCase() + '-complete';\n        this.parent.notify(action, args);\n      }\n    }\n  };\n\n  ContentRender.prototype.objectEqualityChecker = function (old, next) {\n    var keys = Object.keys(old);\n    var isEqual = true;\n\n    for (var i = 0; i < keys.length; i++) {\n      if (old[keys[i]] !== next[keys[i]]) {\n        var isDate = old[keys[i]] instanceof Date && next[keys[i]] instanceof Date;\n\n        if (!isDate || old[keys[i]].getTime() !== next[keys[i]].getTime()) {\n          isEqual = false;\n          break;\n        }\n      }\n    }\n\n    return isEqual;\n  };\n\n  ContentRender.prototype.getBatchEditedRecords = function (primaryKey, rows) {\n    var keys = {};\n    var changes = this.parent.getBatchChanges();\n    var changedRecords = [];\n    var addedRecords = [];\n\n    if (Object.keys(changes).length) {\n      changedRecords = changes.changedRecords;\n      addedRecords = changes.addedRecords;\n    }\n\n    var args = {\n      cancel: false\n    };\n    this.parent.notify(events.immutableBatchCancel, {\n      rows: rows,\n      args: args\n    });\n\n    if (addedRecords.length) {\n      if (this.parent.editSettings.newRowPosition === 'Bottom') {\n        rows.splice(rows.length - 1, addedRecords.length);\n      } else {\n        if (!args.cancel) {\n          rows.splice(0, addedRecords.length);\n        }\n      }\n    }\n\n    for (var i = 0; i < changedRecords.length; i++) {\n      keys[changedRecords[i][primaryKey]] = i;\n    }\n\n    return keys;\n  };\n\n  ContentRender.prototype.refreshImmutableContent = function (index, tr, row) {\n    row.isAltRow = this.parent.enableAltRow ? index % 2 !== 0 : false;\n\n    if (row.isAltRow) {\n      tr.classList.add('e-altrow');\n    } else {\n      tr.classList.remove('e-altrow');\n    }\n\n    row.index = index;\n    row.edit = undefined;\n    row.isDirty = false;\n    tr.setAttribute(literals.ariaRowIndex, index.toString());\n    this.updateCellIndex(tr, index);\n  };\n\n  ContentRender.prototype.updateCellIndex = function (rowEle, index) {\n    for (var i = 0; i < rowEle.cells.length; i++) {\n      rowEle.cells[i].setAttribute('index', index.toString());\n    }\n  };\n\n  return ContentRender;\n}();\n\nexport { ContentRender };","map":{"version":3,"sources":["/Users/yasaman/Documents/moj_adminpanel/adminpanel/node_modules/@syncfusion/ej2-grids/src/grid/renderer/content-renderer.js"],"names":["Droppable","isNullOrUndefined","extend","setStyleAttribute","remove","updateBlazorTemplate","getUpdateUsingRaf","appendChildren","setDisplayValue","clearReactVueTemplates","events","RowRenderer","CellMergeRender","RowModelGenerator","GroupModelGenerator","isGroupAdaptive","literals","ContentRender","parent","serviceLocator","_this","rows","freezeRows","movableRows","freezeRowElements","currentInfo","prevCurrentView","isLoaded","viewColIndexes","drop","e","notify","columnDrop","target","droppedElement","infiniteCache","isRemove","visibleRows","visibleFrozenRows","rightFreezeRows","isAddRows","isInfiniteFreeze","useGroupCache","rafCallback","args","arg","isFrozenGrid","enableVirtualization","tableName","getFrozenMode","leftRight","enableColumnVirtualization","requestType","mHdr","slice","call","getMovableVirtualHeader","getElementsByClassName","row","fHdr","getFrozenVirtualHeader","length","ariaService","setBusy","getPanel","querySelector","content","isDestroyed","enableInfiniteScrolling","getRowsObject","prevPage","infiniteScrollSettings","enableCache","maxBlock","maxBlocks","rowIdx","parseInt","rowElements","getAttribute","startIdx","Math","ceil","pageSettings","pageSize","i","count","concat","isFrozen","renderFrozenRightContent","getFrozenRightRowsObject","contentReady","isManualRefresh","trigger","dataBound","allowTextWrap","freezeRender","case","action","toLowerCase","cancel","actionComplete","hideSpinner","getService","enableDeepCompare","getDataModule","isRemote","generator","getModelGenerator","groupSettings","enableLazyLoading","on","columnVisibilityChanged","setVisible","colGroupRefresh","uiUpdate","enableAfterRender","refreshInfiniteModeBlocks","refreshContentRows","beforeCellFocused","destroy","droppableDestroy","prototype","byKey","keyArgs","pressedKey","undefined","renderPanel","gObj","div","element","gridContent","setOptions","busy","setPanel","createElement","className","innerDiv","appendChild","renderTable","contentDiv","virtualTable","virtualTrack","createContentTable","setTable","table","getTable","multiselectable","selectionSettings","type","initializeContentDrop","frozenRows","getHeaderContent","classList","add","id","firstElementChild","attrs","cellspacing","role","setColGroup","getHeaderTable","colGroup","cloneNode","getColGroup","tbody","currentViewData","dataSource","currentMovableRows","contentModule","isReact","rowTemplate","frag","document","createDocumentFragment","initialPageRecords","hdrfrag","columns","getColumns","tr","hdrTbody","frzCols","getFrozenColumns","trElement","isInfiniteScroll","destroyChildGrid","fCont","frozenContent","mCont","movableContent","cont","tbdy","some","value","emptyVcRows","modelData","virtualInfo","sentinelInfo","axis","generateRows","renderMovableContent","checkCache","setGroupCache","setInfiniteCache","idx","cells","index","setTbody","getTbody","isFrozenLeft","frozenRight","registeredTemplate","template","templatetoclear","j","rootNodes","parentNode","push","destroyTemplate","isVue","templates","cellMerge","updateVirtualCells","startIndex","blockLoad","vcRows","top_1","scrollTop","offsets","top","offsets_1","vGroupOffsets","bSize","values","Object","keys","map","key","m","direction","isEndBlock","blockIndexes","round","contentPanel","offsetHeight","scrollHeight","rowObject","isVFFrozenOnly","bIndex","page","data","mhdrData","vgenerator","splice","render","virtualFrozenHdrRefresh","len","setRowsInLazyGroup","indent","setInfiniteVisibleRows","getBlockSize","isVFreorder","ensureFrozenHeaderRender","ensureVirtualFrozenHeaderRender","isExpand","expandChildGrid","rowTemplateID","elements","isHeader","copied","getRowTemplate","renderTemplates","tagName","isTR","nodeName","querySelectorAll","lastElementChild","rowDataBound","isDataRow","colcount","toString","splitRows","getFrozenHeader","parentTable","parentElement","innerHTML","Number","height","style","setIsFrozen","beforeFragAppend","isVFTable","appendContent","frCont","getContent","renderNextFrozentPart","infiniteScrollModule","removeInfiniteRows","appendInfiniteContent","frozenLeft","vRows","maintainRows","currentPage","frozenCols","getGroupCache","initialGroupRows","getCurrentBlockInfiniteRecords","isFreeze","getRows","ariaRowIndex","first","last","getReorderedVFRows","getReorderedFrozenRows","getReorderedRows","fhdrData","getInfiniteRows","getInfiniteMovableRows","infiniteCacheRows","infiniteRows","panel","contentTable","getMovableRows","getRowElements","getMovableRowElements","setRowElements","colgroup","fRows","mRows","rowLen","cellLen","rightRows","rightLen","clone","k","testRow","r","needFullRefresh","getDataRows","infiniteData","infiniteRowVisibility","contentrows","filter","isDetailRow","c","clen","column","getNormalizedColumnIndex","uid","colIdx","getColumnIndexByUid","displayVal","visible","getFreezeTableName","left","getFrozenLeftColumnsCount","movable","getMovableColumnsCount","colG","childNodes","getFrozenRightDataRows","infiniteFreezeData","mTable","getMovableDataRows","infiniteMovableData","setDisplayNone","invokedFromMedia","hideAtMedia","updateMediaColumns","partialRefresh","isRowDragable","infiniteShowHide","isXaxis","getHeaderColGroup","replaceChild","gridHeader","droppable","accept","canSkip","allowGrouping","renderEmpty","setSelection","set","clearAll","setFreezeSelection","isSelected","getRowByIndex","getInfiniteRowIndex","firstRowIndex","getVirtualRowIndex","getMovableRowByIndex","module","enable","setRowObjects","immutableModeRendering","getPrimaryKeyFieldNames","oldKeys","newKeys","newRowObjs","oldIndexes","oldRowObjs","batchChangeKeys","getBatchEditedRecords","newIndexes","hasBatch","oldRowElements","trs","children","prevLen","currentLen","editSettings","mode","contains","oldIndex","isEqual","objectEqualityChecker","refreshImmutableContent","setRowValue","old","next","isDate","Date","getTime","primaryKey","changes","getBatchChanges","changedRecords","addedRecords","immutableBatchCancel","newRowPosition","isAltRow","enableAltRow","edit","isDirty","setAttribute","updateCellIndex","rowEle"],"mappings":"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","sourcesContent":["import { Droppable } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, extend } from '@syncfusion/ej2-base';\nimport { setStyleAttribute, remove, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { getUpdateUsingRaf, appendChildren, setDisplayValue, clearReactVueTemplates } from '../base/util';\nimport * as events from '../base/constant';\nimport { RowRenderer } from './row-renderer';\nimport { CellMergeRender } from './cell-merge-renderer';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { GroupModelGenerator } from '../services/group-model-generator';\nimport { isGroupAdaptive } from '../base/util';\nimport * as literals from '../base/string-literals';\n// eslint-disable-next-line valid-jsdoc\n/**\n * Content module is used to render grid content\n *\n * @hidden\n */\nvar ContentRender = /** @class */ (function () {\n    /**\n     * Constructor for content renderer module\n     *\n     * @param {IGrid} parent - specifies the Igrid\n     * @param {ServiceLocator} serviceLocator - specifies the service locator\n     */\n    function ContentRender(parent, serviceLocator) {\n        var _this = this;\n        this.rows = [];\n        this.freezeRows = [];\n        this.movableRows = [];\n        this.freezeRowElements = [];\n        /** @hidden */\n        this.currentInfo = {};\n        /** @hidden */\n        this.prevCurrentView = [];\n        this.isLoaded = true;\n        this.viewColIndexes = [];\n        this.drop = function (e) {\n            _this.parent.notify(events.columnDrop, { target: e.target, droppedElement: e.droppedElement });\n            remove(e.droppedElement);\n        };\n        this.infiniteCache = {};\n        this.isRemove = false;\n        this.visibleRows = [];\n        this.visibleFrozenRows = [];\n        this.rightFreezeRows = [];\n        this.isAddRows = false;\n        this.isInfiniteFreeze = false;\n        this.useGroupCache = false;\n        this.rafCallback = function (args) {\n            var arg = args;\n            return function () {\n                if (_this.parent.isFrozenGrid() && _this.parent.enableVirtualization) {\n                    var tableName = args.tableName;\n                    _this.isLoaded = _this.parent.getFrozenMode() === literals.leftRight ? tableName === 'frozen-right' : tableName === 'movable';\n                    if (_this.parent.enableColumnVirtualization && args.requestType === 'virtualscroll' && _this.isLoaded) {\n                        var mHdr = [].slice.call(_this.parent.getMovableVirtualHeader().getElementsByClassName(literals.row));\n                        var fHdr = [].slice.call(_this.parent.getFrozenVirtualHeader().getElementsByClassName(literals.row));\n                        _this.isLoaded = mHdr.length === fHdr.length;\n                    }\n                }\n                _this.ariaService.setBusy(_this.getPanel().querySelector('.' + literals.content), false);\n                if (_this.parent.isDestroyed) {\n                    return;\n                }\n                var rows = _this.rows.slice(0);\n                if (_this.parent.enableInfiniteScrolling) {\n                    rows = _this.parent.getRowsObject();\n                    var prevPage = arg.prevPage;\n                    if (_this.parent.infiniteScrollSettings.enableCache && prevPage) {\n                        var maxBlock = _this.parent.infiniteScrollSettings.maxBlocks;\n                        rows = [];\n                        var rowIdx = (parseInt(_this.rowElements[0].getAttribute('aria-rowindex'), 10) + 1);\n                        var startIdx = Math.ceil(rowIdx / _this.parent.pageSettings.pageSize);\n                        for (var i = 0, count = startIdx; i < maxBlock; i++, count++) {\n                            if (_this.infiniteCache[count]) {\n                                rows = rows.concat(_this.infiniteCache[count]);\n                            }\n                        }\n                    }\n                }\n                if (_this.parent.isFrozenGrid()) {\n                    rows = args.isFrozen ? _this.freezeRows : args.renderFrozenRightContent ? _this.parent.getFrozenRightRowsObject()\n                        : _this.movableRows;\n                }\n                _this.parent.notify(events.contentReady, { rows: rows, args: arg });\n                if (_this.isLoaded) {\n                    _this.parent.isManualRefresh = false;\n                    _this.parent.trigger(events.dataBound, {}, function () {\n                        if (_this.parent.allowTextWrap) {\n                            _this.parent.notify(events.freezeRender, { case: 'textwrap' });\n                        }\n                    });\n                }\n                if (arg) {\n                    var action = (arg.requestType || '').toLowerCase() + '-complete';\n                    _this.parent.notify(action, arg);\n                    if (args.requestType === 'batchsave') {\n                        args.cancel = false;\n                        _this.parent.trigger(events.actionComplete, args);\n                    }\n                }\n                if (_this.isLoaded) {\n                    _this.parent.hideSpinner();\n                }\n            };\n        };\n        this.parent = parent;\n        this.serviceLocator = serviceLocator;\n        this.ariaService = this.serviceLocator.getService('ariaService');\n        this.parent.enableDeepCompare = this.parent.getDataModule().isRemote();\n        this.generator = this.getModelGenerator();\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        if (!this.parent.enableColumnVirtualization && !this.parent.enableVirtualization\n            && !this.parent.groupSettings.enableLazyLoading) {\n            this.parent.on(events.columnVisibilityChanged, this.setVisible, this);\n        }\n        this.parent.on(events.colGroupRefresh, this.colGroupRefresh, this);\n        this.parent.on(events.uiUpdate, this.enableAfterRender, this);\n        this.parent.on(events.refreshInfiniteModeBlocks, this.refreshContentRows, this);\n        this.parent.on(events.beforeCellFocused, this.beforeCellFocused, this);\n        this.parent.on(events.destroy, this.droppableDestroy, this);\n    }\n    ContentRender.prototype.beforeCellFocused = function (e) {\n        if (e.byKey && (e.keyArgs.action === 'upArrow' || e.keyArgs.action === 'downArrow')) {\n            this.pressedKey = e.keyArgs.action;\n        }\n        else {\n            this.pressedKey = undefined;\n        }\n    };\n    /**\n     * The function is used to render grid content div\n     *\n     * @returns {void}\n     */\n    ContentRender.prototype.renderPanel = function () {\n        var gObj = this.parent;\n        var div = this.parent.element.querySelector('.' + literals.gridContent);\n        if (div) {\n            this.ariaService.setOptions(this.parent.element.querySelector('.' + literals.content), { busy: false });\n            this.setPanel(div);\n            return;\n        }\n        div = this.parent.createElement('div', { className: literals.gridContent });\n        var innerDiv = this.parent.createElement('div', {\n            className: literals.content\n        });\n        this.ariaService.setOptions(innerDiv, { busy: false });\n        div.appendChild(innerDiv);\n        this.setPanel(div);\n        gObj.element.appendChild(div);\n    };\n    /**\n     * The function is used to render grid content table\n     *\n     * @returns {void}\n     */\n    ContentRender.prototype.renderTable = function () {\n        var contentDiv = this.getPanel();\n        var virtualTable = contentDiv.querySelector('.e-virtualtable');\n        var virtualTrack = contentDiv.querySelector('.e-virtualtrack');\n        if (this.parent.enableVirtualization && !isNullOrUndefined(virtualTable) && !isNullOrUndefined(virtualTrack)) {\n            remove(virtualTable);\n            remove(virtualTrack);\n        }\n        contentDiv.appendChild(this.createContentTable('_content_table'));\n        this.setTable(contentDiv.querySelector('.' + literals.table));\n        this.ariaService.setOptions(this.getTable(), {\n            multiselectable: this.parent.selectionSettings.type === 'Multiple'\n        });\n        this.initializeContentDrop();\n        if (this.parent.frozenRows) {\n            this.parent.getHeaderContent().classList.add('e-frozenhdrcont');\n        }\n    };\n    /**\n     * The function is used to create content table elements\n     *\n     * @param {string} id - specifies the id\n     * @returns {Element} returns the element\n     * @hidden\n     */\n    ContentRender.prototype.createContentTable = function (id) {\n        var innerDiv = this.getPanel().firstElementChild;\n        if (this.getTable()) {\n            remove(this.getTable());\n        }\n        var table = innerDiv.querySelector('.' + literals.table) ? innerDiv.querySelector('.' + literals.table) :\n            this.parent.createElement('table', {\n                className: literals.table, attrs: {\n                    cellspacing: '0.25px', role: 'grid',\n                    id: this.parent.element.id + id\n                }\n            });\n        this.setColGroup(this.parent.getHeaderTable().querySelector(literals.colGroup).cloneNode(true));\n        table.appendChild(this.getColGroup());\n        table.appendChild(this.parent.createElement(literals.tbody));\n        innerDiv.appendChild(table);\n        return innerDiv;\n    };\n    /**\n     * Refresh the content of the Grid.\n     *\n     * @param {NotifyArgs} args - specifies the args\n     * @returns {void}\n     */\n    // tslint:disable-next-line:max-func-body-length\n    ContentRender.prototype.refreshContentRows = function (args) {\n        var _this = this;\n        if (args === void 0) { args = {}; }\n        var gObj = this.parent;\n        if (gObj.currentViewData.length === 0) {\n            return;\n        }\n        var dataSource = this.currentMovableRows || gObj.currentViewData;\n        var contentModule = this.parent.contentModule;\n        var isReact = gObj.isReact && !isNullOrUndefined(gObj.rowTemplate);\n        var frag = isReact ? gObj.createElement(literals.tbody) : document.createDocumentFragment();\n        if (!this.initialPageRecords) {\n            this.initialPageRecords = extend([], dataSource);\n        }\n        var hdrfrag = isReact ? gObj.createElement(literals.tbody) : document.createDocumentFragment();\n        var columns = gObj.getColumns();\n        var tr;\n        var hdrTbody;\n        var frzCols = gObj.getFrozenColumns();\n        var isFrozenGrid = this.parent.isFrozenGrid();\n        var trElement;\n        var row = new RowRenderer(this.serviceLocator, null, this.parent);\n        var isInfiniteScroll = this.parent.enableInfiniteScrolling\n            && args.requestType === 'infiniteScroll';\n        gObj.notify(events.destroyChildGrid, {});\n        this.rowElements = [];\n        this.rows = [];\n        var fCont = this.getPanel().querySelector('.' + literals.frozenContent);\n        var mCont = this.getPanel().querySelector('.' + literals.movableContent);\n        var cont = this.getPanel().querySelector('.' + literals.content);\n        var tbdy;\n        var tableName;\n        if (isGroupAdaptive(gObj)) {\n            if (['sorting', 'filtering', 'searching', 'grouping', 'ungrouping', 'reorder']\n                .some(function (value) { return args.requestType === value; })) {\n                this.emptyVcRows();\n            }\n        }\n        var modelData;\n        if (this.parent.enableVirtualization && this.parent.isFrozenGrid()) {\n            if (this.parent.enableColumnVirtualization && args.requestType === 'virtualscroll'\n                && args.virtualInfo.sentinelInfo.axis === 'X') {\n                modelData = this.parent.contentModule.generateRows(dataSource, args);\n                args.renderMovableContent = true;\n            }\n            modelData = this.parent.contentModule.generateRows(dataSource, args);\n        }\n        else {\n            modelData = this.checkCache(modelData, args);\n            if (!this.isAddRows && !this.useGroupCache) {\n                modelData = this.generator.generateRows(dataSource, args);\n            }\n        }\n        this.setGroupCache(modelData, args);\n        this.parent.notify(events.setInfiniteCache, { isInfiniteScroll: isInfiniteScroll, modelData: modelData, args: args });\n        var idx = modelData[0].cells[0].index;\n        if (isFrozenGrid) {\n            tableName = contentModule.setTbody(modelData, args);\n            tbdy = contentModule.getTbody(tableName);\n        }\n        var isFrozenLeft = this.parent.getFrozenMode() === literals.leftRight && tableName === literals.frozenRight;\n        /* eslint-disable */\n        if (args.requestType !== 'infiniteScroll' && this.parent.registeredTemplate\n            && this.parent.registeredTemplate.template && !args.isFrozen && !isFrozenLeft) {\n            var templatetoclear = [];\n            for (var i = 0; i < this.parent.registeredTemplate.template.length; i++) {\n                for (var j = 0; j < this.parent.registeredTemplate.template[i].rootNodes.length; j++) {\n                    if (isNullOrUndefined(this.parent.registeredTemplate.template[i].rootNodes[j].parentNode)) {\n                        templatetoclear.push(this.parent.registeredTemplate.template[i]);\n                        /* eslint-enable */\n                    }\n                }\n            }\n            this.parent.destroyTemplate(['template'], templatetoclear);\n        }\n        if ((this.parent.isReact || this.parent.isVue) && args.requestType !== 'infiniteScroll' && !args.isFrozen) {\n            var templates = [\n                this.parent.isVue ? 'template' : 'columnTemplate', 'rowTemplate', 'detailTemplate',\n                'captionTemplate', 'commandsTemplate', 'groupFooterTemplate', 'groupCaptionTemplate'\n            ];\n            clearReactVueTemplates(this.parent, templates);\n        }\n        if (this.parent.enableColumnVirtualization) {\n            var cellMerge = new CellMergeRender(this.serviceLocator, this.parent);\n            cellMerge.updateVirtualCells(modelData);\n        }\n        if (!isFrozenGrid) {\n            this.tbody = this.getTable().querySelector(literals.tbody);\n        }\n        var startIndex = 0;\n        var blockLoad = true;\n        if (isGroupAdaptive(gObj) && gObj.vcRows.length) {\n            var top_1 = 'top';\n            var scrollTop = !isNullOrUndefined(args.virtualInfo.offsets) ? args.virtualInfo.offsets.top :\n                (!isNullOrUndefined(args.scrollTop) ? args.scrollTop[top_1] : 0);\n            if (scrollTop !== 0) {\n                var offsets_1 = gObj.vGroupOffsets;\n                var bSize = gObj.pageSettings.pageSize / 2;\n                var values = Object.keys(offsets_1).map(function (key) { return offsets_1[key]; });\n                for (var m = 0; m < values.length; m++) {\n                    if (scrollTop < values[m]) {\n                        if (!isNullOrUndefined(args.virtualInfo) && args.virtualInfo.direction === 'up') {\n                            startIndex = m > 0 ? ((m - 1) * bSize) : (m * bSize);\n                            break;\n                        }\n                        else {\n                            startIndex = m * bSize;\n                            if (this.parent.contentModule.isEndBlock(m) || this.parent.contentModule.isEndBlock(m + 1)) {\n                                args.virtualInfo.blockIndexes = [m, m + 1];\n                            }\n                            break;\n                        }\n                    }\n                }\n                if (Math.round(scrollTop + this.contentPanel.firstElementChild.offsetHeight) >=\n                    this.contentPanel.firstElementChild.scrollHeight && !args.rowObject) {\n                    blockLoad = false;\n                }\n            }\n        }\n        var isVFFrozenOnly = gObj.frozenRows && !gObj.isFrozenGrid() && this.parent.enableVirtualization\n            && args.requestType === 'reorder';\n        if ((gObj.frozenRows && args.requestType === 'virtualscroll' && args.virtualInfo.sentinelInfo.axis === 'X') || isVFFrozenOnly) {\n            var bIndex = args.virtualInfo.blockIndexes;\n            var page = args.virtualInfo.page;\n            args.virtualInfo.blockIndexes = [1, 2];\n            if (isVFFrozenOnly) {\n                args.virtualInfo.page = 1;\n            }\n            var data = isVFFrozenOnly ? this.initialPageRecords : dataSource;\n            var mhdrData = this.vgenerator\n                .generateRows(data, args);\n            mhdrData.splice(this.parent.frozenRows);\n            for (var i = 0; i < this.parent.frozenRows; i++) {\n                mhdrData[i].cells.splice(0, this.parent.getFrozenColumns());\n                tr = row.render(mhdrData[i], columns);\n                hdrfrag.appendChild(tr);\n            }\n            args.virtualInfo.blockIndexes = bIndex;\n            args.virtualInfo.page = page;\n            if (isVFFrozenOnly && args.virtualInfo.page === 1) {\n                modelData.splice(0, this.parent.frozenRows);\n            }\n        }\n        this.virtualFrozenHdrRefresh(hdrfrag, modelData, row, args, dataSource, columns);\n        for (var i = startIndex, len = modelData.length; i < len; i++) {\n            this.rows.push(modelData[i]);\n            if (this.parent.groupSettings.enableLazyLoading && !this.useGroupCache && this.parent.groupSettings.columns.length) {\n                this.setRowsInLazyGroup(modelData[i], i);\n                if (isNullOrUndefined(modelData[i].indent)) {\n                    continue;\n                }\n            }\n            this.setInfiniteVisibleRows(args, modelData[i], tableName);\n            if (isGroupAdaptive(gObj) && args.virtualInfo && args.virtualInfo.blockIndexes\n                && (this.rowElements.length >= (args.virtualInfo.blockIndexes.length * this.parent.contentModule.getBlockSize()))\n                && blockLoad) {\n                this.parent.currentViewData['records'] = this.rows.map(function (m) { return m.data; });\n                break;\n            }\n            if (!gObj.rowTemplate) {\n                tr = row.render(modelData[i], columns);\n                var isVFreorder = this.ensureFrozenHeaderRender(args);\n                if (gObj.frozenRows && i < gObj.frozenRows && !isInfiniteScroll && args.requestType !== 'virtualscroll' && isVFreorder\n                    && this.ensureVirtualFrozenHeaderRender(args)) {\n                    hdrfrag.appendChild(tr);\n                }\n                else {\n                    frag.appendChild(tr);\n                }\n                if (modelData[i].isExpand) {\n                    gObj.notify(events.expandChildGrid, tr.cells[gObj.groupSettings.columns.length]);\n                }\n            }\n            else {\n                var rowTemplateID = gObj.element.id + 'rowTemplate';\n                var elements = void 0;\n                if (gObj.isReact) {\n                    var isHeader = gObj.frozenRows && i < gObj.frozenRows;\n                    var copied = extend({ index: i }, dataSource[i]);\n                    gObj.getRowTemplate()(copied, gObj, 'rowTemplate', rowTemplateID, null, null, isHeader ? hdrfrag : frag);\n                    gObj.renderTemplates();\n                }\n                else {\n                    elements = gObj.getRowTemplate()(extend({ index: i }, dataSource[i]), gObj, 'rowTemplate', rowTemplateID);\n                }\n                if (!gObj.isReact && elements[0].tagName === 'TBODY') {\n                    for (var j = 0; j < elements.length; j++) {\n                        var isTR = elements[j].nodeName.toLowerCase() === 'tr';\n                        if (isTR || (elements[j].querySelectorAll && elements[j].querySelectorAll('tr').length)) {\n                            tr = isTR ? elements[j] : elements[j].querySelector('tr');\n                        }\n                    }\n                    if (gObj.frozenRows && i < gObj.frozenRows) {\n                        hdrfrag.appendChild(tr);\n                    }\n                    else {\n                        frag.appendChild(tr);\n                    }\n                }\n                else {\n                    if (gObj.frozenRows && i < gObj.frozenRows) {\n                        tr = !gObj.isReact ? appendChildren(hdrfrag, elements) : hdrfrag.lastElementChild;\n                    }\n                    else {\n                        // frag.appendChild(tr);\n                        if (!gObj.isReact) {\n                            tr = appendChildren(frag, elements);\n                        }\n                        trElement = gObj.isReact ? frag.lastElementChild : tr.lastElementChild;\n                    }\n                }\n                var arg = { data: modelData[i].data, row: trElement ? trElement : tr };\n                this.parent.trigger(events.rowDataBound, arg);\n            }\n            if (modelData[i].isDataRow) {\n                this.rowElements.push(tr);\n            }\n            this.ariaService.setOptions(this.getTable(), { colcount: gObj.getColumns().length.toString() });\n        }\n        if (isFrozenGrid) {\n            contentModule.splitRows(tableName);\n        }\n        if ((gObj.frozenRows && args.requestType !== 'virtualscroll' && !isInfiniteScroll && this.ensureVirtualFrozenHeaderRender(args))\n            || (args.requestType === 'virtualscroll' && args.virtualInfo.sentinelInfo && args.virtualInfo.sentinelInfo.axis === 'X')) {\n            hdrTbody = isFrozenGrid ? contentModule.getFrozenHeader(tableName) : gObj.getHeaderTable().querySelector(literals.tbody);\n            if (isReact) {\n                var parentTable = hdrTbody.parentElement;\n                remove(hdrTbody);\n                parentTable.appendChild(hdrfrag);\n            }\n            else {\n                hdrTbody.innerHTML = '';\n                hdrTbody.appendChild(hdrfrag);\n            }\n        }\n        if (!gObj.enableVirtualization && gObj.frozenRows && idx === 0 && cont.offsetHeight === Number(gObj.height)) {\n            cont.style.height = (cont.offsetHeight - hdrTbody.offsetHeight) + 'px';\n        }\n        args.rows = this.rows.slice(0);\n        if (isFrozenGrid) {\n            contentModule.setIsFrozen(args, tableName);\n        }\n        this.index = idx;\n        getUpdateUsingRaf(function () {\n            _this.parent.notify(events.beforeFragAppend, args);\n            var isVFTable = _this.parent.enableVirtualization && _this.parent.isFrozenGrid();\n            if (!_this.parent.enableVirtualization && !isInfiniteScroll) {\n                if (_this.parent.isFrozenGrid()) {\n                    remove(contentModule.getTbody(tableName));\n                    tbdy = _this.parent.createElement(literals.tbody);\n                }\n                else {\n                    _this.tbody.innerHTML = '';\n                    remove(_this.tbody);\n                    _this.tbody = _this.parent.createElement(literals.tbody);\n                }\n            }\n            if (isFrozenGrid && !isVFTable && !_this.parent.enableInfiniteScrolling) {\n                _this.appendContent(tbdy, frag, args, tableName);\n            }\n            else {\n                if (gObj.rowTemplate) {\n                    updateBlazorTemplate(gObj.element.id + 'rowTemplate', 'RowTemplate', gObj);\n                }\n                if (isVFTable) {\n                    if (args.renderFrozenRightContent) {\n                        var frCont = gObj.getContent().querySelector('.e-frozen-right-content').querySelector(literals.tbody);\n                        _this.appendContent(frCont, frag, args);\n                    }\n                    else if (!args.renderMovableContent) {\n                        _this.appendContent(fCont.querySelector(literals.tbody), frag, args);\n                    }\n                    else {\n                        _this.appendContent(mCont.querySelector(literals.tbody), frag, args);\n                        args.renderMovableContent = false;\n                    }\n                    if (!_this.parent.getFrozenColumns()) {\n                        contentModule.renderNextFrozentPart(args, tableName);\n                    }\n                }\n                else {\n                    if (!isNullOrUndefined(_this.parent.infiniteScrollModule) && _this.parent.enableInfiniteScrolling) {\n                        _this.isAddRows = false;\n                        _this.parent.notify(events.removeInfiniteRows, { args: args });\n                        _this.parent.notify(events.appendInfiniteContent, {\n                            tbody: tbdy ? tbdy : _this.tbody, frag: frag, args: args, rows: _this.rows,\n                            rowElements: _this.rowElements, visibleRows: _this.visibleRows,\n                            tableName: tableName\n                        });\n                        if (!frzCols && isFrozenGrid) {\n                            if ((gObj.getFrozenMode() !== literals.leftRight\n                                && (tableName === literals.frozenLeft || tableName === literals.frozenRight))\n                                || (gObj.getFrozenMode() === literals.leftRight\n                                    && (tableName === literals.frozenLeft || tableName === 'movable'))) {\n                                _this.refreshContentRows(extend({}, args));\n                            }\n                        }\n                    }\n                    else {\n                        _this.useGroupCache = false;\n                        _this.appendContent(_this.tbody, frag, args);\n                    }\n                }\n            }\n            if (frzCols) {\n                contentModule.renderNextFrozentPart(args, tableName);\n            }\n            frag = null;\n        }, this.rafCallback(extend({}, args)));\n    };\n    ContentRender.prototype.emptyVcRows = function () {\n        this.parent.vcRows = [];\n        this.parent.vRows = [];\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ContentRender.prototype.appendContent = function (tbody, frag, args, tableName) {\n        var isReact = this.parent.isReact && !isNullOrUndefined(this.parent.rowTemplate);\n        if (isReact) {\n            this.getTable().appendChild(frag);\n        }\n        else {\n            tbody.appendChild(frag);\n            this.getTable().appendChild(tbody);\n        }\n    };\n    ContentRender.prototype.setRowsInLazyGroup = function (row, index) {\n        if (this.parent.groupSettings.enableLazyLoading && !this.useGroupCache && this.parent.groupSettings.columns.length) {\n            this.parent.contentModule.maintainRows(row, index);\n        }\n    };\n    ContentRender.prototype.setGroupCache = function (data, args) {\n        if (!this.useGroupCache && this.parent.groupSettings.enableLazyLoading) {\n            this.parent.notify(events.setGroupCache, { args: args, data: data });\n        }\n    };\n    ContentRender.prototype.ensureFrozenHeaderRender = function (args) {\n        return !((this.parent.enableVirtualization\n            && (args.requestType === 'reorder' || args.requestType === 'refresh')) || (this.parent.infiniteScrollSettings.enableCache\n            && this.parent.frozenRows && this.parent.infiniteScrollModule.requestType === 'delete'\n            && this.parent.pageSettings.currentPage !== 1));\n    };\n    ContentRender.prototype.ensureVirtualFrozenHeaderRender = function (args) {\n        return !(this.parent.enableVirtualization && args.requestType === 'delete');\n    };\n    ContentRender.prototype.checkCache = function (modelData, args) {\n        if (this.parent.infiniteScrollSettings.enableCache && args.requestType === 'infiniteScroll') {\n            var index = args.isFrozen ? 1 : 0;\n            var frozenCols = this.parent.isFrozenGrid();\n            this.isAddRows = !isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage]);\n            if (frozenCols && !isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage])) {\n                this.isAddRows = this.infiniteCache[this.parent.pageSettings.currentPage][index].length !== 0;\n            }\n            if (this.isAddRows) {\n                var data = !frozenCols ? this.infiniteCache[this.parent.pageSettings.currentPage]\n                    : this.infiniteCache[this.parent.pageSettings.currentPage][index];\n                modelData = this.parent.pageSettings.currentPage === 1 ? data.slice(this.parent.frozenRows) : data;\n            }\n            return modelData;\n        }\n        if (this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length &&\n            (args.requestType === 'paging' || args.requestType === 'columnstate' || args.requestType === 'reorder')\n            && this.parent.contentModule.getGroupCache()[this.parent.pageSettings.currentPage]) {\n            this.useGroupCache = true;\n            return this.parent.contentModule.initialGroupRows(args.requestType === 'reorder');\n        }\n        return null;\n    };\n    ContentRender.prototype.setInfiniteVisibleRows = function (args, data, tableName) {\n        var frozenCols = this.parent.isFrozenGrid();\n        if (this.parent.enableInfiniteScrolling && !this.parent.infiniteScrollSettings.enableCache) {\n            if (frozenCols) {\n                if (tableName === literals.frozenLeft || (this.parent.getFrozenMode() === 'Right' && tableName === literals.frozenRight)) {\n                    this.visibleFrozenRows.push(data);\n                }\n                else if (tableName === 'movable') {\n                    this.visibleRows.push(data);\n                }\n                else {\n                    this.rightFreezeRows.push(data);\n                }\n            }\n            else if (!this.parent.infiniteScrollSettings.enableCache) {\n                this.visibleRows.push(data);\n            }\n        }\n    };\n    ContentRender.prototype.getCurrentBlockInfiniteRecords = function (isFreeze) {\n        var data = [];\n        if (this.parent.infiniteScrollSettings.enableCache) {\n            if (!Object.keys(this.infiniteCache).length) {\n                return [];\n            }\n            var frozenCols = this.parent.isFrozenGrid();\n            var rows = this.parent.getRows();\n            var index = parseInt(rows[this.parent.frozenRows].getAttribute(literals.ariaRowIndex), 10);\n            var first = Math.ceil((index + 1) / this.parent.pageSettings.pageSize);\n            index = parseInt(rows[rows.length - 1].getAttribute(literals.ariaRowIndex), 10);\n            var last = Math.ceil(index / this.parent.pageSettings.pageSize);\n            if (frozenCols) {\n                var idx = isFreeze ? 0 : 1;\n                for (var i = first; i <= last; i++) {\n                    data = !data.length ? this.infiniteCache[i][idx]\n                        : data.concat(this.infiniteCache[i][idx]);\n                }\n                if (this.parent.frozenRows && this.parent.pageSettings.currentPage > 1) {\n                    data = this.infiniteCache[1][idx].slice(0, this.parent.frozenRows).concat(data);\n                }\n            }\n            else {\n                for (var i = first; i <= last; i++) {\n                    data = !data.length ? this.infiniteCache[i] : data.concat(this.infiniteCache[i]);\n                }\n                if (this.parent.frozenRows && this.parent.pageSettings.currentPage > 1) {\n                    data = this.infiniteCache[1].slice(0, this.parent.frozenRows).concat(data);\n                }\n            }\n        }\n        return data;\n    };\n    ContentRender.prototype.getReorderedVFRows = function (args) {\n        return this.parent.contentModule.getReorderedFrozenRows(args);\n    };\n    ContentRender.prototype.getReorderedRows = function (args) {\n        return this.parent.contentModule.getReorderedFrozenRows(args);\n    };\n    ContentRender.prototype.virtualFrozenHdrRefresh = function (hdrfrag, modelData, row, args, dataSource, columns) {\n        if (this.parent.frozenRows && this.parent.enableVirtualization\n            && (args.requestType === 'reorder' || args.requestType === 'refresh')) {\n            var tr = void 0;\n            var fhdrData = [];\n            if (this.parent.isFrozenGrid()) {\n                this.currentMovableRows = dataSource;\n                fhdrData = this.getReorderedVFRows(args);\n            }\n            else {\n                fhdrData = this.getReorderedRows(args);\n            }\n            for (var i = 0; i < fhdrData.length; i++) {\n                tr = row.render(fhdrData[i], columns);\n                hdrfrag.appendChild(tr);\n            }\n            if (args.virtualInfo.page === 1) {\n                modelData.splice(0, this.parent.frozenRows);\n            }\n            if (args.renderMovableContent) {\n                this.parent.currentViewData = this.currentMovableRows;\n                this.currentMovableRows = null;\n            }\n        }\n    };\n    ContentRender.prototype.getInfiniteRows = function () {\n        var rows = [];\n        var frozenCols = this.parent.isFrozenGrid();\n        if (this.parent.enableInfiniteScrolling) {\n            if (this.parent.infiniteScrollSettings.enableCache) {\n                var keys = Object.keys(this.infiniteCache);\n                for (var i = 0; i < keys.length; i++) {\n                    rows = !frozenCols ? rows.concat(this.infiniteCache[keys[i]]) : rows.concat(this.infiniteCache[keys[i]][0]);\n                }\n            }\n            else {\n                rows = frozenCols ? this.visibleFrozenRows : this.visibleRows;\n            }\n        }\n        return rows;\n    };\n    ContentRender.prototype.getInfiniteMovableRows = function () {\n        var infiniteCacheRows = this.getCurrentBlockInfiniteRecords();\n        var infiniteRows = this.parent.enableInfiniteScrolling ? infiniteCacheRows.length ? infiniteCacheRows\n            : this.visibleRows : [];\n        return infiniteRows;\n    };\n    /**\n     * Get the content div element of grid\n     *\n     * @returns {Element} returns the element\n     */\n    ContentRender.prototype.getPanel = function () {\n        return this.contentPanel;\n    };\n    /**\n     * Set the content div element of grid\n     *\n     * @param  {Element} panel - specifies the panel\n     * @returns {void}\n     */\n    ContentRender.prototype.setPanel = function (panel) {\n        this.contentPanel = panel;\n    };\n    /**\n     * Get the content table element of grid\n     *\n     * @returns {Element} returns the element\n     */\n    ContentRender.prototype.getTable = function () {\n        return this.contentTable;\n    };\n    /**\n     * Set the content table element of grid\n     *\n     * @param  {Element} table - specifies the table\n     * @returns {void}\n     */\n    ContentRender.prototype.setTable = function (table) {\n        this.contentTable = table;\n    };\n    /**\n     * Get the Movable Row collection in the Freeze pane Grid.\n     *\n     * @returns {Row[] | HTMLCollectionOf<HTMLTableRowElement>} returns the row\n     */\n    ContentRender.prototype.getRows = function () {\n        var infiniteRows = this.getInfiniteRows();\n        return infiniteRows.length ? infiniteRows : this.parent.getFrozenColumns() ? this.freezeRows : this.rows;\n    };\n    /**\n     * Get the Movable Row collection in the Freeze pane Grid.\n     *\n     * @returns {Row[] | HTMLCollectionOf<HTMLTableRowElement>} returns the row\n     */\n    ContentRender.prototype.getMovableRows = function () {\n        var infiniteRows = this.getInfiniteMovableRows();\n        return infiniteRows.length ? infiniteRows : this.movableRows;\n    };\n    /**\n     * Get the content table data row elements\n     *\n     * @returns {Element} returns the element\n     */\n    ContentRender.prototype.getRowElements = function () {\n        return this.parent.getFrozenColumns() ? this.freezeRowElements : this.rowElements;\n    };\n    /**\n     * Get the Freeze pane movable content table data row elements\n     *\n     * @returns {Element} returns the element\n     */\n    ContentRender.prototype.getMovableRowElements = function () {\n        return this.rowElements;\n    };\n    /**\n     * Get the content table data row elements\n     *\n     * @param {Element[]} elements - specifies the elements\n     * @returns {void}\n     */\n    ContentRender.prototype.setRowElements = function (elements) {\n        this.rowElements = elements;\n    };\n    /**\n     * Get the header colgroup element\n     *\n     * @returns {Element} returns the element\n     */\n    ContentRender.prototype.getColGroup = function () {\n        return this.colgroup;\n    };\n    /**\n     * Set the header colgroup element\n     *\n     * @param {Element} colGroup - specifies the colgroup\n     * @returns {Element} returns the element\n     */\n    ContentRender.prototype.setColGroup = function (colGroup) {\n        if (!isNullOrUndefined(colGroup)) {\n            colGroup.id = 'content-' + colGroup.id;\n        }\n        return this.colgroup = colGroup;\n    };\n    /**\n     * Function to hide content table column based on visible property\n     *\n     * @param {Column[]} columns - specifies the column\n     * @returns {void}\n     */\n    ContentRender.prototype.setVisible = function (columns) {\n        var gObj = this.parent;\n        var isFrozenGrid = this.parent.isFrozenGrid();\n        var frzCols = gObj.getFrozenColumns();\n        var rows = [];\n        if (isFrozenGrid) {\n            var fRows = this.freezeRows;\n            var mRows = this.movableRows;\n            var rowLen = fRows.length;\n            var cellLen = void 0;\n            var rightRows = [];\n            if (gObj.getFrozenMode() === literals.leftRight) {\n                rightRows = gObj.getFrozenRightRowsObject();\n            }\n            for (var i = 0, row = void 0; i < rowLen; i++) {\n                cellLen = mRows[i].cells.length;\n                var rightLen = rightRows.length ? rightRows[i].cells.length : 0;\n                row = fRows[i].clone();\n                for (var j = 0; j < cellLen; j++) {\n                    row.cells.push(mRows[i].cells[j]);\n                }\n                for (var k = 0; k < rightLen; k++) {\n                    row.cells.push(rightRows[i].cells[k]);\n                }\n                rows.push(row);\n            }\n        }\n        else {\n            rows = this.getRows();\n        }\n        var testRow;\n        rows.some(function (r) { if (r.isDataRow) {\n            testRow = r;\n        } return r.isDataRow; });\n        var needFullRefresh = true;\n        if (!gObj.groupSettings.columns.length && testRow) {\n            needFullRefresh = false;\n        }\n        var tr = gObj.getDataRows();\n        var args = {};\n        var infiniteData = this.infiniteRowVisibility();\n        var contentrows = infiniteData ? infiniteData\n            : this.rows.filter(function (row) { return !row.isDetailRow; });\n        for (var c = 0, clen = columns.length; c < clen; c++) {\n            var column = columns[c];\n            var idx = this.parent.getNormalizedColumnIndex(column.uid);\n            var colIdx = this.parent.getColumnIndexByUid(column.uid);\n            var displayVal = column.visible === true ? '' : 'none';\n            if (idx !== -1 && testRow && idx < testRow.cells.length) {\n                if (isFrozenGrid) {\n                    if (column.getFreezeTableName() !== 'movable') {\n                        if (column.getFreezeTableName() === literals.frozenRight) {\n                            var left = this.parent.getFrozenLeftColumnsCount();\n                            var movable = this.parent.getMovableColumnsCount();\n                            colIdx = idx = idx - (left + movable);\n                            var colG = this.parent.getContent().querySelector('.e-frozen-right-content').querySelector(literals.colGroup);\n                            setStyleAttribute(colG.childNodes[idx], { 'display': displayVal });\n                            contentrows = gObj.getFrozenRightRowsObject();\n                            tr = gObj.getFrozenRightDataRows();\n                        }\n                        else {\n                            setStyleAttribute(this.getColGroup().childNodes[idx], { 'display': displayVal });\n                            var infiniteFreezeData = this.infiniteRowVisibility(true);\n                            contentrows = infiniteFreezeData ? infiniteFreezeData : this.freezeRows;\n                            tr = gObj.getDataRows();\n                        }\n                    }\n                    else {\n                        var mTable = gObj.getContent().querySelector('.' + literals.movableContent).querySelector(literals.colGroup);\n                        colIdx = idx = idx - frzCols - this.parent.getFrozenLeftColumnsCount();\n                        setStyleAttribute(mTable.childNodes[idx], { 'display': displayVal });\n                        tr = gObj.getMovableDataRows();\n                        var infiniteMovableData = this.infiniteRowVisibility();\n                        contentrows = infiniteMovableData ? infiniteMovableData : this.movableRows;\n                    }\n                }\n                else {\n                    setStyleAttribute(this.getColGroup().childNodes[idx], { 'display': displayVal });\n                }\n            }\n            if (!needFullRefresh) {\n                this.setDisplayNone(tr, colIdx, displayVal, contentrows);\n            }\n            if (!this.parent.invokedFromMedia && column.hideAtMedia) {\n                this.parent.updateMediaColumns(column);\n            }\n            this.parent.invokedFromMedia = false;\n        }\n        if (needFullRefresh) {\n            this.refreshContentRows({ requestType: 'refresh' });\n        }\n        else {\n            if (!this.parent.getFrozenColumns()) {\n                this.parent.notify(events.partialRefresh, { rows: contentrows, args: args });\n            }\n            else {\n                this.parent.notify(events.partialRefresh, { rows: this.freezeRows, args: { isFrozen: true, rows: this.freezeRows } });\n                this.parent.notify(events.partialRefresh, { rows: this.movableRows, args: { isFrozen: false, rows: this.movableRows } });\n            }\n        }\n    };\n    /**\n     * @param {Object} tr - specifies the trr\n     * @param {number} idx - specifies the idx\n     * @param {string} displayVal - specifies the displayval\n     * @param {Row<Column>} rows - specifies the rows\n     * @returns {void}\n     * @hidden\n     */\n    ContentRender.prototype.setDisplayNone = function (tr, idx, displayVal, rows) {\n        setDisplayValue(tr, idx, displayVal, rows, this.parent, this.parent.isRowDragable());\n        this.parent.notify(events.infiniteShowHide, { visible: displayVal, index: idx, isFreeze: this.isInfiniteFreeze });\n    };\n    ContentRender.prototype.infiniteRowVisibility = function (isFreeze) {\n        var infiniteData;\n        if (this.parent.enableInfiniteScrolling) {\n            this.isInfiniteFreeze = isFreeze;\n            if (this.parent.infiniteScrollSettings.enableCache) {\n                infiniteData = isFreeze ? this.getCurrentBlockInfiniteRecords(true) : this.getCurrentBlockInfiniteRecords();\n            }\n            else {\n                infiniteData = isFreeze ? this.visibleFrozenRows : this.visibleRows;\n            }\n        }\n        return infiniteData;\n    };\n    ContentRender.prototype.colGroupRefresh = function () {\n        if (this.getColGroup()) {\n            var colGroup = void 0;\n            if (this.parent.enableColumnVirtualization && this.parent.getFrozenColumns()\n                && this.parent.contentModule.isXaxis()) {\n                colGroup = this.parent.getMovableVirtualHeader().querySelector(literals.colGroup).cloneNode(true);\n            }\n            else {\n                colGroup = this.getHeaderColGroup();\n            }\n            this.getTable().replaceChild(colGroup, this.getColGroup());\n            this.setColGroup(colGroup);\n        }\n    };\n    ContentRender.prototype.getHeaderColGroup = function () {\n        return this.parent.element.querySelector('.' + literals.gridHeader).querySelector(literals.colGroup).cloneNode(true);\n    };\n    ContentRender.prototype.initializeContentDrop = function () {\n        var gObj = this.parent;\n        this.droppable = new Droppable(gObj.element, {\n            accept: '.e-dragclone',\n            drop: this.drop\n        });\n    };\n    ContentRender.prototype.droppableDestroy = function () {\n        if (this.droppable && !this.droppable.isDestroyed) {\n            this.droppable.destroy();\n        }\n    };\n    ContentRender.prototype.canSkip = function (column, row, index) {\n        /**\n         * Skip the toggle visiblity operation when one of the following success\n         * 1. Grid has empty records\n         * 2. column visible property is unchanged\n         * 3. cell`s isVisible property is same as column`s visible property.\n         */\n        return isNullOrUndefined(row) || //(1)\n            isNullOrUndefined(column.visible) || //(2)\n            row.cells[index].visible === column.visible; //(3)\n    };\n    ContentRender.prototype.getModelGenerator = function () {\n        return this.generator = this.parent.allowGrouping ? new GroupModelGenerator(this.parent) : new RowModelGenerator(this.parent);\n    };\n    ContentRender.prototype.renderEmpty = function (tbody) {\n        this.getTable().appendChild(tbody);\n        if (this.parent.frozenRows) {\n            this.parent.getHeaderContent().querySelector(literals.tbody).innerHTML = '';\n        }\n    };\n    ContentRender.prototype.setSelection = function (uid, set, clearAll) {\n        this.parent.notify(events.setFreezeSelection, { uid: uid, set: set, clearAll: clearAll });\n        var isFrozen = this.parent.isFrozenGrid();\n        if (isFrozen && this.parent.enableVirtualization) {\n            return;\n        }\n        if (isFrozen) {\n            var rows = this.getMovableRows().filter(function (row) { return clearAll || uid === row.uid; });\n            for (var i = 0; i < rows.length; i++) {\n                rows[i].isSelected = set;\n            }\n        }\n        var row = this.getRows().filter(function (row) { return clearAll || uid === row.uid; });\n        for (var j = 0; j < row.length; j++) {\n            row[j].isSelected = set;\n            var cells = row[j].cells;\n            for (var k = 0; k < cells.length; k++) {\n                cells[k].isSelected = set;\n            }\n        }\n    };\n    ContentRender.prototype.getRowByIndex = function (index) {\n        index = this.getInfiniteRowIndex(index);\n        return this.parent.getDataRows()[index];\n    };\n    ContentRender.prototype.getInfiniteRowIndex = function (index) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n            var fRows = this.parent.frozenRows;\n            var idx = fRows > index ? 0 : fRows;\n            var firstRowIndex = parseInt(this.parent.getRows()[idx].getAttribute(literals.ariaRowIndex), 10);\n            index = fRows > index ? index : (index - firstRowIndex) + fRows;\n        }\n        return index;\n    };\n    ContentRender.prototype.getVirtualRowIndex = function (index) {\n        return index;\n    };\n    ContentRender.prototype.getMovableRowByIndex = function (index) {\n        index = this.getInfiniteRowIndex(index);\n        return this.parent.getMovableDataRows()[index];\n    };\n    ContentRender.prototype.enableAfterRender = function (e) {\n        if (e.module === 'group' && e.enable) {\n            this.generator = this.getModelGenerator();\n        }\n    };\n    ContentRender.prototype.setRowObjects = function (rows) {\n        this.rows = rows;\n    };\n    /**\n     * @param {NotifyArgs} args - specifies the args\n     * @returns {void}\n     * @hidden\n     */\n    ContentRender.prototype.immutableModeRendering = function (args) {\n        var _this = this;\n        if (args === void 0) { args = {}; }\n        var gObj = this.parent;\n        gObj.hideSpinner();\n        var key = gObj.getPrimaryKeyFieldNames()[0];\n        var oldKeys = {};\n        var newKeys = {};\n        var newRowObjs = [];\n        var oldIndexes = {};\n        var oldRowObjs = gObj.getRowsObject().slice();\n        var batchChangeKeys = this.getBatchEditedRecords(key, oldRowObjs);\n        var newIndexes = {};\n        var hasBatch = Object.keys(batchChangeKeys).length !== 0;\n        if (gObj.getContent().querySelector('.e-emptyrow') || args.requestType === 'reorder'\n            || this.parent.groupSettings.columns.length) {\n            this.refreshContentRows(args);\n        }\n        else {\n            if (gObj.currentViewData.length === 0) {\n                return;\n            }\n            var oldRowElements = {};\n            var tbody = gObj.createElement(literals.tbody);\n            var dataSource = gObj.currentViewData;\n            var trs = [].slice.call(this.getTable().querySelector(literals.tbody).children);\n            if (this.prevCurrentView.length) {\n                var prevLen = this.prevCurrentView.length;\n                var currentLen = dataSource.length;\n                if (prevLen === currentLen) {\n                    for (var i = 0; i < currentLen; i++) {\n                        if (this.parent.editSettings.mode === 'Batch'\n                            && trs[i].classList.contains('e-insertedrow')) {\n                            trs.splice(i, 1);\n                            --i;\n                            continue;\n                        }\n                        newKeys[dataSource[i][key]] = oldKeys[this.prevCurrentView[i][key]] = i;\n                        newIndexes[i] = dataSource[i][key];\n                        oldRowElements[oldRowObjs[i].uid] = trs[i];\n                        oldIndexes[i] = this.prevCurrentView[i][key];\n                    }\n                }\n                else {\n                    for (var i = 0; i < currentLen; i++) {\n                        newKeys[dataSource[i][key]] = i;\n                        newIndexes[i] = dataSource[i][key];\n                    }\n                    for (var i = 0; i < prevLen; i++) {\n                        if (this.parent.editSettings.mode === 'Batch'\n                            && trs[i].classList.contains('e-insertedrow')) {\n                            trs.splice(i, 1);\n                            --i;\n                            continue;\n                        }\n                        oldRowElements[oldRowObjs[i].uid] = trs[i];\n                        oldKeys[this.prevCurrentView[i][key]] = i;\n                        oldIndexes[i] = this.prevCurrentView[i][key];\n                    }\n                }\n            }\n            for (var i = 0; i < dataSource.length; i++) {\n                var oldIndex = oldKeys[dataSource[i][key]];\n                if (!isNullOrUndefined(oldIndex)) {\n                    var isEqual = false;\n                    if (this.parent.enableDeepCompare) {\n                        isEqual = this.objectEqualityChecker(this.prevCurrentView[oldIndex], dataSource[i]);\n                    }\n                    var tr = oldRowElements[oldRowObjs[oldIndex].uid];\n                    newRowObjs.push(oldRowObjs[oldIndex]);\n                    if (this.rowElements[oldIndex] && this.rowElements[oldIndex].getAttribute('data-uid') === newRowObjs[i].uid\n                        && ((hasBatch && isNullOrUndefined(batchChangeKeys[newIndexes[i]]))\n                            || (!hasBatch && (isEqual || this.prevCurrentView[oldIndex] === dataSource[i])))) {\n                        if (oldIndex !== i) {\n                            this.refreshImmutableContent(i, tr, newRowObjs[i]);\n                        }\n                        tbody.appendChild(tr);\n                        continue;\n                    }\n                    if ((hasBatch && !isNullOrUndefined(batchChangeKeys[newIndexes[i]]))\n                        || (!this.parent.enableDeepCompare && dataSource[i] !== this.prevCurrentView[oldIndex])\n                        || (this.parent.enableDeepCompare && !isEqual)) {\n                        oldRowObjs[oldIndex].setRowValue(dataSource[i]);\n                    }\n                    tbody.appendChild(tr);\n                    this.refreshImmutableContent(i, tr, newRowObjs[i]);\n                }\n                else {\n                    var row = new RowRenderer(this.serviceLocator, null, gObj);\n                    var modelData = this.generator.generateRows([dataSource[i]]);\n                    newRowObjs.push(modelData[0]);\n                    var tr = row.render(modelData[0], gObj.getColumns());\n                    tbody.appendChild(tr);\n                    this.refreshImmutableContent(i, tr, newRowObjs[i]);\n                }\n            }\n            this.rows = newRowObjs;\n            this.rowElements = [].slice.call(tbody.children);\n            remove(this.getTable().querySelector(literals.tbody));\n            this.getTable().appendChild(tbody);\n            this.parent.trigger(events.dataBound, {}, function () {\n                if (_this.parent.allowTextWrap) {\n                    _this.parent.notify(events.freezeRender, { case: 'textwrap' });\n                }\n            });\n            if (args) {\n                var action = (args.requestType || '').toLowerCase() + '-complete';\n                this.parent.notify(action, args);\n            }\n        }\n    };\n    ContentRender.prototype.objectEqualityChecker = function (old, next) {\n        var keys = Object.keys(old);\n        var isEqual = true;\n        for (var i = 0; i < keys.length; i++) {\n            if (old[keys[i]] !== next[keys[i]]) {\n                var isDate = old[keys[i]] instanceof Date && next[keys[i]] instanceof Date;\n                if (!isDate || (old[keys[i]].getTime() !== next[keys[i]].getTime())) {\n                    isEqual = false;\n                    break;\n                }\n            }\n        }\n        return isEqual;\n    };\n    ContentRender.prototype.getBatchEditedRecords = function (primaryKey, rows) {\n        var keys = {};\n        var changes = this.parent.getBatchChanges();\n        var changedRecords = [];\n        var addedRecords = [];\n        if (Object.keys(changes).length) {\n            changedRecords = changes.changedRecords;\n            addedRecords = changes.addedRecords;\n        }\n        var args = { cancel: false };\n        this.parent.notify(events.immutableBatchCancel, { rows: rows, args: args });\n        if (addedRecords.length) {\n            if (this.parent.editSettings.newRowPosition === 'Bottom') {\n                rows.splice(rows.length - 1, addedRecords.length);\n            }\n            else {\n                if (!args.cancel) {\n                    rows.splice(0, addedRecords.length);\n                }\n            }\n        }\n        for (var i = 0; i < changedRecords.length; i++) {\n            keys[changedRecords[i][primaryKey]] = i;\n        }\n        return keys;\n    };\n    ContentRender.prototype.refreshImmutableContent = function (index, tr, row) {\n        row.isAltRow = this.parent.enableAltRow ? index % 2 !== 0 : false;\n        if (row.isAltRow) {\n            tr.classList.add('e-altrow');\n        }\n        else {\n            tr.classList.remove('e-altrow');\n        }\n        row.index = index;\n        row.edit = undefined;\n        row.isDirty = false;\n        tr.setAttribute(literals.ariaRowIndex, index.toString());\n        this.updateCellIndex(tr, index);\n    };\n    ContentRender.prototype.updateCellIndex = function (rowEle, index) {\n        for (var i = 0; i < rowEle.cells.length; i++) {\n            rowEle.cells[i].setAttribute('index', index.toString());\n        }\n    };\n    return ContentRender;\n}());\nexport { ContentRender };\n"]},"metadata":{},"sourceType":"module"}