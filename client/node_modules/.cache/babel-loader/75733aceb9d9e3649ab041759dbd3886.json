{"ast":null,"code":"import * as CONSTANT from './../base/constant';\nimport { extend } from '@syncfusion/ej2-base';\nimport * as EVENTS from './../../common/constant';\n/**\n * Link internal component\n *\n * @hidden\n\n */\n\nvar MDTable =\n/** @class */\nfunction () {\n  /**\n   * Constructor for creating the Formats plugin\n   *\n   * @param {IMDTable} options - specifies the options\n   * @hidden\n    */\n  function MDTable(options) {\n    extend(this, this, options, true);\n    this.selection = this.parent.markdownSelection;\n    this.addEventListener();\n  }\n\n  MDTable.prototype.addEventListener = function () {\n    this.parent.observer.on(CONSTANT.MD_TABLE, this.createTable, this);\n    this.parent.observer.on(EVENTS.KEY_DOWN_HANDLER, this.onKeyDown, this);\n  };\n\n  MDTable.prototype.removeEventListener = function () {\n    this.parent.observer.off(CONSTANT.MD_TABLE, this.createTable);\n    this.parent.observer.off(EVENTS.KEY_DOWN_HANDLER, this.onKeyDown);\n  };\n  /**\n   * markdown destroy method\n   *\n   * @returns {void}\n   * @hidden\n    */\n\n\n  MDTable.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n\n  MDTable.prototype.onKeyDown = function (e) {\n    if (e.event.action === 'insert-table') {\n      e.item = e.value;\n      this.createTable(e);\n    }\n  };\n\n  MDTable.prototype.createTable = function (e) {\n    this.element = this.parent.element;\n    var start = this.element.selectionStart;\n    var end = this.element.selectionEnd;\n    var textAreaInitial = this.element.value;\n    this.locale = e;\n    this.selection.save(start, end);\n    this.restore(this.element.selectionStart, this.element.selectionEnd, null);\n    this.insertTable(start, end, textAreaInitial, e);\n  };\n\n  MDTable.prototype.getTable = function () {\n    var table = '';\n    table += this.textNonEmpty();\n    table += this.tableHeader(this.locale);\n    table += this.tableCell(this.locale);\n    return table;\n  };\n\n  MDTable.prototype.tableHeader = function (e) {\n    var text = '';\n\n    for (var i = 1; i <= 2; i++) {\n      text += '|';\n\n      for (var j = 1; j <= 2; j++) {\n        if (i === 1) {\n          text += e.item.headingText + ' ' + j + '|';\n        } else {\n          text += '---------|';\n        }\n      }\n\n      text += this.insertLine();\n    }\n\n    return text;\n  };\n\n  MDTable.prototype.tableCell = function (e) {\n    var text = '';\n\n    for (var i = 1; i <= 2; i++) {\n      text += '|';\n\n      for (var j = 1; j <= 2; j++) {\n        text += e.item.colText + ' ' + this.convertToLetters(i) + j + '|';\n      }\n\n      text += this.insertLine();\n    }\n\n    text += this.insertLine();\n    return text;\n  };\n\n  MDTable.prototype.insertLine = function () {\n    var dummyElement = document.createElement('div');\n    dummyElement.innerHTML = '\\n';\n    return dummyElement.textContent;\n  };\n\n  MDTable.prototype.insertTable = function (start, end, textAreaInitial, e) {\n    var parentText = this.selection.getSelectedParentPoints(this.element);\n    var lastLineSplit = parentText[parentText.length - 1].text.split(' ', 2);\n    var syntaxArr = this.getFormatTag(); // eslint-disable-next-line\n\n    var syntaxCount = 0;\n\n    if (lastLineSplit.length < 2) {\n      this.element.value = this.updateValue(this.getTable());\n      this.makeSelection(textAreaInitial, start, end);\n    } else {\n      if (this.ensureFormatApply(parentText[parentText.length - 1].text)) {\n        this.checkValid(start, end, this.getTable(), textAreaInitial, e, lastLineSplit, parentText, syntaxArr);\n      } else {\n        this.element.value = this.updateValue(this.getTable());\n        this.makeSelection(textAreaInitial, start, end);\n      }\n    }\n\n    this.restore(this.element.selectionStart, this.element.selectionEnd, e);\n  };\n\n  MDTable.prototype.makeSelection = function (textAreaInitial, start, end) {\n    end = start + (textAreaInitial.length > 0 ? 12 : 10); //end is added 12 or 10 because to make the table heading selected\n\n    start += textAreaInitial.length > 0 ? 3 : 1; // Start is added 3 or 1 because new lines are added when inserting table\n\n    this.selection.setSelection(this.element, start, end);\n  };\n\n  MDTable.prototype.getFormatTag = function () {\n    var syntaxFormatKey = Object.keys(this.syntaxTag.Formats);\n    var syntaxListKey = Object.keys(this.syntaxTag.List);\n    var syntaxArr = [];\n\n    for (var i = 0; i < syntaxFormatKey.length; i++) {\n      syntaxArr.push(this.syntaxTag.Formats[syntaxFormatKey[i]]);\n    }\n\n    for (var j = 0; j < syntaxListKey.length; j++) {\n      syntaxArr.push(this.syntaxTag.List[syntaxListKey[j]]);\n    }\n\n    return syntaxArr;\n  };\n\n  MDTable.prototype.ensureFormatApply = function (line) {\n    var formatTags = this.getFormatTag();\n    var formatSplitZero = line.trim().split(' ', 2)[0] + ' ';\n\n    for (var i = 0; i < formatTags.length; i++) {\n      if (formatSplitZero === formatTags[i] || /^[\\d.]+[ ]+$/.test(formatSplitZero)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  MDTable.prototype.ensureStartValid = function (firstLine, parentText) {\n    var firstLineSplit = parentText[0].text.split(' ', 2);\n\n    for (var i = firstLine + 1; i <= firstLine + firstLineSplit[0].length + 1; i++) {\n      if (this.element.selectionStart === i || this.element.selectionEnd === i) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  MDTable.prototype.ensureEndValid = function (lastLine, formatSplitLength) {\n    for (var i = lastLine + 1; i <= lastLine + formatSplitLength + 1; i++) {\n      if (this.element.selectionEnd === i) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  MDTable.prototype.updateValueWithFormat = function (formatSplit, text) {\n    var textApplyFormat = this.element.value.substring(this.element.selectionEnd, this.element.value.length);\n    text += textApplyFormat.replace(textApplyFormat, formatSplit[0] + ' ' + textApplyFormat);\n    return this.element.value.substr(0, this.element.selectionStart) + text;\n  };\n\n  MDTable.prototype.updateValue = function (text) {\n    return this.element.value.substr(0, this.element.selectionStart) + text + this.element.value.substr(this.element.selectionEnd, this.element.value.length);\n  };\n\n  MDTable.prototype.checkValid = function (start, end, text, textAreaInitial, // eslint-disable-next-line\n  e, formatSplit, parentText, syntaxArr) {\n    if (this.ensureStartValid(parentText[0].start, parentText) && this.ensureEndValid(parentText[parentText.length - 1].start, formatSplit[0].length)) {\n      if (start === parentText[0].start) {\n        if (start !== end && end !== parentText[parentText.length - 1].end - 1) {\n          this.element.value = this.updateValueWithFormat(formatSplit, text);\n        } else {\n          this.element.value = this.updateValue(text);\n        }\n      } else if (end === parentText[parentText.length - 1].end - 1) {\n        this.element.value = this.updateValue(text);\n      } else {\n        this.element.value = this.updateValueWithFormat(formatSplit, text);\n      }\n\n      this.makeSelection(textAreaInitial, start, end);\n    }\n  };\n\n  MDTable.prototype.convertToLetters = function (rowNumber) {\n    var baseChar = 'A'.charCodeAt(0);\n    var letters = '';\n\n    do {\n      rowNumber -= 1;\n      letters = String.fromCharCode(baseChar + rowNumber % 26) + letters;\n      rowNumber = rowNumber / 26 >> 0;\n    } while (rowNumber > 0);\n\n    return letters;\n  };\n\n  MDTable.prototype.textNonEmpty = function () {\n    var emptyText = '';\n\n    if (this.isCursorBased() || this.isSelectionBased()) {\n      if (this.element.value.length > 0) {\n        emptyText += this.insertLine();\n        emptyText += this.insertLine(); // to append two new line when textarea having content.\n      }\n    }\n\n    return emptyText;\n  };\n\n  MDTable.prototype.isCursorBased = function () {\n    return this.element.selectionStart === this.element.selectionEnd;\n  };\n\n  MDTable.prototype.isSelectionBased = function () {\n    return this.element.selectionStart !== this.element.selectionEnd;\n  };\n\n  MDTable.prototype.restore = function (start, end, event) {\n    this.selection.save(start, end);\n    this.selection.restore(this.element);\n\n    if (event && event.callBack) {\n      event.callBack({\n        requestType: event.subCommand,\n        selectedText: this.selection.getSelectedText(this.element),\n        editorMode: 'Markdown',\n        event: event.event\n      });\n    }\n  };\n\n  return MDTable;\n}();\n\nexport { MDTable };","map":{"version":3,"sources":["/Users/yasaman/Documents/moj_adminpanel/adminpanel/node_modules/@syncfusion/ej2-richtexteditor/src/markdown-parser/plugin/table.js"],"names":["CONSTANT","extend","EVENTS","MDTable","options","selection","parent","markdownSelection","addEventListener","prototype","observer","on","MD_TABLE","createTable","KEY_DOWN_HANDLER","onKeyDown","removeEventListener","off","destroy","e","event","action","item","value","element","start","selectionStart","end","selectionEnd","textAreaInitial","locale","save","restore","insertTable","getTable","table","textNonEmpty","tableHeader","tableCell","text","i","j","headingText","insertLine","colText","convertToLetters","dummyElement","document","createElement","innerHTML","textContent","parentText","getSelectedParentPoints","lastLineSplit","length","split","syntaxArr","getFormatTag","syntaxCount","updateValue","makeSelection","ensureFormatApply","checkValid","setSelection","syntaxFormatKey","Object","keys","syntaxTag","Formats","syntaxListKey","List","push","line","formatTags","formatSplitZero","trim","test","ensureStartValid","firstLine","firstLineSplit","ensureEndValid","lastLine","formatSplitLength","updateValueWithFormat","formatSplit","textApplyFormat","substring","replace","substr","rowNumber","baseChar","charCodeAt","letters","String","fromCharCode","emptyText","isCursorBased","isSelectionBased","callBack","requestType","subCommand","selectedText","getSelectedText","editorMode"],"mappings":"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","sourcesContent":["import * as CONSTANT from './../base/constant';\nimport { extend } from '@syncfusion/ej2-base';\nimport * as EVENTS from './../../common/constant';\n/**\n * Link internal component\n *\n * @hidden\n\n */\nvar MDTable = /** @class */ (function () {\n    /**\n     * Constructor for creating the Formats plugin\n     *\n     * @param {IMDTable} options - specifies the options\n     * @hidden\n\n     */\n    function MDTable(options) {\n        extend(this, this, options, true);\n        this.selection = this.parent.markdownSelection;\n        this.addEventListener();\n    }\n    MDTable.prototype.addEventListener = function () {\n        this.parent.observer.on(CONSTANT.MD_TABLE, this.createTable, this);\n        this.parent.observer.on(EVENTS.KEY_DOWN_HANDLER, this.onKeyDown, this);\n    };\n    MDTable.prototype.removeEventListener = function () {\n        this.parent.observer.off(CONSTANT.MD_TABLE, this.createTable);\n        this.parent.observer.off(EVENTS.KEY_DOWN_HANDLER, this.onKeyDown);\n    };\n    /**\n     * markdown destroy method\n     *\n     * @returns {void}\n     * @hidden\n\n     */\n    MDTable.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    MDTable.prototype.onKeyDown = function (e) {\n        if (e.event.action === 'insert-table') {\n            e.item = e.value;\n            this.createTable(e);\n        }\n    };\n    MDTable.prototype.createTable = function (e) {\n        this.element = this.parent.element;\n        var start = this.element.selectionStart;\n        var end = this.element.selectionEnd;\n        var textAreaInitial = this.element.value;\n        this.locale = e;\n        this.selection.save(start, end);\n        this.restore(this.element.selectionStart, this.element.selectionEnd, null);\n        this.insertTable(start, end, textAreaInitial, e);\n    };\n    MDTable.prototype.getTable = function () {\n        var table = '';\n        table += this.textNonEmpty();\n        table += this.tableHeader(this.locale);\n        table += this.tableCell(this.locale);\n        return table;\n    };\n    MDTable.prototype.tableHeader = function (e) {\n        var text = '';\n        for (var i = 1; i <= 2; i++) {\n            text += '|';\n            for (var j = 1; j <= 2; j++) {\n                if (i === 1) {\n                    text += e.item.headingText + ' ' + j + '|';\n                }\n                else {\n                    text += '---------|';\n                }\n            }\n            text += this.insertLine();\n        }\n        return text;\n    };\n    MDTable.prototype.tableCell = function (e) {\n        var text = '';\n        for (var i = 1; i <= 2; i++) {\n            text += '|';\n            for (var j = 1; j <= 2; j++) {\n                text += e.item.colText + ' ' + this.convertToLetters(i) + j + '|';\n            }\n            text += this.insertLine();\n        }\n        text += this.insertLine();\n        return text;\n    };\n    MDTable.prototype.insertLine = function () {\n        var dummyElement = document.createElement('div');\n        dummyElement.innerHTML = '\\n';\n        return dummyElement.textContent;\n    };\n    MDTable.prototype.insertTable = function (start, end, textAreaInitial, e) {\n        var parentText = this.selection.getSelectedParentPoints(this.element);\n        var lastLineSplit = parentText[parentText.length - 1].text.split(' ', 2);\n        var syntaxArr = this.getFormatTag();\n        // eslint-disable-next-line\n        var syntaxCount = 0;\n        if (lastLineSplit.length < 2) {\n            this.element.value = this.updateValue(this.getTable());\n            this.makeSelection(textAreaInitial, start, end);\n        }\n        else {\n            if (this.ensureFormatApply(parentText[parentText.length - 1].text)) {\n                this.checkValid(start, end, this.getTable(), textAreaInitial, e, lastLineSplit, parentText, syntaxArr);\n            }\n            else {\n                this.element.value = this.updateValue(this.getTable());\n                this.makeSelection(textAreaInitial, start, end);\n            }\n        }\n        this.restore(this.element.selectionStart, this.element.selectionEnd, e);\n    };\n    MDTable.prototype.makeSelection = function (textAreaInitial, start, end) {\n        end = start + (textAreaInitial.length > 0 ? 12 : 10); //end is added 12 or 10 because to make the table heading selected\n        start += textAreaInitial.length > 0 ? 3 : 1; // Start is added 3 or 1 because new lines are added when inserting table\n        this.selection.setSelection(this.element, start, end);\n    };\n    MDTable.prototype.getFormatTag = function () {\n        var syntaxFormatKey = Object.keys(this.syntaxTag.Formats);\n        var syntaxListKey = Object.keys(this.syntaxTag.List);\n        var syntaxArr = [];\n        for (var i = 0; i < syntaxFormatKey.length; i++) {\n            syntaxArr.push(this.syntaxTag.Formats[syntaxFormatKey[i]]);\n        }\n        for (var j = 0; j < syntaxListKey.length; j++) {\n            syntaxArr.push(this.syntaxTag.List[syntaxListKey[j]]);\n        }\n        return syntaxArr;\n    };\n    MDTable.prototype.ensureFormatApply = function (line) {\n        var formatTags = this.getFormatTag();\n        var formatSplitZero = line.trim().split(' ', 2)[0] + ' ';\n        for (var i = 0; i < formatTags.length; i++) {\n            if (formatSplitZero === formatTags[i] || /^[\\d.]+[ ]+$/.test(formatSplitZero)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    MDTable.prototype.ensureStartValid = function (firstLine, parentText) {\n        var firstLineSplit = parentText[0].text.split(' ', 2);\n        for (var i = firstLine + 1; i <= firstLine + firstLineSplit[0].length + 1; i++) {\n            if (this.element.selectionStart === i || this.element.selectionEnd === i) {\n                return false;\n            }\n        }\n        return true;\n    };\n    MDTable.prototype.ensureEndValid = function (lastLine, formatSplitLength) {\n        for (var i = lastLine + 1; i <= lastLine + formatSplitLength + 1; i++) {\n            if (this.element.selectionEnd === i) {\n                return false;\n            }\n        }\n        return true;\n    };\n    MDTable.prototype.updateValueWithFormat = function (formatSplit, text) {\n        var textApplyFormat = this.element.value.substring(this.element.selectionEnd, this.element.value.length);\n        text += textApplyFormat.replace(textApplyFormat, (formatSplit[0] + ' ' + textApplyFormat));\n        return this.element.value.substr(0, this.element.selectionStart) + text;\n    };\n    MDTable.prototype.updateValue = function (text) {\n        return this.element.value.substr(0, this.element.selectionStart) + text +\n            this.element.value.substr(this.element.selectionEnd, this.element.value.length);\n    };\n    MDTable.prototype.checkValid = function (start, end, text, textAreaInitial, \n    // eslint-disable-next-line\n    e, formatSplit, parentText, syntaxArr) {\n        if (this.ensureStartValid(parentText[0].start, parentText) &&\n            this.ensureEndValid(parentText[parentText.length - 1].start, formatSplit[0].length)) {\n            if (start === parentText[0].start) {\n                if (start !== end && end !== (parentText[parentText.length - 1].end - 1)) {\n                    this.element.value = this.updateValueWithFormat(formatSplit, text);\n                }\n                else {\n                    this.element.value = this.updateValue(text);\n                }\n            }\n            else if (end === parentText[parentText.length - 1].end - 1) {\n                this.element.value = this.updateValue(text);\n            }\n            else {\n                this.element.value = this.updateValueWithFormat(formatSplit, text);\n            }\n            this.makeSelection(textAreaInitial, start, end);\n        }\n    };\n    MDTable.prototype.convertToLetters = function (rowNumber) {\n        var baseChar = ('A').charCodeAt(0);\n        var letters = '';\n        do {\n            rowNumber -= 1;\n            letters = String.fromCharCode(baseChar + (rowNumber % 26)) + letters;\n            rowNumber = (rowNumber / 26) >> 0;\n        } while (rowNumber > 0);\n        return letters;\n    };\n    MDTable.prototype.textNonEmpty = function () {\n        var emptyText = '';\n        if (this.isCursorBased() || this.isSelectionBased()) {\n            if (this.element.value.length > 0) {\n                emptyText += this.insertLine();\n                emptyText += this.insertLine(); // to append two new line when textarea having content.\n            }\n        }\n        return emptyText;\n    };\n    MDTable.prototype.isCursorBased = function () {\n        return this.element.selectionStart === this.element.selectionEnd;\n    };\n    MDTable.prototype.isSelectionBased = function () {\n        return this.element.selectionStart !== this.element.selectionEnd;\n    };\n    MDTable.prototype.restore = function (start, end, event) {\n        this.selection.save(start, end);\n        this.selection.restore(this.element);\n        if (event && event.callBack) {\n            event.callBack({\n                requestType: event.subCommand,\n                selectedText: this.selection.getSelectedText(this.element),\n                editorMode: 'Markdown',\n                event: event.event\n            });\n        }\n    };\n    return MDTable;\n}());\nexport { MDTable };\n"]},"metadata":{},"sourceType":"module"}