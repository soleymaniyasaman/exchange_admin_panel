{"ast":null,"code":"var _jsxFileName = \"/Users/yasaman/Documents/moj_adminpanel/adminpanel/src/utils/hooks.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from \"react\";\nimport { api } from \"./api\";\nimport { Snackbar } from '@material-ui/core';\nimport { BASE_URL } from \"./constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst dataFetchReducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_INIT':\n      return { ...state,\n        isLoading: true,\n        hasError: false\n      };\n\n    case 'FETCH_SUCCESS':\n      return { ...state,\n        isLoading: false,\n        hasError: false,\n        data: action.payload\n      };\n\n    case 'FETCH_FAILURE':\n      return { ...state,\n        isLoading: false,\n        hasError: true\n      };\n\n    default:\n      throw new Error();\n  }\n};\n\nexport const useFetchApi = (initialConf, initialData) => {\n  _s();\n\n  const [configs, setConfigs] = useState(initialConf);\n\n  const createApiConfigs = (method, baseUrl, url, data) => setConfigs({\n    method,\n    baseURL: !baseUrl.startsWith(\"http\") ? BASE_URL(baseUrl) : baseUrl,\n    url,\n    data\n  });\n\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    hasError: false,\n    data: initialData,\n    listCount: 0\n  });\n  useEffect(() => {\n    let didCancel = false;\n\n    if (configs) {\n      const fetchData = async () => {\n        dispatch({\n          type: 'FETCH_INIT'\n        });\n\n        try {\n          const result = await api(configs);\n          console.log(\"result\", result);\n\n          if (!didCancel) {\n            if (result.data.message === \"ok\") {\n              dispatch({\n                type: 'FETCH_SUCCESS',\n                payload: result.data.result\n              });\n            }\n          }\n        } catch (error) {\n          if (!didCancel) {\n            dispatch({\n              type: 'FETCH_FAILURE'\n            });\n          }\n        }\n      };\n\n      fetchData();\n    }\n\n    ;\n    return () => {\n      didCancel = true;\n    };\n  }, [configs]);\n  return [state, createApiConfigs];\n};\n\n_s(useFetchApi, \"scYlh5RYrYvNsnC2mDmtnVzDl80=\");\n\nexport const useSnackbar = (message, duration, type) => {\n  _s2();\n\n  const [snackOpen, setSnackOpen] = useState(false);\n  return /*#__PURE__*/_jsxDEV(Snackbar // anchorOrigin={{ vertical, horizontal }}\n  , {\n    open: snackOpen,\n    onClose: () => setSnackOpen(false),\n    message: \"\\u062E\\u0637\\u0627\\u06CC\\u06CC \\u0631\\u062E \\u062F\\u0627\\u062F\\u0647 \\u0627\\u0633\\u062A\",\n    autoHideDuration: 1000 // key={vertical + horizontal}\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 12\n  }, this);\n};\n\n_s2(useSnackbar, \"5MT5YVXAEr9kmJKjaKWjGvRdgTQ=\");","map":{"version":3,"sources":["/Users/yasaman/Documents/moj_adminpanel/adminpanel/src/utils/hooks.js"],"names":["React","useState","useEffect","useReducer","api","Snackbar","BASE_URL","dataFetchReducer","state","action","type","isLoading","hasError","data","payload","Error","useFetchApi","initialConf","initialData","configs","setConfigs","createApiConfigs","method","baseUrl","url","baseURL","startsWith","dispatch","listCount","didCancel","fetchData","result","console","log","message","error","useSnackbar","duration","snackOpen","setSnackOpen"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAAQC,QAAR,QAAwB,mBAAxB;AACA,SAASC,QAAT,QAAyB,aAAzB;;;AAGA,MAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,YAAL;AACE,aAAO,EACH,GAAGF,KADA;AAEHG,QAAAA,SAAS,EAAE,IAFR;AAGHC,QAAAA,QAAQ,EAAE;AAHP,OAAP;;AAKF,SAAK,eAAL;AACE,aAAO,EACH,GAAGJ,KADA;AAEHG,QAAAA,SAAS,EAAE,KAFR;AAGHC,QAAAA,QAAQ,EAAE,KAHP;AAIHC,QAAAA,IAAI,EAAEJ,MAAM,CAACK;AAJV,OAAP;;AAMF,SAAK,eAAL;AACE,aAAO,EACH,GAAGN,KADA;AAEHG,QAAAA,SAAS,EAAE,KAFR;AAGHC,QAAAA,QAAQ,EAAE;AAHP,OAAP;;AAKF;AACE,YAAM,IAAIG,KAAJ,EAAN;AArBN;AAuBD,CAxBH;;AA2BA,OAAO,MAAMC,WAAW,GAAG,CAACC,WAAD,EAAcC,WAAd,KAA8B;AAAA;;AAGrD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAACgB,WAAD,CAAtC;;AAEA,QAAMI,gBAAgB,GAAG,CAACC,MAAD,EAASC,OAAT,EAAkBC,GAAlB,EAAuBX,IAAvB,KAAgCO,UAAU,CAC/D;AACIE,IAAAA,MADJ;AAEIG,IAAAA,OAAO,EAAE,CAACF,OAAO,CAACG,UAAR,CAAmB,MAAnB,CAAD,GAA8BpB,QAAQ,CAACiB,OAAD,CAAtC,GAAkDA,OAF/D;AAGIC,IAAAA,GAHJ;AAIIX,IAAAA;AAJJ,GAD+D,CAAnE;;AASA,QAAM,CAACL,KAAD,EAAQmB,QAAR,IAAoBxB,UAAU,CAACI,gBAAD,EAAmB;AACnDI,IAAAA,SAAS,EAAE,KADwC;AAEnDC,IAAAA,QAAQ,EAAE,KAFyC;AAGnDC,IAAAA,IAAI,EAAEK,WAH6C;AAInDU,IAAAA,SAAS,EAAE;AAJwC,GAAnB,CAApC;AAOA1B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI2B,SAAS,GAAG,KAAhB;;AACA,QAAIV,OAAJ,EAAY;AACR,YAAMW,SAAS,GAAG,YAAY;AAC1BH,QAAAA,QAAQ,CAAC;AAAEjB,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAR;;AACA,YAAI;AACA,gBAAMqB,MAAM,GAAG,MAAM3B,GAAG,CAACe,OAAD,CAAxB;AACAa,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBF,MAArB;;AACA,cAAI,CAACF,SAAL,EAAe;AACX,gBAAIE,MAAM,CAAClB,IAAP,CAAYqB,OAAZ,KAAwB,IAA5B,EAAiC;AAC7BP,cAAAA,QAAQ,CAAC;AAAEjB,gBAAAA,IAAI,EAAE,eAAR;AAAyBI,gBAAAA,OAAO,EAAEiB,MAAM,CAAClB,IAAP,CAAYkB;AAA9C,eAAD,CAAR;AACH;AACJ;AACJ,SARD,CAQE,OAAOI,KAAP,EAAc;AACZ,cAAI,CAACN,SAAL,EAAgB;AACZF,YAAAA,QAAQ,CAAC;AAAEjB,cAAAA,IAAI,EAAE;AAAR,aAAD,CAAR;AACH;AACJ;AACJ,OAfD;;AAgBAoB,MAAAA,SAAS;AACZ;;AAAA;AACD,WAAO,MAAM;AACTD,MAAAA,SAAS,GAAG,IAAZ;AACH,KAFD;AAIH,GAzBQ,EAyBN,CAACV,OAAD,CAzBM,CAAT;AA2BA,SAAO,CAACX,KAAD,EAAQa,gBAAR,CAAP;AACD,CAjDI;;GAAML,W;;AAoDX,OAAO,MAAMoB,WAAW,GAAG,CAACF,OAAD,EAAUG,QAAV,EAAoB3B,IAApB,KAA6B;AAAA;;AACtD,QAAM,CAAC4B,SAAD,EAAYC,YAAZ,IAA4BtC,QAAQ,CAAC,KAAD,CAA1C;AACA,sBAAO,QAAC,QAAD,CACC;AADD;AAEC,IAAA,IAAI,EAAEqC,SAFP;AAGC,IAAA,OAAO,EAAG,MAAMC,YAAY,CAAC,KAAD,CAH7B;AAIC,IAAA,OAAO,EAAC,yFAJT;AAKC,IAAA,gBAAgB,EAAE,IALnB,CAMC;;AAND;AAAA;AAAA;AAAA;AAAA,UAAP;AAQD,CAVM;;IAAMH,W","sourcesContent":["import React, { useState, useEffect, useReducer } from \"react\";\nimport { api } from \"./api\";\nimport {Snackbar } from '@material-ui/core';\nimport { BASE_URL } from \"./constants\";\n\n\nconst dataFetchReducer = (state, action) => {\n    switch (action.type) {\n        case 'FETCH_INIT':\n          return { \n              ...state,\n              isLoading: true,\n              hasError: false\n            };\n        case 'FETCH_SUCCESS':\n          return { \n              ...state,\n              isLoading: false,\n              hasError: false,\n              data: action.payload,\n            };\n        case 'FETCH_FAILURE':\n          return { \n              ...state,\n              isLoading: false,\n              hasError: true,\n            };\n        default:\n          throw new Error();\n      }\n  };\n\n\nexport const useFetchApi = (initialConf, initialData) => {\n\n    \n    const [configs, setConfigs] = useState(initialConf);\n    \n    const createApiConfigs = (method, baseUrl, url, data) => setConfigs(\n        {\n            method,\n            baseURL: !baseUrl.startsWith(\"http\") ? BASE_URL(baseUrl) : baseUrl,\n            url,\n            data,\n        }\n    )\n\n    const [state, dispatch] = useReducer(dataFetchReducer, {\n        isLoading: false,\n        hasError: false,\n        data: initialData,\n        listCount: 0\n    });\n\n    useEffect(() => {\n        let didCancel = false;\n        if (configs){\n            const fetchData = async () => {\n                dispatch({ type: 'FETCH_INIT' });\n                try {\n                    const result = await api(configs);\n                    console.log(\"result\",result)\n                    if (!didCancel){\n                        if (result.data.message === \"ok\"){\n                            dispatch({ type: 'FETCH_SUCCESS', payload: result.data.result });\n                        }\n                    }\n                } catch (error) {\n                    if (!didCancel) {\n                        dispatch({ type: 'FETCH_FAILURE' });\n                    }\n                }\n            }\n            fetchData();\n        };\n        return () => {\n            didCancel = true;\n        };\n\n    }, [configs]);\n   \n    return [state, createApiConfigs];\n  };\n\n\n  export const useSnackbar = (message, duration, type) => {\n    const [snackOpen, setSnackOpen] = useState(false)\n    return <Snackbar\n            // anchorOrigin={{ vertical, horizontal }}\n            open={snackOpen}\n            onClose={ () => setSnackOpen(false) }\n            message=\"خطایی رخ داده است\"\n            autoHideDuration={1000}\n            // key={vertical + horizontal}\n        />\n  }\n"]},"metadata":{},"sourceType":"module"}