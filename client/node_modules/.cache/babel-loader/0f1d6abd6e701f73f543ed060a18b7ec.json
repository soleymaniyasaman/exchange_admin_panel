{"ast":null,"code":"var _jsxFileName = \"/Users/yasaman/Documents/moj_adminpanel/adminpanel/src/components/users/userLoginActivity/index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { Button } from '@material-ui/core';\nimport { DataGrid, useGridSlotComponentProps } from '@material-ui/data-grid';\nimport { Pagination } from '@material-ui/lab';\nimport { useFetchApi } from \"../../../utils/hooks\";\nimport { ADMIN_BASE_URL, BASE_URL, TRADING_APP, USERS_ORDERS, USERS_ACTIVITY, IAM_APP, TICKET_DETAIL } from '../../../utils/constants';\nimport { timeToStr, UrlQuery } from '../../../utils/utils';\nimport { useHistory, useParams } from 'react-router-dom';\nimport Filters from './filters';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  root: {\n    // display: 'flex',\n    margin: '0 auto'\n  }\n});\n\nfunction CustomPagination() {\n  _s();\n\n  const {\n    state,\n    apiRef\n  } = useGridSlotComponentProps();\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(Pagination, {\n    className: classes.root,\n    shape: \"rounded\",\n    color: \"primary\" // variant=\"contained\"\n    ,\n    count: state.pagination.pageCount,\n    page: state.pagination.page + 1,\n    onChange: (event, value) => apiRef.current.setPage(value - 1)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CustomPagination, \"gf2qYnidDJcn0QA0NABAMUoYHe0=\", false, function () {\n  return [useGridSlotComponentProps, useStyles];\n});\n\n_c = CustomPagination;\n\nfunction UserLoginActivity(props) {\n  _s2();\n\n  var _data$items, _data$items2;\n\n  const history = useHistory();\n  const columns = [{\n    field: 'created_at',\n    headerName: 'شناسه',\n    flex: 1,\n    type: 'string',\n    sortable: false,\n    headerClassName: 'grid-header',\n    headerAlign: 'center',\n    align: 'center',\n    valueFormatter: params => timeToStr(params.value, \"HH:mm  -   jYYYY/jMM/jDD\") // renderCell: (params) => `${params.row?.tracking_code.slice(0, 8)}`\n\n  }, {\n    field: 'is_2fa',\n    headerName: 'سمت سفارش',\n    flex: 1,\n    sortable: false,\n    headerClassName: 'grid-header',\n    headerAlign: 'center',\n    align: 'center',\n    renderCell: params => console.log(\"important ===>\", params.value) // renderCell: (params) => (\n    //   <div className=\"d-flex\">\n    //     {params.row?.trade_type === \"sell\" ? <span className=\"text-danger\">فروش</span> : <span className=\"text-success\">خرید</span>}\n    //   </div>\n    // )\n\n  }, {\n    field: 'user_ip',\n    headerName: 'نوع سفارش',\n    flex: 1,\n    sortable: false,\n    headerClassName: 'grid-header',\n    headerAlign: 'center',\n    align: 'center' // renderCell: (params) => (\n    //   <div className=\"d-flex\">\n    //     {params.row?.trade_type === \"limit\" ? \"محدود\" : \"سریع\"}\n    //   </div>\n    // )\n\n  }, {\n    field: 'login_successful',\n    headerName: 'نوع ارز',\n    flex: 0.5,\n    sortable: false,\n    headerClassName: 'grid-header',\n    headerAlign: 'center',\n    align: 'center'\n  }, {\n    field: 'browser',\n    headerName: 'قیمت سفارش',\n    // description: 'This column has a value getter and is not sortable.',\n    sortable: false,\n    align: 'center',\n    flex: 1,\n    headerClassName: 'grid-header',\n    headerAlign: 'center'\n  } // {\n  //   field: 'average_unit_price',\n  //   headerName: ' میانگین قیمت سفارش',\n  //   sortable: false,\n  //   align: 'center',\n  //   flex: 1,\n  //   headerClassName: 'grid-header',\n  //   headerAlign: 'center',\n  // },\n  // {\n  //   field: 'quantity',\n  //   headerName: 'مقدار',\n  //   // description: 'This column has a value getter and is not sortable.',\n  //   sortable: false,\n  //   align: 'center',\n  //   flex: 0.5,\n  //   headerClassName: 'grid-header',\n  //   headerAlign: 'center',\n  // },\n  // {\n  //   field: 'total',\n  //   headerName: 'مبلغ کل',\n  //   // description: 'This column has a value getter and is not sortable.',\n  //   sortable: false,\n  //   align: 'center',\n  //   flex: 1,\n  //   headerClassName: 'grid-header',\n  //   headerAlign: 'center',\n  //   // renderCell: (params) => parseInt(params?.row?.unit_price) * parseInt(params?.row?.quantity)\n  // },\n  // {\n  //   field: 'progress',\n  //   headerName: 'پرشده',\n  //   // description: 'This column has a value getter and is not sortable.',\n  //   sortable: false,\n  //   align: 'center',\n  //   flex: 0.5,\n  //   headerClassName: 'grid-header',\n  //   headerAlign: 'center',\n  // },\n  // {\n  //   field: 'created_at',\n  //   headerName: 'تاریخ',\n  //   // description: 'This column has a value getter and is not sortable.',\n  //   sortable: false,\n  //   align: 'center',\n  //   flex: 1,\n  //   headerClassName: 'grid-header',\n  //   headerAlign: 'center',\n  //   // valueFormatter: data => timeToStr(data.value, \"HH:mm  -   jYYYY/jMM/jDD\")\n  // },\n  // {\n  //   field: 'status',\n  //   headerName: 'وضعیت',\n  //   // description: 'This column has a value getter and is not sortable.',\n  //   sortable: false,\n  //   align: 'center',\n  //   flex: 1,\n  //   headerClassName: 'grid-header',\n  //   headerAlign: 'center',\n  //   // renderCell: (params) => <div className=\"d-flex justify-content-center w-100\">\n  //   //   {\n  //   //   params?.value === \"in_progress\" ? (<Button variant=\"outlined\" onClick={() => { }} className=\"ms-2 border-danger text-danger\">لغو سفارش</Button>)\n  //   //     : (\n  //   //       params?.value === \"success\" ? 'انجام شده' : \n  //   //       params?.value === \"cancel_by_user\" ? 'توسط کاربر لغو شده' : \n  //   //       params?.value === \"failed\" ? 'ناموفق' : \n  //   //       params?.value === \"pending\" ? 'درحال انتظار':'' \n  //   //     )\n  //   //   }\n  //   // </div>\n  // }\n  ];\n  const [params, setParams] = React.useState({\n    page: 1,\n    size: 10\n  });\n  const [{\n    data,\n    isLoading,\n    hasError\n  }, doFetch] = useFetchApi(undefined, []);\n  const {\n    id\n  } = useParams();\n  React.useEffect(() => {\n    if (id) {\n      // doFetch(\"GET\", TRADING_APP, UrlQuery(USERS_ORDERS, { ...params, owner_id: id }))\n      doFetch(\"GET\", IAM_APP, UrlQuery(USERS_ACTIVITY(id), { ...params\n      })); // doFetch(\"GET\", IAM_APP, USERS_ACTIVITY(id))\n      // doFetch(\"GET\", IAM_APP, TICKET_DETAIL(id))\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \" d-flex align-items-center justify-content-between w-auto mx-auto mt-5 pt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/assests/drawer/Polygon.svg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font_title_name me-1\",\n          children: \"\\u0633\\u0641\\u0627\\u0631\\u0634\\u200C\\u0647\\u0627 \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Filters, {\n        params: params,\n        setParams: setParams\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex px-3\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexGrow: 1,\n          width: \"100%\",\n          height: \"100%\"\n        },\n        children: [console.log(\"result\", data.items), /*#__PURE__*/_jsxDEV(DataGrid, {\n          style: {\n            border: 0\n          },\n          autoHeight: true,\n          classes: {\n            root: \"grid-header-wrapper-alt\"\n          },\n          rows: (_data$items = data === null || data === void 0 ? void 0 : data.items) !== null && _data$items !== void 0 ? _data$items : [],\n          loading: isLoading,\n          columns: columns,\n          getRowClassName: params => 'grid-content-alt',\n          headerHeight: 50,\n          rowHeight: 52,\n          isRowSelectable: false,\n          components: {\n            Pagination: CustomPagination\n          },\n          pageSize: 10,\n          rowCount: data === null || data === void 0 ? void 0 : (_data$items2 = data.items) === null || _data$items2 === void 0 ? void 0 : _data$items2.length,\n          paginationMode: \"server\",\n          onPageChange: param => doFetch(\"GET\", IAM_APP, UrlQuery(USERS_ACTIVITY(id), { ...params,\n            owner_id: id,\n            page: param + 1\n          })),\n          disableSelectionOnClick: true,\n          disableColumnMenu: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 356,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(UserLoginActivity, \"w6Z83n/TlVW8om/jvgvCkHoE6c4=\", false, function () {\n  return [useHistory, useFetchApi, useParams];\n});\n\n_c2 = UserLoginActivity;\nexport default UserLoginActivity;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CustomPagination\");\n$RefreshReg$(_c2, \"UserLoginActivity\");","map":{"version":3,"sources":["/Users/yasaman/Documents/moj_adminpanel/adminpanel/src/components/users/userLoginActivity/index.js"],"names":["React","makeStyles","Button","DataGrid","useGridSlotComponentProps","Pagination","useFetchApi","ADMIN_BASE_URL","BASE_URL","TRADING_APP","USERS_ORDERS","USERS_ACTIVITY","IAM_APP","TICKET_DETAIL","timeToStr","UrlQuery","useHistory","useParams","Filters","useStyles","root","margin","CustomPagination","state","apiRef","classes","pagination","pageCount","page","event","value","current","setPage","UserLoginActivity","props","history","columns","field","headerName","flex","type","sortable","headerClassName","headerAlign","align","valueFormatter","params","renderCell","console","log","setParams","useState","size","data","isLoading","hasError","doFetch","undefined","id","useEffect","flexGrow","width","height","items","border","length","param","owner_id"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { makeStyles } from '@material-ui/styles';\n\nimport { Button } from '@material-ui/core';\n\nimport { DataGrid, useGridSlotComponentProps } from '@material-ui/data-grid';\n\nimport { Pagination } from '@material-ui/lab';\n\nimport { useFetchApi } from \"../../../utils/hooks\";\n\nimport { ADMIN_BASE_URL, BASE_URL, TRADING_APP, USERS_ORDERS ,USERS_ACTIVITY,IAM_APP ,TICKET_DETAIL} from '../../../utils/constants';\n\nimport { timeToStr, UrlQuery } from '../../../utils/utils';\n\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport Filters from './filters';\n\n\nconst useStyles = makeStyles({\n\n  root: {\n\n    // display: 'flex',\n\n    margin: '0 auto',\n\n  },\n\n});\n\nfunction CustomPagination() {\n\n  const { state, apiRef } = useGridSlotComponentProps();\n\n  const classes = useStyles();\n\n  return (\n\n    <Pagination\n\n      className={classes.root}\n\n      shape=\"rounded\"\n\n      color=\"primary\"\n\n      // variant=\"contained\"\n\n      count={state.pagination.pageCount}\n\n      page={state.pagination.page + 1}\n\n      onChange={(event, value) => apiRef.current.setPage(value - 1)}\n\n    />\n\n  );\n\n}\n\nfunction UserLoginActivity(props) {\n\n  const history = useHistory()\n\n  const columns = [\n\n    {\n\n      field: 'created_at',\n\n      headerName: 'شناسه',\n\n      flex: 1,\n\n      type: 'string',\n\n      sortable: false,\n\n      headerClassName: 'grid-header',\n\n      headerAlign: 'center',\n\n      align: 'center',\n\n      valueFormatter: params => timeToStr(params.value, \"HH:mm  -   jYYYY/jMM/jDD\")\n      // renderCell: (params) => `${params.row?.tracking_code.slice(0, 8)}`\n\n    },\n\n    {\n\n      field: 'is_2fa',\n\n      headerName: 'سمت سفارش',\n\n      flex: 1,\n\n      sortable: false,\n\n      headerClassName: 'grid-header',\n\n      headerAlign: 'center',\n\n      align: 'center',\n\n      renderCell: (params) => console.log(\"important ===>\",params.value)\n\n      // renderCell: (params) => (\n\n      //   <div className=\"d-flex\">\n\n      //     {params.row?.trade_type === \"sell\" ? <span className=\"text-danger\">فروش</span> : <span className=\"text-success\">خرید</span>}\n\n      //   </div>\n\n      // )\n\n    },\n\n    {\n\n      field: 'user_ip',\n\n      headerName: 'نوع سفارش',\n\n      flex: 1,\n\n      sortable: false,\n\n      headerClassName: 'grid-header',\n\n      headerAlign: 'center',\n\n      align: 'center',\n\n      // renderCell: (params) => (\n\n      //   <div className=\"d-flex\">\n\n      //     {params.row?.trade_type === \"limit\" ? \"محدود\" : \"سریع\"}\n\n      //   </div>\n\n      // )\n\n    },\n\n    {\n\n      field: 'login_successful',\n\n      headerName: 'نوع ارز',\n\n      flex: 0.5,\n\n      sortable: false,\n\n      headerClassName: 'grid-header',\n\n      headerAlign: 'center',\n\n      align: 'center',\n\n    },\n\n    {\n\n      field: 'browser',\n\n      headerName: 'قیمت سفارش',\n\n      // description: 'This column has a value getter and is not sortable.',\n\n      sortable: false,\n\n      align: 'center',\n\n      flex: 1,\n\n      headerClassName: 'grid-header',\n\n      headerAlign: 'center',\n\n    },\n\n    // {\n\n    //   field: 'average_unit_price',\n\n    //   headerName: ' میانگین قیمت سفارش',\n\n    //   sortable: false,\n\n    //   align: 'center',\n\n    //   flex: 1,\n\n    //   headerClassName: 'grid-header',\n\n    //   headerAlign: 'center',\n\n    // },\n\n    // {\n\n    //   field: 'quantity',\n\n    //   headerName: 'مقدار',\n\n    //   // description: 'This column has a value getter and is not sortable.',\n\n    //   sortable: false,\n\n    //   align: 'center',\n\n    //   flex: 0.5,\n\n    //   headerClassName: 'grid-header',\n\n    //   headerAlign: 'center',\n\n    // },\n\n    // {\n\n    //   field: 'total',\n\n    //   headerName: 'مبلغ کل',\n\n    //   // description: 'This column has a value getter and is not sortable.',\n\n    //   sortable: false,\n\n    //   align: 'center',\n\n    //   flex: 1,\n\n    //   headerClassName: 'grid-header',\n\n    //   headerAlign: 'center',\n\n    //   // renderCell: (params) => parseInt(params?.row?.unit_price) * parseInt(params?.row?.quantity)\n\n    // },\n\n    // {\n\n    //   field: 'progress',\n\n    //   headerName: 'پرشده',\n\n    //   // description: 'This column has a value getter and is not sortable.',\n\n    //   sortable: false,\n\n    //   align: 'center',\n\n    //   flex: 0.5,\n\n    //   headerClassName: 'grid-header',\n\n    //   headerAlign: 'center',\n\n    // },\n\n    // {\n\n    //   field: 'created_at',\n\n    //   headerName: 'تاریخ',\n\n    //   // description: 'This column has a value getter and is not sortable.',\n\n    //   sortable: false,\n\n    //   align: 'center',\n\n    //   flex: 1,\n\n    //   headerClassName: 'grid-header',\n\n    //   headerAlign: 'center',\n\n    //   // valueFormatter: data => timeToStr(data.value, \"HH:mm  -   jYYYY/jMM/jDD\")\n\n    // },\n\n    // {\n\n    //   field: 'status',\n\n    //   headerName: 'وضعیت',\n\n    //   // description: 'This column has a value getter and is not sortable.',\n\n    //   sortable: false,\n\n    //   align: 'center',\n\n    //   flex: 1,\n\n    //   headerClassName: 'grid-header',\n\n    //   headerAlign: 'center',\n\n    //   // renderCell: (params) => <div className=\"d-flex justify-content-center w-100\">\n    //   //   {\n\n    //   //   params?.value === \"in_progress\" ? (<Button variant=\"outlined\" onClick={() => { }} className=\"ms-2 border-danger text-danger\">لغو سفارش</Button>)\n\n    //   //     : (\n\n    //   //       params?.value === \"success\" ? 'انجام شده' : \n    //   //       params?.value === \"cancel_by_user\" ? 'توسط کاربر لغو شده' : \n    //   //       params?.value === \"failed\" ? 'ناموفق' : \n    //   //       params?.value === \"pending\" ? 'درحال انتظار':'' \n            \n\n    //   //     )\n\n    //   //   }\n\n    //   // </div>\n\n    // }\n\n  ];\n\n  const [params, setParams] = React.useState({  page: 1,size: 10 })\n\n  const [{ data, isLoading, hasError }, doFetch] = useFetchApi(undefined, [])\n\n  const { id } = useParams()\n\n  React.useEffect(() => {\n\n    if (id) {\n\n      \n        // doFetch(\"GET\", TRADING_APP, UrlQuery(USERS_ORDERS, { ...params, owner_id: id }))\n      doFetch(\"GET\", IAM_APP, UrlQuery(USERS_ACTIVITY(id),{...params}))\n      // doFetch(\"GET\", IAM_APP, USERS_ACTIVITY(id))\n      // doFetch(\"GET\", IAM_APP, TICKET_DETAIL(id))\n\n      \n    }\n    \n  }, [])\n  \n  \n  return (\n\n    <div className=\"content\">\n\n      <div className=\"mt-5\"></div>\n\n      <div className=\" d-flex align-items-center justify-content-between w-auto mx-auto mt-5 pt-5\">\n\n        <div className=\"d-flex\">\n\n          <img src=\"/assests/drawer/Polygon.svg\" />\n\n          <p className=\"font_title_name me-1\">سفارش‌ها </p>\n\n        </div>\n\n        <Filters params={params} setParams={setParams} />\n\n      </div>\n\n      <div className=\"d-flex px-3\">\n\n        <div style={{ flexGrow: 1, width: \"100%\", height: \"100%\" }}>\n          {console.log(\"result\",data.items)}\n          <DataGrid\n\n            style={{ border: 0 }}\n\n            autoHeight\n\n            classes={{\n\n              root: \"grid-header-wrapper-alt\"\n\n            }}\n\n            rows={data?.items ?? []}\n\n            loading={isLoading}\n\n            columns={columns}\n\n            getRowClassName={\n\n              params => 'grid-content-alt'\n\n            }\n\n            headerHeight={50}\n\n            rowHeight={52}\n\n            isRowSelectable={false}\n\n            components={{\n\n              Pagination: CustomPagination\n\n            }}\n\n            pageSize={10}\n\n            rowCount={data?.items?.length}\n\n            paginationMode=\"server\"\n\n            onPageChange={(param) => doFetch(\"GET\", IAM_APP, UrlQuery(USERS_ACTIVITY(id), { ...params, owner_id: id, page: param + 1}))}\n\n            disableSelectionOnClick\n\n            disableColumnMenu\n\n          />\n\n        </div>\n\n      </div>\n\n    </div>\n\n  )\n\n}\n\n\n\nexport default UserLoginActivity\n\n"]},"metadata":{},"sourceType":"module"}