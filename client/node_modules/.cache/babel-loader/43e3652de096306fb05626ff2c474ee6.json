{"ast":null,"code":"var _jsxFileName = \"/Users/yasaman/Documents/moj_adminpanel/adminpanel/src/components/managemant/classicEditor.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst loadScript = require('load-script');\n\nvar defaultScriptUrl = 'https://cdn.ckeditor.com/4.6.2/standard/ckeditor.js';\n/**\n * @author codeslayer1\n * @description CKEditor component to render a CKEditor textarea with defined configs and all CKEditor events handler\n */\n\nclass CKEditor extends React.Component {\n  constructor(props) {\n    super(props); //Bindings\n\n    this.onLoad = this.onLoad.bind(this); //State initialization\n\n    this.state = {\n      isScriptLoaded: props.isScriptLoaded\n    };\n  } //load ckeditor script as soon as component mounts if not already loaded\n\n\n  componentDidMount() {\n    if (!this.state.isScriptLoaded) {\n      loadScript(this.props.scriptUrl, this.onLoad);\n    } else {\n      this.onLoad();\n    }\n  }\n\n  componentWillReceiveProps(props) {\n    const editor = this.editorInstance;\n\n    if (editor && editor.getData() !== props.content) {\n      editor.setData(props.content);\n    }\n  }\n\n  componentWillUnmount() {\n    this.unmounting = true;\n  }\n\n  onLoad() {\n    if (this.unmounting) return;\n    this.setState({\n      isScriptLoaded: true\n    });\n\n    if (!window.CKEDITOR) {\n      console.error('CKEditor not found');\n      return;\n    }\n\n    this.editorInstance = window.CKEDITOR.appendTo(ReactDOM.findDOMNode(this), this.props.config, this.props.content); //Register listener for custom events if any\n\n    for (var event in this.props.events) {\n      var eventHandler = this.props.events[event];\n      this.editorInstance.on(event, eventHandler);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: this.props.activeClass\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nCKEditor.defaultProps = {\n  content: '',\n  config: {},\n  isScriptLoaded: false,\n  scriptUrl: defaultScriptUrl,\n  activeClass: '',\n  events: {}\n};\nCKEditor.propTypes = {\n  content: PropTypes.any,\n  config: PropTypes.object,\n  isScriptLoaded: PropTypes.bool,\n  scriptUrl: PropTypes.string,\n  activeClass: PropTypes.string,\n  events: PropTypes.object\n};\nexport default CKEditor;","map":{"version":3,"sources":["/Users/yasaman/Documents/moj_adminpanel/adminpanel/src/components/managemant/classicEditor.js"],"names":["React","PropTypes","ReactDOM","loadScript","require","defaultScriptUrl","CKEditor","Component","constructor","props","onLoad","bind","state","isScriptLoaded","componentDidMount","scriptUrl","componentWillReceiveProps","editor","editorInstance","getData","content","setData","componentWillUnmount","unmounting","setState","window","CKEDITOR","console","error","appendTo","findDOMNode","config","event","events","eventHandler","on","render","activeClass","defaultProps","propTypes","any","object","bool","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nconst loadScript = require('load-script');\n\nvar defaultScriptUrl = 'https://cdn.ckeditor.com/4.6.2/standard/ckeditor.js';\n\n/**\n * @author codeslayer1\n * @description CKEditor component to render a CKEditor textarea with defined configs and all CKEditor events handler\n */\nclass CKEditor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    //Bindings\n    this.onLoad = this.onLoad.bind(this);\n\n    //State initialization\n    this.state = {\n      isScriptLoaded: props.isScriptLoaded\n    };\n  }\n\n  //load ckeditor script as soon as component mounts if not already loaded\n  componentDidMount() {\n    if (!this.state.isScriptLoaded) {\n      loadScript(this.props.scriptUrl, this.onLoad);\n    } else {\n      this.onLoad();\n    }\n  }\n\n  componentWillReceiveProps(props) {\n    const editor = this.editorInstance;\n    if (editor && editor.getData() !== props.content) {\n      editor.setData(props.content);\n    }\n  }\n\n  componentWillUnmount() {\n    this.unmounting = true;\n  }\n\n  onLoad() {\n    if (this.unmounting) return;\n\n    this.setState({\n      isScriptLoaded: true\n    });\n\n    if (!window.CKEDITOR) {\n      console.error('CKEditor not found');\n      return;\n    }\n\n    this.editorInstance = window.CKEDITOR.appendTo(\n      ReactDOM.findDOMNode(this),\n      this.props.config,\n      this.props.content\n    );\n\n    //Register listener for custom events if any\n    for (var event in this.props.events) {\n      var eventHandler = this.props.events[event];\n\n      this.editorInstance.on(event, eventHandler);\n    }\n  }\n\n  render() {\n    return <div className={this.props.activeClass} />;\n  }\n}\n\nCKEditor.defaultProps = {\n  content: '',\n  config: {},\n  isScriptLoaded: false,\n  scriptUrl: defaultScriptUrl,\n  activeClass: '',\n  events: {}\n};\n\nCKEditor.propTypes = {\n  content: PropTypes.any,\n  config: PropTypes.object,\n  isScriptLoaded: PropTypes.bool,\n  scriptUrl: PropTypes.string,\n  activeClass: PropTypes.string,\n  events: PropTypes.object\n};\n\nexport default CKEditor;"]},"metadata":{},"sourceType":"module"}